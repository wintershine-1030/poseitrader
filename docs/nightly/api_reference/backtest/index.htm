<!doctype html>
<html lang="en" dir="ltr" class="docs-wrapper plugin-docs plugin-id-default docs-version-nightly docs-doc-page docs-doc-id-api_reference/backtest" data-has-hydrated="false">
<head>
<meta charset="UTF-8">
<meta name="generator" content="Docusaurus v3.8.1">
<title data-rh="true">Backtest | PoseiTrader Documentation</title><meta data-rh="true" name="viewport" content="width=device-width,initial-scale=1"><meta data-rh="true" name="twitter:card" content="summary_large_image"><meta data-rh="true" property="og:image" content="docs/latestimg/docusaurus-social-card.jpg"><meta data-rh="true" name="twitter:image" content="docs/latestimg/docusaurus-social-card.jpg"><meta data-rh="true" property="og:url" content="docs/latestnightly/api_reference/backtest"><meta data-rh="true" property="og:locale" content="en"><meta data-rh="true" name="docusaurus_locale" content="en"><meta data-rh="true" name="docsearch:language" content="en"><meta data-rh="true" name="keywords" content="Open-source trading platform, Algorithmic trading software, Event-driven backtesting, Live trading with no code changes, Trade any asset class, Low-latency trading execution, Python API for trading strategies, Custom market data integration, Futures and options trading, Crypto spot and derivatives trading, Equities trading simulation, FX spot trading, Sports betting markets trading, Fast backtesting strategies, Advanced trading orders, Rust-based trading platform, High-performance trading system, Nanosecond resolution market simulation, Trading across multiple venues, Trading platform for hedge funds, Seamless data integration, Customizable trading strategies, AI and ML trading strategies, Posei trading platform, Multi-venue trading, Unlimited backtesting strategies, Fast trading execution solutions, Realistic market simulations, Seamless trading API integration, PoseiTrader Documentation, Docs, PoseiTrader Docs"><meta data-rh="true" name="title" content="PoseiTrader Documentation"><meta data-rh="true" name="og:title" content="PoseiTrader Documentation"><meta data-rh="true" name="og:description" content="PoseiTrader is a high-performance platform for automating trading strategies, built on the powerful Posei framework for backtesting and real-time trading."><meta data-rh="true" name="og:image" content="img/preview.png"><meta data-rh="true" name="og:url" content="/docs/latest"><meta data-rh="true" name="docusaurus_version" content="nightly"><meta data-rh="true" name="docusaurus_tag" content="docs-default-nightly"><meta data-rh="true" name="docsearch:version" content="nightly"><meta data-rh="true" name="docsearch:docusaurus_tag" content="docs-default-nightly"><meta data-rh="true" property="og:title" content="Backtest | PoseiTrader Documentation"><meta data-rh="true" name="description" content="The backtest subpackage groups components relating to backtesting."><meta data-rh="true" property="og:description" content="The backtest subpackage groups components relating to backtesting."><link data-rh="true" rel="icon" href="../../../img/shell.ico"><link data-rh="true" rel="canonical" href="index.htm"><link data-rh="true" rel="alternate" href="index.htm" hreflang="en"><link data-rh="true" rel="alternate" href="index.htm" hreflang="x-default"><link data-rh="true" rel="preconnect" href="https://CWRKEEL01M-dsn.algolia.net" crossorigin="anonymous"><script data-rh="true" type="application/ld+json">{"@context":"https://schema.org","@type":"BreadcrumbList","itemListElement":[{"@type":"ListItem","position":1,"name":"Python API","item":"docs/latestnightly/api_reference/"},{"@type":"ListItem","position":2,"name":"Backtest","item":"docs/latestnightly/api_reference/backtest"}]}</script><link rel="search" type="application/opensearchdescription+xml" title="PoseiTrader Documentation" href="../../../opensearch.xml">
<script>!function(){var t=window.location.pathname;if(t.startsWith("/docs")&&!t.startsWith("/docs/latest")&&!t.startsWith("/docs/nightly")){var s=t.replace("/docs","/docs/latest");window.location.href=s}}()</script>
<link rel="preconnect" href="https://www.google-analytics.com">
<link rel="preconnect" href="https://www.googletagmanager.com">
<script async src="https://www.googletagmanager.com/gtag/js?id=G-TR4XK597XK"></script>
<script>function gtag(){dataLayer.push(arguments)}window.dataLayer=window.dataLayer||[],gtag("js",new Date),gtag("config","G-TR4XK597XK",{anonymize_ip:!0})</script><link rel="stylesheet" href="../../../assets/css/styles.0f0f692e.css">
<script src="../../../assets/js/runtime~main.92b727d5.js" defer="defer"></script>
<script src="../../../assets/js/main.1cd42d85.js" defer="defer"></script>
</head>
<body class="navigation-with-keyboard">
<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><defs>
<symbol id="theme-svg-external-link" viewbox="0 0 24 24"><path fill="currentColor" d="M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z"></path></symbol>
</defs></svg>
<script>!function(){var t="dark";var e=function(){try{return new URLSearchParams(window.location.search).get("docusaurus-theme")}catch(t){}}()||function(){try{return window.localStorage.getItem("theme")}catch(t){}}();document.documentElement.setAttribute("data-theme",e||t),document.documentElement.setAttribute("data-theme-choice",e||t)}(),function(){try{const c=new URLSearchParams(window.location.search).entries();for(var[t,e]of c)if(t.startsWith("docusaurus-data-")){var a=t.replace("docusaurus-data-","data-");document.documentElement.setAttribute(a,e)}}catch(t){}}()</script><div id="__docusaurus"><div role="region" aria-label="Skip to main content"><a class="skipToContent_fXgn" href="#__docusaurus_skipToContent_fallback">Skip to main content</a></div><nav aria-label="Main" class="theme-layout-navbar navbar navbar--fixed-top navbarHideable_m1mJ"><div class="navbar__inner"><div class="theme-layout-navbar-left navbar__items"><button aria-label="Toggle navigation bar" aria-expanded="false" class="navbar__toggle clean-btn" type="button"><svg width="30" height="30" viewbox="0 0 30 30" aria-hidden="true"><path stroke="currentColor" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" d="M4 7h22M4 15h22M4 23h22"></path></svg></button><a href="../../../../index.htm" target="_blank" rel="noopener noreferrer" class="navbar__brand"><div class="navbar__logo"><img src="../../../img/nt-black-large.webp" alt="PoseiTrader Logo" class="themedComponent_mlkZ themedComponent--light_NVdE"><img src="../../../img/nt-white-large.webp" alt="PoseiTrader Logo" class="themedComponent_mlkZ themedComponent--dark_xIcU"></div><b class="navbar__title text--truncate"></b></a><div class="navbar__item dropdown dropdown--hoverable"><a href="#" aria-haspopup="true" aria-expanded="false" role="button" class="navbar__link">Version</a><ul class="dropdown__menu"><li><a class="dropdown__link" href="../../../latest/index.html">latest</a></li><li><a aria-current="page" class="dropdown__link dropdown__link--active" href="../../index.htm">nightly</a></li></ul></div><div class="navbarSearchContainer_Bca1"><button type="button" class="DocSearch DocSearch-Button" aria-label="Search (Command+K)"><span class="DocSearch-Button-Container"><svg width="20" height="20" class="DocSearch-Search-Icon" viewbox="0 0 20 20" aria-hidden="true"><path d="M14.386 14.386l4.0877 4.0877-4.0877-4.0877c-2.9418 2.9419-7.7115 2.9419-10.6533 0-2.9419-2.9418-2.9419-7.7115 0-10.6533 2.9418-2.9419 7.7115-2.9419 10.6533 0 2.9419 2.9418 2.9419 7.7115 0 10.6533z" stroke="currentColor" fill="none" fill-rule="evenodd" stroke-linecap="round" stroke-linejoin="round"></path></svg><span class="DocSearch-Button-Placeholder">Search</span></span><span class="DocSearch-Button-Keys"></span></button></div></div><div class="theme-layout-navbar-right navbar__items navbar__items--right"><a href="https://github.com/poseisysstems" target="_blank" rel="noopener noreferrer" class="navbar__item navbar__link header-github-link common-social" aria-label="GitHub repository"></a> <a href="https://twitter.com/PoseiTrader" target="_blank" rel="noopener noreferrer" class="navbar__item navbar__link header-x-link common-social" aria-label="X"></a><div class="toggleContainer_T22x colorModeToggle_DEke"><button class="clean-btn toggleButton_yw5v toggleButtonDisabled_BJd7" type="button" disabled="" title="Switch between dark and light mode (currently light mode)" aria-label="Switch between dark and light mode (currently light mode)" aria-live="polite"><div class="switch_Ms1n"><span class="iconWrapper_FHql"><style data-emotion="css lp52so">.css-lp52so{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;width:1em;height:1em;display:inline-block;fill:currentColor;-webkit-flex-shrink:0;-ms-flex-negative:0;flex-shrink:0;-webkit-transition:fill 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;transition:fill 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;font-size:1.5rem;color:black;font-size:14px;}</style><svg class="MuiSvgIcon-root MuiSvgIcon-fontSizeMedium lightToggleIcon_SFTY css-lp52so" focusable="false" aria-hidden="true" viewbox="0 0 24 24" data-testid="LightModeIcon"><path d="M12 7c-2.76 0-5 2.24-5 5s2.24 5 5 5 5-2.24 5-5-2.24-5-5-5M2 13h2c.55 0 1-.45 1-1s-.45-1-1-1H2c-.55 0-1 .45-1 1s.45 1 1 1m18 0h2c.55 0 1-.45 1-1s-.45-1-1-1h-2c-.55 0-1 .45-1 1s.45 1 1 1M11 2v2c0 .55.45 1 1 1s1-.45 1-1V2c0-.55-.45-1-1-1s-1 .45-1 1m0 18v2c0 .55.45 1 1 1s1-.45 1-1v-2c0-.55-.45-1-1-1s-1 .45-1 1M5.99 4.58c-.39-.39-1.03-.39-1.41 0-.39.39-.39 1.03 0 1.41l1.06 1.06c.39.39 1.03.39 1.41 0s.39-1.03 0-1.41zm12.37 12.37c-.39-.39-1.03-.39-1.41 0-.39.39-.39 1.03 0 1.41l1.06 1.06c.39.39 1.03.39 1.41 0 .39-.39.39-1.03 0-1.41zm1.06-10.96c.39-.39.39-1.03 0-1.41-.39-.39-1.03-.39-1.41 0l-1.06 1.06c-.39.39-.39 1.03 0 1.41s1.03.39 1.41 0zM7.05 18.36c.39-.39.39-1.03 0-1.41-.39-.39-1.03-.39-1.41 0l-1.06 1.06c-.39.39-.39 1.03 0 1.41s1.03.39 1.41 0z"></path></svg><style data-emotion="css 13m6tje">.css-13m6tje{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;width:1em;height:1em;display:inline-block;fill:currentColor;-webkit-flex-shrink:0;-ms-flex-negative:0;flex-shrink:0;-webkit-transition:fill 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;transition:fill 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;font-size:1.5rem;color:white;font-size:14px;}</style><svg class="MuiSvgIcon-root MuiSvgIcon-fontSizeMedium darkToggleIcon_ekgs css-13m6tje" focusable="false" aria-hidden="true" viewbox="0 0 24 24" data-testid="DarkModeIcon"><path d="M12 3c-4.97 0-9 4.03-9 9s4.03 9 9 9 9-4.03 9-9c0-.46-.04-.92-.1-1.36-.98 1.37-2.58 2.26-4.4 2.26-2.98 0-5.4-2.42-5.4-5.4 0-1.81.89-3.42 2.26-4.4-.44-.06-.9-.1-1.36-.1"></path></svg></span></div></button></div></div></div><div role="presentation" class="navbar-sidebar__backdrop"></div></nav><div id="__docusaurus_skipToContent_fallback" class="theme-layout-main main-wrapper mainWrapper_z2l0"><div class="docsWrapper_hBAB"><button aria-label="Scroll back to top" class="clean-btn theme-back-to-top-button backToTopButton_sjWU" type="button"></button><div class="docRoot_UBD9"><aside class="theme-doc-sidebar-container docSidebarContainer_YfHR"><div class="sidebarViewport_aRkj"><div class="sidebar_njMd sidebarWithHideableNavbar_wUlq"><a href="../../../../index.htm" target="_blank" rel="noopener noreferrer" tabindex="-1" class="sidebarLogo_isFc"><img src="../../../img/nt-black-large.webp" alt="PoseiTrader Logo" class="themedComponent_mlkZ themedComponent--light_NVdE"><img src="../../../img/nt-white-large.webp" alt="PoseiTrader Logo" class="themedComponent_mlkZ themedComponent--dark_xIcU"><b></b></a><nav aria-label="Docs sidebar" class="menu thin-scrollbar menu_SIkG"><ul class="theme-doc-sidebar-menu menu__list"><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-1 menu__list-item"><a class="menu__link" href="../../index.htm">PoseiTrader Documentation</a></li><li class="theme-doc-sidebar-item-category theme-doc-sidebar-item-category-level-1 menu__list-item menu__list-item--collapsed"><div class="menu__list-item-collapsible"><a class="menu__link menu__link--sublist" href="../../getting_started/index.htm">Getting Started</a><button aria-label="Expand sidebar category &#x27;Getting Started&#x27;" aria-expanded="false" type="button" class="clean-btn menu__caret"></button></div></li><li class="theme-doc-sidebar-item-category theme-doc-sidebar-item-category-level-1 menu__list-item menu__list-item--collapsed"><div class="menu__list-item-collapsible"><a class="menu__link menu__link--sublist" href="../../concepts/index.htm">Concepts</a><button aria-label="Expand sidebar category &#x27;Concepts&#x27;" aria-expanded="false" type="button" class="clean-btn menu__caret"></button></div></li><li class="theme-doc-sidebar-item-category theme-doc-sidebar-item-category-level-1 menu__list-item menu__list-item--collapsed"><div class="menu__list-item-collapsible"><a class="menu__link menu__link--sublist" href="../../tutorials/index.htm">Tutorials</a><button aria-label="Expand sidebar category &#x27;Tutorials&#x27;" aria-expanded="false" type="button" class="clean-btn menu__caret"></button></div></li><li class="theme-doc-sidebar-item-category theme-doc-sidebar-item-category-level-1 menu__list-item menu__list-item--collapsed"><div class="menu__list-item-collapsible"><a class="menu__link menu__link--sublist" href="../../integrations/index.htm">Integrations</a><button aria-label="Expand sidebar category &#x27;Integrations&#x27;" aria-expanded="false" type="button" class="clean-btn menu__caret"></button></div></li><li class="theme-doc-sidebar-item-category theme-doc-sidebar-item-category-level-1 menu__list-item"><div class="menu__list-item-collapsible"><a class="menu__link menu__link--sublist menu__link--active" href="../index.htm">Python API</a><button aria-label="Collapse sidebar category &#x27;Python API&#x27;" aria-expanded="true" type="button" class="clean-btn menu__caret"></button></div><ul class="menu__list"><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-2 menu__list-item"><a class="menu__link" tabindex="0" href="../accounting/index.htm">Accounting</a></li><li class="theme-doc-sidebar-item-category theme-doc-sidebar-item-category-level-2 menu__list-item menu__list-item--collapsed"><div class="menu__list-item-collapsible"><a class="menu__link menu__link--sublist" tabindex="0" href="../adapters/index.htm">Adapters</a><button aria-label="Expand sidebar category &#x27;Adapters&#x27;" aria-expanded="false" type="button" class="clean-btn menu__caret"></button></div></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-2 menu__list-item"><a class="menu__link" tabindex="0" href="../analysis/index.htm">Analysis</a></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-2 menu__list-item"><a class="menu__link menu__link--active" aria-current="page" tabindex="0" href="index.htm">Backtest</a></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-2 menu__list-item"><a class="menu__link" tabindex="0" href="../cache/index.htm">Cache</a></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-2 menu__list-item"><a class="menu__link" tabindex="0" href="../common/index.htm">Common</a></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-2 menu__list-item"><a class="menu__link" tabindex="0" href="../config/index.htm">Config</a></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-2 menu__list-item"><a class="menu__link" tabindex="0" href="../core/index.htm">Core</a></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-2 menu__list-item"><a class="menu__link" tabindex="0" href="../data/index.htm">Data</a></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-2 menu__list-item"><a class="menu__link" tabindex="0" href="../execution/index.htm">Execution</a></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-2 menu__list-item"><a class="menu__link" tabindex="0" href="../indicators/index.htm">Indicators</a></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-2 menu__list-item"><a class="menu__link" tabindex="0" href="../live/index.htm">Live</a></li><li class="theme-doc-sidebar-item-category theme-doc-sidebar-item-category-level-2 menu__list-item menu__list-item--collapsed"><div class="menu__list-item-collapsible"><a class="menu__link menu__link--sublist" tabindex="0" href="../model/index.htm">Model</a><button aria-label="Expand sidebar category &#x27;Model&#x27;" aria-expanded="false" type="button" class="clean-btn menu__caret"></button></div></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-2 menu__list-item"><a class="menu__link" tabindex="0" href="../persistence/index.htm">Persistence</a></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-2 menu__list-item"><a class="menu__link" tabindex="0" href="../portfolio/index.htm">Portfolio</a></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-2 menu__list-item"><a class="menu__link" tabindex="0" href="../risk/index.htm">Risk</a></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-2 menu__list-item"><a class="menu__link" tabindex="0" href="../serialization/index.htm">Serialization</a></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-2 menu__list-item"><a class="menu__link" tabindex="0" href="../system/index.htm">System</a></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-2 menu__list-item"><a class="menu__link" tabindex="0" href="../trading/index.htm">Trading</a></li></ul></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-1 menu__list-item"><a href="../../../core-nightly/index.html" target="_blank" rel="noopener noreferrer" class="menu__link menuExternalLink_NmtK">Rust API<svg width="13.5" height="13.5" aria-hidden="true" class="iconExternalLink_nPIU"><use href="#theme-svg-external-link"></use></svg></a></li><li class="theme-doc-sidebar-item-category theme-doc-sidebar-item-category-level-1 menu__list-item menu__list-item--collapsed"><div class="menu__list-item-collapsible"><a class="menu__link menu__link--sublist" href="../../developer_guide/index.htm">Developer Guide</a><button aria-label="Expand sidebar category &#x27;Developer Guide&#x27;" aria-expanded="false" type="button" class="clean-btn menu__caret"></button></div></li></ul></nav></div></div></aside><main class="docMainContainer_TBSr"><div class="container padding-top--md padding-bottom--lg"><div><div class="row"><div class="col docItemCol_VOVn"><div class="docItemContainer_Djhp"><article><nav class="theme-doc-breadcrumbs breadcrumbsContainer_Z_bl" aria-label="Breadcrumbs"><ul class="breadcrumbs"><li class="breadcrumbs__item"><a class="breadcrumbs__link" href="../index.htm"><span>Python API</span></a></li><li class="breadcrumbs__item breadcrumbs__item--active"><span class="breadcrumbs__link">Backtest</span></li></ul></nav><span class="theme-doc-version-badge badge badge--secondary">Version: nightly</span><div class="tocCollapsible_ETCw theme-doc-toc-mobile tocMobile_ITEo"><button type="button" class="clean-btn tocCollapsibleButton_TO0P">On this page</button></div><div class="theme-doc-markdown markdown"><header><h1>Backtest</h1></header>
<p>The backtest subpackage groups components relating to backtesting.</p>
<p><a id="module-posei_trader.backtest.auction"></a></p>
<p><a id="module-posei_trader.backtest.data_client"></a></p>
<p>This module provides a data client for backtesting.</p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="class-backtestdataclient"><em>class</em> BacktestDataClient<a href="#class-backtestdataclient" class="hash-link" aria-label="Direct link to class-backtestdataclient" title="Direct link to class-backtestdataclient">​</a></h3>
<p>Bases: <a href="../data/index.htm#posei_trader.data.client.DataClient"><code>DataClient</code></a></p>
<p>BacktestDataClient(ClientId client_id, MessageBus msgbus, Cache cache, Clock clock, config: PoseiConfig | None = None) -&gt; None</p>
<p>Provides an implementation of DataClient for backtesting.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.ClientId"><em>ClientId</em></a>) – The data client ID.</li>
<li><strong>msgbus</strong> (<a href="../common/index.htm#posei_trader.common.component.MessageBus"><em>MessageBus</em></a>) – The message bus for the client.</li>
<li><strong>cache</strong> (<a href="../cache/index.htm#posei_trader.cache.Cache"><em>Cache</em></a>) – The cache for the client.</li>
<li><strong>clock</strong> (<a href="../common/index.htm#posei_trader.common.component.Clock"><em>Clock</em></a>) – The clock for the client.</li>
<li><strong>config</strong> (<a href="../config/index.htm#posei_trader.common.config.PoseiConfig"><em>PoseiConfig</em></a> <em>,</em> <em>optional</em>) – The configuration for the instance.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="degradeself--void">degrade(self) → void<a href="#degradeself--void" class="hash-link" aria-label="Direct link to degrade(self) → void" title="Direct link to degrade(self) → void">​</a></h4>
<p>Degrade the component.</p>
<p>While executing on_degrade() any exception will be logged and reraised, then the component
will remain in a <code>DEGRADING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning">WARNING<a href="#warning" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="disposeself--void">dispose(self) → void<a href="#disposeself--void" class="hash-link" aria-label="Direct link to dispose(self) → void" title="Direct link to dispose(self) → void">​</a></h4>
<p>Dispose of the component.</p>
<p>While executing on_dispose() any exception will be logged and reraised, then the component
will remain in a <code>DISPOSING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-1">WARNING<a href="#warning-1" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="faultself--void">fault(self) → void<a href="#faultself--void" class="hash-link" aria-label="Direct link to fault(self) → void" title="Direct link to fault(self) → void">​</a></h4>
<p>Fault the component.</p>
<p>Calling this method multiple times has the same effect as calling it once (it is idempotent).
Once called, it cannot be reversed, and no other methods should be called on this instance.</p>
<p>While executing on_fault() any exception will be logged and reraised, then the component
will remain in a <code>FAULTING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-2">WARNING<a href="#warning-2" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="classmethod-fully_qualified_namecls--str"><em>classmethod</em> fully_qualified_name(cls) → str<a href="#classmethod-fully_qualified_namecls--str" class="hash-link" aria-label="Direct link to classmethod-fully_qualified_namecls--str" title="Direct link to classmethod-fully_qualified_namecls--str">​</a></h4>
<p>Return the fully qualified name for the components class.</p>
<ul>
<li><strong>Return type:</strong>
str</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="id">id<a href="#id" class="hash-link" aria-label="Direct link to id" title="Direct link to id">​</a></h4>
<p>The components ID.</p>
<ul>
<li><strong>Returns:</strong>
ComponentId</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_connected">is_connected<a href="#is_connected" class="hash-link" aria-label="Direct link to is_connected" title="Direct link to is_connected">​</a></h4>
<p>If the client is connected.</p>
<ul>
<li><strong>Returns:</strong>
bool</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_degraded">is_degraded<a href="#is_degraded" class="hash-link" aria-label="Direct link to is_degraded" title="Direct link to is_degraded">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>DEGRADED</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_degraded</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_disposed">is_disposed<a href="#is_disposed" class="hash-link" aria-label="Direct link to is_disposed" title="Direct link to is_disposed">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>DISPOSED</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_disposed</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_faulted">is_faulted<a href="#is_faulted" class="hash-link" aria-label="Direct link to is_faulted" title="Direct link to is_faulted">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>FAULTED</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_faulted</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_initialized">is_initialized<a href="#is_initialized" class="hash-link" aria-label="Direct link to is_initialized" title="Direct link to is_initialized">​</a></h4>
<p>bool</p>
<p>Return whether the component has been initialized (component.state &gt;= <code>INITIALIZED</code>).</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_initialized</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_running">is_running<a href="#is_running" class="hash-link" aria-label="Direct link to is_running" title="Direct link to is_running">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>RUNNING</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_running</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_stopped">is_stopped<a href="#is_stopped" class="hash-link" aria-label="Direct link to is_stopped" title="Direct link to is_stopped">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>STOPPED</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_stopped</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="requestself-requestdata-request--void">request(self, RequestData request) → void<a href="#requestself-requestdata-request--void" class="hash-link" aria-label="Direct link to request(self, RequestData request) → void" title="Direct link to request(self, RequestData request) → void">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="resetself--void">reset(self) → void<a href="#resetself--void" class="hash-link" aria-label="Direct link to reset(self) → void" title="Direct link to reset(self) → void">​</a></h4>
<p>Reset the component.</p>
<p>All stateful fields are reset to their initial value.</p>
<p>While executing on_reset() any exception will be logged and reraised, then the component
will remain in a <code>RESETTING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-3">WARNING<a href="#warning-3" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="resumeself--void">resume(self) → void<a href="#resumeself--void" class="hash-link" aria-label="Direct link to resume(self) → void" title="Direct link to resume(self) → void">​</a></h4>
<p>Resume the component.</p>
<p>While executing on_resume() any exception will be logged and reraised, then the component
will remain in a <code>RESUMING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-4">WARNING<a href="#warning-4" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="shutdown_systemself-str-reasonnone--void">shutdown_system(self, str reason=None) → void<a href="#shutdown_systemself-str-reasonnone--void" class="hash-link" aria-label="Direct link to shutdown_system(self, str reason=None) → void" title="Direct link to shutdown_system(self, str reason=None) → void">​</a></h4>
<p>Initiate a system-wide shutdown by generating and publishing a ShutdownSystem command.</p>
<p>The command is handled by the system’s PoseiKernel, which will invoke either stop (synchronously)
or stop_async (asynchronously) depending on the execution context and the presence of an active event loop.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>reason</strong> (<em>str</em> <em>,</em> <em>optional</em>) – The reason for issuing the shutdown command.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="startself--void">start(self) → void<a href="#startself--void" class="hash-link" aria-label="Direct link to start(self) → void" title="Direct link to start(self) → void">​</a></h4>
<p>Start the component.</p>
<p>While executing on_start() any exception will be logged and reraised, then the component
will remain in a <code>STARTING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-5">WARNING<a href="#warning-5" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="state">state<a href="#state" class="hash-link" aria-label="Direct link to state" title="Direct link to state">​</a></h4>
<p>ComponentState</p>
<p>Return the components current state.</p>
<ul>
<li><strong>Return type:</strong>
ComponentState</li>
<li><strong>Type:</strong>
Component.state</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="stopself--void">stop(self) → void<a href="#stopself--void" class="hash-link" aria-label="Direct link to stop(self) → void" title="Direct link to stop(self) → void">​</a></h4>
<p>Stop the component.</p>
<p>While executing on_stop() any exception will be logged and reraised, then the component
will remain in a <code>STOPPING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-6">WARNING<a href="#warning-6" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribeself-subscribedata-command--void">subscribe(self, SubscribeData command) → void<a href="#subscribeself-subscribedata-command--void" class="hash-link" aria-label="Direct link to subscribe(self, SubscribeData command) → void" title="Direct link to subscribe(self, SubscribeData command) → void">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribed_custom_dataself--list">subscribed_custom_data(self) → list<a href="#subscribed_custom_dataself--list" class="hash-link" aria-label="Direct link to subscribed_custom_data(self) → list" title="Direct link to subscribed_custom_data(self) → list">​</a></h4>
<p>Return the custom data types subscribed to.</p>
<ul>
<li><strong>Return type:</strong>
list[<a href="../model/data/index.htm#posei_trader.model.data.DataType">DataType</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="trader_id">trader_id<a href="#trader_id" class="hash-link" aria-label="Direct link to trader_id" title="Direct link to trader_id">​</a></h4>
<p>The trader ID associated with the component.</p>
<ul>
<li><strong>Returns:</strong>
TraderId</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="type">type<a href="#type" class="hash-link" aria-label="Direct link to type" title="Direct link to type">​</a></h4>
<p>The components type.</p>
<ul>
<li><strong>Returns:</strong>
type</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribeself-unsubscribedata-command--void">unsubscribe(self, UnsubscribeData command) → void<a href="#unsubscribeself-unsubscribedata-command--void" class="hash-link" aria-label="Direct link to unsubscribe(self, UnsubscribeData command) → void" title="Direct link to unsubscribe(self, UnsubscribeData command) → void">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="venue">venue<a href="#venue" class="hash-link" aria-label="Direct link to venue" title="Direct link to venue">​</a></h4>
<p>The clients venue ID (if applicable).</p>
<ul>
<li><strong>Returns:</strong>
Venue or <code>None</code></li>
</ul>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="class-backtestmarketdataclient"><em>class</em> BacktestMarketDataClient<a href="#class-backtestmarketdataclient" class="hash-link" aria-label="Direct link to class-backtestmarketdataclient" title="Direct link to class-backtestmarketdataclient">​</a></h3>
<p>Bases: <a href="../data/index.htm#posei_trader.data.client.MarketDataClient"><code>MarketDataClient</code></a></p>
<p>BacktestMarketDataClient(ClientId client_id, MessageBus msgbus, Cache cache, Clock clock)</p>
<p>Provides an implementation of MarketDataClient for backtesting.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.ClientId"><em>ClientId</em></a>) – The data client ID.</li>
<li><strong>msgbus</strong> (<a href="../common/index.htm#posei_trader.common.component.MessageBus"><em>MessageBus</em></a>) – The message bus for the client.</li>
<li><strong>cache</strong> (<a href="../cache/index.htm#posei_trader.cache.Cache"><em>Cache</em></a>) – The cache for the client.</li>
<li><strong>clock</strong> (<a href="../common/index.htm#posei_trader.common.component.Clock"><em>Clock</em></a>) – The clock for the client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="degradeself--void-1">degrade(self) → void<a href="#degradeself--void-1" class="hash-link" aria-label="Direct link to degrade(self) → void" title="Direct link to degrade(self) → void">​</a></h4>
<p>Degrade the component.</p>
<p>While executing on_degrade() any exception will be logged and reraised, then the component
will remain in a <code>DEGRADING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-7">WARNING<a href="#warning-7" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="disposeself--void-1">dispose(self) → void<a href="#disposeself--void-1" class="hash-link" aria-label="Direct link to dispose(self) → void" title="Direct link to dispose(self) → void">​</a></h4>
<p>Dispose of the component.</p>
<p>While executing on_dispose() any exception will be logged and reraised, then the component
will remain in a <code>DISPOSING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-8">WARNING<a href="#warning-8" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="faultself--void-1">fault(self) → void<a href="#faultself--void-1" class="hash-link" aria-label="Direct link to fault(self) → void" title="Direct link to fault(self) → void">​</a></h4>
<p>Fault the component.</p>
<p>Calling this method multiple times has the same effect as calling it once (it is idempotent).
Once called, it cannot be reversed, and no other methods should be called on this instance.</p>
<p>While executing on_fault() any exception will be logged and reraised, then the component
will remain in a <code>FAULTING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-9">WARNING<a href="#warning-9" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="classmethod-fully_qualified_namecls--str-1"><em>classmethod</em> fully_qualified_name(cls) → str<a href="#classmethod-fully_qualified_namecls--str-1" class="hash-link" aria-label="Direct link to classmethod-fully_qualified_namecls--str-1" title="Direct link to classmethod-fully_qualified_namecls--str-1">​</a></h4>
<p>Return the fully qualified name for the components class.</p>
<ul>
<li><strong>Return type:</strong>
str</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="id-1">id<a href="#id-1" class="hash-link" aria-label="Direct link to id" title="Direct link to id">​</a></h4>
<p>The components ID.</p>
<ul>
<li><strong>Returns:</strong>
ComponentId</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_connected-1">is_connected<a href="#is_connected-1" class="hash-link" aria-label="Direct link to is_connected" title="Direct link to is_connected">​</a></h4>
<p>If the client is connected.</p>
<ul>
<li><strong>Returns:</strong>
bool</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_degraded-1">is_degraded<a href="#is_degraded-1" class="hash-link" aria-label="Direct link to is_degraded" title="Direct link to is_degraded">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>DEGRADED</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_degraded</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_disposed-1">is_disposed<a href="#is_disposed-1" class="hash-link" aria-label="Direct link to is_disposed" title="Direct link to is_disposed">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>DISPOSED</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_disposed</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_faulted-1">is_faulted<a href="#is_faulted-1" class="hash-link" aria-label="Direct link to is_faulted" title="Direct link to is_faulted">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>FAULTED</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_faulted</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_initialized-1">is_initialized<a href="#is_initialized-1" class="hash-link" aria-label="Direct link to is_initialized" title="Direct link to is_initialized">​</a></h4>
<p>bool</p>
<p>Return whether the component has been initialized (component.state &gt;= <code>INITIALIZED</code>).</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_initialized</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_running-1">is_running<a href="#is_running-1" class="hash-link" aria-label="Direct link to is_running" title="Direct link to is_running">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>RUNNING</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_running</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_stopped-1">is_stopped<a href="#is_stopped-1" class="hash-link" aria-label="Direct link to is_stopped" title="Direct link to is_stopped">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>STOPPED</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_stopped</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="requestself-requestdata-request--void-1">request(self, RequestData request) → void<a href="#requestself-requestdata-request--void-1" class="hash-link" aria-label="Direct link to request(self, RequestData request) → void" title="Direct link to request(self, RequestData request) → void">​</a></h4>
<p>Request data for the given data type.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>request</strong> (<a href="../data/index.htm#posei_trader.data.messages.RequestData"><em>RequestData</em></a>) – The message for the data request.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="request_barsself-requestbars-request--void">request_bars(self, RequestBars request) → void<a href="#request_barsself-requestbars-request--void" class="hash-link" aria-label="Direct link to request_bars(self, RequestBars request) → void" title="Direct link to request_bars(self, RequestBars request) → void">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="request_instrumentself-requestinstrument-request--void">request_instrument(self, RequestInstrument request) → void<a href="#request_instrumentself-requestinstrument-request--void" class="hash-link" aria-label="Direct link to request_instrument(self, RequestInstrument request) → void" title="Direct link to request_instrument(self, RequestInstrument request) → void">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="request_instrumentsself-requestinstruments-request--void">request_instruments(self, RequestInstruments request) → void<a href="#request_instrumentsself-requestinstruments-request--void" class="hash-link" aria-label="Direct link to request_instruments(self, RequestInstruments request) → void" title="Direct link to request_instruments(self, RequestInstruments request) → void">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="request_order_book_snapshotself-requestorderbooksnapshot-request--void">request_order_book_snapshot(self, RequestOrderBookSnapshot request) → void<a href="#request_order_book_snapshotself-requestorderbooksnapshot-request--void" class="hash-link" aria-label="Direct link to request_order_book_snapshot(self, RequestOrderBookSnapshot request) → void" title="Direct link to request_order_book_snapshot(self, RequestOrderBookSnapshot request) → void">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="request_quote_ticksself-requestquoteticks-request--void">request_quote_ticks(self, RequestQuoteTicks request) → void<a href="#request_quote_ticksself-requestquoteticks-request--void" class="hash-link" aria-label="Direct link to request_quote_ticks(self, RequestQuoteTicks request) → void" title="Direct link to request_quote_ticks(self, RequestQuoteTicks request) → void">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="request_trade_ticksself-requesttradeticks-request--void">request_trade_ticks(self, RequestTradeTicks request) → void<a href="#request_trade_ticksself-requesttradeticks-request--void" class="hash-link" aria-label="Direct link to request_trade_ticks(self, RequestTradeTicks request) → void" title="Direct link to request_trade_ticks(self, RequestTradeTicks request) → void">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="resetself--void-1">reset(self) → void<a href="#resetself--void-1" class="hash-link" aria-label="Direct link to reset(self) → void" title="Direct link to reset(self) → void">​</a></h4>
<p>Reset the component.</p>
<p>All stateful fields are reset to their initial value.</p>
<p>While executing on_reset() any exception will be logged and reraised, then the component
will remain in a <code>RESETTING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-10">WARNING<a href="#warning-10" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="resumeself--void-1">resume(self) → void<a href="#resumeself--void-1" class="hash-link" aria-label="Direct link to resume(self) → void" title="Direct link to resume(self) → void">​</a></h4>
<p>Resume the component.</p>
<p>While executing on_resume() any exception will be logged and reraised, then the component
will remain in a <code>RESUMING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-11">WARNING<a href="#warning-11" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="shutdown_systemself-str-reasonnone--void-1">shutdown_system(self, str reason=None) → void<a href="#shutdown_systemself-str-reasonnone--void-1" class="hash-link" aria-label="Direct link to shutdown_system(self, str reason=None) → void" title="Direct link to shutdown_system(self, str reason=None) → void">​</a></h4>
<p>Initiate a system-wide shutdown by generating and publishing a ShutdownSystem command.</p>
<p>The command is handled by the system’s PoseiKernel, which will invoke either stop (synchronously)
or stop_async (asynchronously) depending on the execution context and the presence of an active event loop.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>reason</strong> (<em>str</em> <em>,</em> <em>optional</em>) – The reason for issuing the shutdown command.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="startself--void-1">start(self) → void<a href="#startself--void-1" class="hash-link" aria-label="Direct link to start(self) → void" title="Direct link to start(self) → void">​</a></h4>
<p>Start the component.</p>
<p>While executing on_start() any exception will be logged and reraised, then the component
will remain in a <code>STARTING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-12">WARNING<a href="#warning-12" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="state-1">state<a href="#state-1" class="hash-link" aria-label="Direct link to state" title="Direct link to state">​</a></h4>
<p>ComponentState</p>
<p>Return the components current state.</p>
<ul>
<li><strong>Return type:</strong>
ComponentState</li>
<li><strong>Type:</strong>
Component.state</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="stopself--void-1">stop(self) → void<a href="#stopself--void-1" class="hash-link" aria-label="Direct link to stop(self) → void" title="Direct link to stop(self) → void">​</a></h4>
<p>Stop the component.</p>
<p>While executing on_stop() any exception will be logged and reraised, then the component
will remain in a <code>STOPPING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-13">WARNING<a href="#warning-13" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribeself-subscribedata-command--void-1">subscribe(self, SubscribeData command) → void<a href="#subscribeself-subscribedata-command--void-1" class="hash-link" aria-label="Direct link to subscribe(self, SubscribeData command) → void" title="Direct link to subscribe(self, SubscribeData command) → void">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_barsself-subscribebars-command--void">subscribe_bars(self, SubscribeBars command) → void<a href="#subscribe_barsself-subscribebars-command--void" class="hash-link" aria-label="Direct link to subscribe_bars(self, SubscribeBars command) → void" title="Direct link to subscribe_bars(self, SubscribeBars command) → void">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_index_pricesself-subscribeindexprices-command--void">subscribe_index_prices(self, SubscribeIndexPrices command) → void<a href="#subscribe_index_pricesself-subscribeindexprices-command--void" class="hash-link" aria-label="Direct link to subscribe_index_prices(self, SubscribeIndexPrices command) → void" title="Direct link to subscribe_index_prices(self, SubscribeIndexPrices command) → void">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_instrumentself-subscribeinstrument-command--void">subscribe_instrument(self, SubscribeInstrument command) → void<a href="#subscribe_instrumentself-subscribeinstrument-command--void" class="hash-link" aria-label="Direct link to subscribe_instrument(self, SubscribeInstrument command) → void" title="Direct link to subscribe_instrument(self, SubscribeInstrument command) → void">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_instrument_closeself-subscribeinstrumentclose-command--void">subscribe_instrument_close(self, SubscribeInstrumentClose command) → void<a href="#subscribe_instrument_closeself-subscribeinstrumentclose-command--void" class="hash-link" aria-label="Direct link to subscribe_instrument_close(self, SubscribeInstrumentClose command) → void" title="Direct link to subscribe_instrument_close(self, SubscribeInstrumentClose command) → void">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_instrument_statusself-subscribeinstrumentstatus-command--void">subscribe_instrument_status(self, SubscribeInstrumentStatus command) → void<a href="#subscribe_instrument_statusself-subscribeinstrumentstatus-command--void" class="hash-link" aria-label="Direct link to subscribe_instrument_status(self, SubscribeInstrumentStatus command) → void" title="Direct link to subscribe_instrument_status(self, SubscribeInstrumentStatus command) → void">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_instrumentsself-subscribeinstruments-command--void">subscribe_instruments(self, SubscribeInstruments command) → void<a href="#subscribe_instrumentsself-subscribeinstruments-command--void" class="hash-link" aria-label="Direct link to subscribe_instruments(self, SubscribeInstruments command) → void" title="Direct link to subscribe_instruments(self, SubscribeInstruments command) → void">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_mark_pricesself-subscribemarkprices-command--void">subscribe_mark_prices(self, SubscribeMarkPrices command) → void<a href="#subscribe_mark_pricesself-subscribemarkprices-command--void" class="hash-link" aria-label="Direct link to subscribe_mark_prices(self, SubscribeMarkPrices command) → void" title="Direct link to subscribe_mark_prices(self, SubscribeMarkPrices command) → void">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_order_book_deltasself-subscribeorderbook-command--void">subscribe_order_book_deltas(self, SubscribeOrderBook command) → void<a href="#subscribe_order_book_deltasself-subscribeorderbook-command--void" class="hash-link" aria-label="Direct link to subscribe_order_book_deltas(self, SubscribeOrderBook command) → void" title="Direct link to subscribe_order_book_deltas(self, SubscribeOrderBook command) → void">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_order_book_snapshotsself-subscribeorderbook-command--void">subscribe_order_book_snapshots(self, SubscribeOrderBook command) → void<a href="#subscribe_order_book_snapshotsself-subscribeorderbook-command--void" class="hash-link" aria-label="Direct link to subscribe_order_book_snapshots(self, SubscribeOrderBook command) → void" title="Direct link to subscribe_order_book_snapshots(self, SubscribeOrderBook command) → void">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_quote_ticksself-subscribequoteticks-command--void">subscribe_quote_ticks(self, SubscribeQuoteTicks command) → void<a href="#subscribe_quote_ticksself-subscribequoteticks-command--void" class="hash-link" aria-label="Direct link to subscribe_quote_ticks(self, SubscribeQuoteTicks command) → void" title="Direct link to subscribe_quote_ticks(self, SubscribeQuoteTicks command) → void">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_trade_ticksself-subscribetradeticks-command--void">subscribe_trade_ticks(self, SubscribeTradeTicks command) → void<a href="#subscribe_trade_ticksself-subscribetradeticks-command--void" class="hash-link" aria-label="Direct link to subscribe_trade_ticks(self, SubscribeTradeTicks command) → void" title="Direct link to subscribe_trade_ticks(self, SubscribeTradeTicks command) → void">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribed_barsself--list">subscribed_bars(self) → list<a href="#subscribed_barsself--list" class="hash-link" aria-label="Direct link to subscribed_bars(self) → list" title="Direct link to subscribed_bars(self) → list">​</a></h4>
<p>Return the bar types subscribed to.</p>
<ul>
<li><strong>Return type:</strong>
list[<a href="../model/data/index.htm#posei_trader.model.data.BarType">BarType</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribed_custom_dataself--list-1">subscribed_custom_data(self) → list<a href="#subscribed_custom_dataself--list-1" class="hash-link" aria-label="Direct link to subscribed_custom_data(self) → list" title="Direct link to subscribed_custom_data(self) → list">​</a></h4>
<p>Return the custom data types subscribed to.</p>
<ul>
<li><strong>Return type:</strong>
list[<a href="../model/data/index.htm#posei_trader.model.data.DataType">DataType</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribed_index_pricesself--list">subscribed_index_prices(self) → list<a href="#subscribed_index_pricesself--list" class="hash-link" aria-label="Direct link to subscribed_index_prices(self) → list" title="Direct link to subscribed_index_prices(self) → list">​</a></h4>
<p>Return the index price update instruments subscribed to.</p>
<ul>
<li><strong>Return type:</strong>
list[<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.InstrumentId">InstrumentId</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribed_instrument_closeself--list">subscribed_instrument_close(self) → list<a href="#subscribed_instrument_closeself--list" class="hash-link" aria-label="Direct link to subscribed_instrument_close(self) → list" title="Direct link to subscribed_instrument_close(self) → list">​</a></h4>
<p>Return the instrument closes subscribed to.</p>
<ul>
<li><strong>Return type:</strong>
list[<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.InstrumentId">InstrumentId</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribed_instrument_statusself--list">subscribed_instrument_status(self) → list<a href="#subscribed_instrument_statusself--list" class="hash-link" aria-label="Direct link to subscribed_instrument_status(self) → list" title="Direct link to subscribed_instrument_status(self) → list">​</a></h4>
<p>Return the status update instruments subscribed to.</p>
<ul>
<li><strong>Return type:</strong>
list[<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.InstrumentId">InstrumentId</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribed_instrumentsself--list">subscribed_instruments(self) → list<a href="#subscribed_instrumentsself--list" class="hash-link" aria-label="Direct link to subscribed_instruments(self) → list" title="Direct link to subscribed_instruments(self) → list">​</a></h4>
<p>Return the instruments subscribed to.</p>
<ul>
<li><strong>Return type:</strong>
list[<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.InstrumentId">InstrumentId</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribed_mark_pricesself--list">subscribed_mark_prices(self) → list<a href="#subscribed_mark_pricesself--list" class="hash-link" aria-label="Direct link to subscribed_mark_prices(self) → list" title="Direct link to subscribed_mark_prices(self) → list">​</a></h4>
<p>Return the mark price update instruments subscribed to.</p>
<ul>
<li><strong>Return type:</strong>
list[<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.InstrumentId">InstrumentId</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribed_order_book_deltasself--list">subscribed_order_book_deltas(self) → list<a href="#subscribed_order_book_deltasself--list" class="hash-link" aria-label="Direct link to subscribed_order_book_deltas(self) → list" title="Direct link to subscribed_order_book_deltas(self) → list">​</a></h4>
<p>Return the order book delta instruments subscribed to.</p>
<ul>
<li><strong>Return type:</strong>
list[<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.InstrumentId">InstrumentId</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribed_order_book_snapshotsself--list">subscribed_order_book_snapshots(self) → list<a href="#subscribed_order_book_snapshotsself--list" class="hash-link" aria-label="Direct link to subscribed_order_book_snapshots(self) → list" title="Direct link to subscribed_order_book_snapshots(self) → list">​</a></h4>
<p>Return the order book snapshot instruments subscribed to.</p>
<ul>
<li><strong>Return type:</strong>
list[<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.InstrumentId">InstrumentId</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribed_quote_ticksself--list">subscribed_quote_ticks(self) → list<a href="#subscribed_quote_ticksself--list" class="hash-link" aria-label="Direct link to subscribed_quote_ticks(self) → list" title="Direct link to subscribed_quote_ticks(self) → list">​</a></h4>
<p>Return the quote tick instruments subscribed to.</p>
<ul>
<li><strong>Return type:</strong>
list[<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.InstrumentId">InstrumentId</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribed_trade_ticksself--list">subscribed_trade_ticks(self) → list<a href="#subscribed_trade_ticksself--list" class="hash-link" aria-label="Direct link to subscribed_trade_ticks(self) → list" title="Direct link to subscribed_trade_ticks(self) → list">​</a></h4>
<p>Return the trade tick instruments subscribed to.</p>
<ul>
<li><strong>Return type:</strong>
list[<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.InstrumentId">InstrumentId</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="trader_id-1">trader_id<a href="#trader_id-1" class="hash-link" aria-label="Direct link to trader_id" title="Direct link to trader_id">​</a></h4>
<p>The trader ID associated with the component.</p>
<ul>
<li><strong>Returns:</strong>
TraderId</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="type-1">type<a href="#type-1" class="hash-link" aria-label="Direct link to type" title="Direct link to type">​</a></h4>
<p>The components type.</p>
<ul>
<li><strong>Returns:</strong>
type</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribeself-unsubscribedata-command--void-1">unsubscribe(self, UnsubscribeData command) → void<a href="#unsubscribeself-unsubscribedata-command--void-1" class="hash-link" aria-label="Direct link to unsubscribe(self, UnsubscribeData command) → void" title="Direct link to unsubscribe(self, UnsubscribeData command) → void">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_barsself-unsubscribebars-command--void">unsubscribe_bars(self, UnsubscribeBars command) → void<a href="#unsubscribe_barsself-unsubscribebars-command--void" class="hash-link" aria-label="Direct link to unsubscribe_bars(self, UnsubscribeBars command) → void" title="Direct link to unsubscribe_bars(self, UnsubscribeBars command) → void">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_index_pricesself-unsubscribeindexprices-command--void">unsubscribe_index_prices(self, UnsubscribeIndexPrices command) → void<a href="#unsubscribe_index_pricesself-unsubscribeindexprices-command--void" class="hash-link" aria-label="Direct link to unsubscribe_index_prices(self, UnsubscribeIndexPrices command) → void" title="Direct link to unsubscribe_index_prices(self, UnsubscribeIndexPrices command) → void">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_instrumentself-unsubscribeinstrument-command--void">unsubscribe_instrument(self, UnsubscribeInstrument command) → void<a href="#unsubscribe_instrumentself-unsubscribeinstrument-command--void" class="hash-link" aria-label="Direct link to unsubscribe_instrument(self, UnsubscribeInstrument command) → void" title="Direct link to unsubscribe_instrument(self, UnsubscribeInstrument command) → void">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_instrument_closeself-unsubscribeinstrumentclose-command--void">unsubscribe_instrument_close(self, UnsubscribeInstrumentClose command) → void<a href="#unsubscribe_instrument_closeself-unsubscribeinstrumentclose-command--void" class="hash-link" aria-label="Direct link to unsubscribe_instrument_close(self, UnsubscribeInstrumentClose command) → void" title="Direct link to unsubscribe_instrument_close(self, UnsubscribeInstrumentClose command) → void">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_instrument_statusself-unsubscribeinstrumentstatus-command--void">unsubscribe_instrument_status(self, UnsubscribeInstrumentStatus command) → void<a href="#unsubscribe_instrument_statusself-unsubscribeinstrumentstatus-command--void" class="hash-link" aria-label="Direct link to unsubscribe_instrument_status(self, UnsubscribeInstrumentStatus command) → void" title="Direct link to unsubscribe_instrument_status(self, UnsubscribeInstrumentStatus command) → void">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_instrumentsself-unsubscribeinstruments-command--void">unsubscribe_instruments(self, UnsubscribeInstruments command) → void<a href="#unsubscribe_instrumentsself-unsubscribeinstruments-command--void" class="hash-link" aria-label="Direct link to unsubscribe_instruments(self, UnsubscribeInstruments command) → void" title="Direct link to unsubscribe_instruments(self, UnsubscribeInstruments command) → void">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_mark_pricesself-unsubscribemarkprices-command--void">unsubscribe_mark_prices(self, UnsubscribeMarkPrices command) → void<a href="#unsubscribe_mark_pricesself-unsubscribemarkprices-command--void" class="hash-link" aria-label="Direct link to unsubscribe_mark_prices(self, UnsubscribeMarkPrices command) → void" title="Direct link to unsubscribe_mark_prices(self, UnsubscribeMarkPrices command) → void">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_order_book_deltasself-unsubscribeorderbook-command--void">unsubscribe_order_book_deltas(self, UnsubscribeOrderBook command) → void<a href="#unsubscribe_order_book_deltasself-unsubscribeorderbook-command--void" class="hash-link" aria-label="Direct link to unsubscribe_order_book_deltas(self, UnsubscribeOrderBook command) → void" title="Direct link to unsubscribe_order_book_deltas(self, UnsubscribeOrderBook command) → void">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_order_book_snapshotsself-unsubscribeorderbook-command--void">unsubscribe_order_book_snapshots(self, UnsubscribeOrderBook command) → void<a href="#unsubscribe_order_book_snapshotsself-unsubscribeorderbook-command--void" class="hash-link" aria-label="Direct link to unsubscribe_order_book_snapshots(self, UnsubscribeOrderBook command) → void" title="Direct link to unsubscribe_order_book_snapshots(self, UnsubscribeOrderBook command) → void">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_quote_ticksself-unsubscribequoteticks-command--void">unsubscribe_quote_ticks(self, UnsubscribeQuoteTicks command) → void<a href="#unsubscribe_quote_ticksself-unsubscribequoteticks-command--void" class="hash-link" aria-label="Direct link to unsubscribe_quote_ticks(self, UnsubscribeQuoteTicks command) → void" title="Direct link to unsubscribe_quote_ticks(self, UnsubscribeQuoteTicks command) → void">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_trade_ticksself-unsubscribetradeticks-command--void">unsubscribe_trade_ticks(self, UnsubscribeTradeTicks command) → void<a href="#unsubscribe_trade_ticksself-unsubscribetradeticks-command--void" class="hash-link" aria-label="Direct link to unsubscribe_trade_ticks(self, UnsubscribeTradeTicks command) → void" title="Direct link to unsubscribe_trade_ticks(self, UnsubscribeTradeTicks command) → void">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="venue-1">venue<a href="#venue-1" class="hash-link" aria-label="Direct link to venue" title="Direct link to venue">​</a></h4>
<p>The clients venue ID (if applicable).</p>
<ul>
<li><strong>Returns:</strong>
Venue or <code>None</code></li>
</ul>
<p><a id="module-posei_trader.backtest.engine"></a></p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="class-backtestdataiterator"><em>class</em> BacktestDataIterator<a href="#class-backtestdataiterator" class="hash-link" aria-label="Direct link to class-backtestdataiterator" title="Direct link to class-backtestdataiterator">​</a></h3>
<p>Bases: <code>object</code></p>
<p>BacktestDataIterator(empty_data_callback: Callable[[str, uint64_t], None] | None = None) -&gt; None</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="add_dataself-str-data_name-list-data_list-bool-append_datatrue--void">add_data(self, str data_name, list data_list, bool append_data=True) → void<a href="#add_dataself-str-data_name-list-data_list-bool-append_datatrue--void" class="hash-link" aria-label="Direct link to add_data(self, str data_name, list data_list, bool append_data=True) → void" title="Direct link to add_data(self, str data_name, list data_list, bool append_data=True) → void">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="all_dataself--dict">all_data(self) → dict<a href="#all_dataself--dict" class="hash-link" aria-label="Direct link to all_data(self) → dict" title="Direct link to all_data(self) → dict">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="dataself-str-data_name--list">data(self, str data_name) → list<a href="#dataself-str-data_name--list" class="hash-link" aria-label="Direct link to data(self, str data_name) → list" title="Direct link to data(self, str data_name) → list">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_doneself--bool">is_done(self) → bool<a href="#is_doneself--bool" class="hash-link" aria-label="Direct link to is_done(self) → bool" title="Direct link to is_done(self) → bool">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="nextself--data">next(self) → <a href="../core/index.htm#posei_trader.core.Data">Data</a><a href="#nextself--data" class="hash-link" aria-label="Direct link to nextself--data" title="Direct link to nextself--data">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="remove_dataself-str-data_name--void">remove_data(self, str data_name) → void<a href="#remove_dataself-str-data_name--void" class="hash-link" aria-label="Direct link to remove_data(self, str data_name) → void" title="Direct link to remove_data(self, str data_name) → void">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="resetself--void-2">reset(self) → void<a href="#resetself--void-2" class="hash-link" aria-label="Direct link to reset(self) → void" title="Direct link to reset(self) → void">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="set_indexself-str-data_name-int-index--void">set_index(self, str data_name, int index) → void<a href="#set_indexself-str-data_name-int-index--void" class="hash-link" aria-label="Direct link to set_index(self, str data_name, int index) → void" title="Direct link to set_index(self, str data_name, int index) → void">​</a></h4>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="class-backtestengine"><em>class</em> BacktestEngine<a href="#class-backtestengine" class="hash-link" aria-label="Direct link to class-backtestengine" title="Direct link to class-backtestengine">​</a></h3>
<p>Bases: <code>object</code></p>
<p>BacktestEngine(config: BacktestEngineConfig | None = None) -&gt; None</p>
<p>Provides a backtest engine to run a portfolio of strategies over historical
data.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>config</strong> (<a href="../config/index.htm#posei_trader.backtest.config.BacktestEngineConfig"><em>BacktestEngineConfig</em></a> <em>,</em> <em>optional</em>) – The configuration for the instance.</li>
<li><strong>Raises:</strong>
<strong>TypeError</strong> – If config is not of type BacktestEngineConfig.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="add_actorself-actor-actor-actor--none">add_actor(self, Actor actor: Actor) → None<a href="#add_actorself-actor-actor-actor--none" class="hash-link" aria-label="Direct link to add_actor(self, Actor actor: Actor) → None" title="Direct link to add_actor(self, Actor actor: Actor) → None">​</a></h4>
<p>Add the given actor to the backtest engine.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>actor</strong> (<a href="../common/index.htm#posei_trader.common.actor.Actor"><em>Actor</em></a>) – The actor to add.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="add_actorsself-list-actors-listactor--none">add_actors(self, list actors: list[Actor]) → None<a href="#add_actorsself-list-actors-listactor--none" class="hash-link" aria-label="Direct link to add_actors(self, list actors: list[Actor]) → None" title="Direct link to add_actors(self, list actors: list[Actor]) → None">​</a></h4>
<p>Add the given list of actors to the backtest engine.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>actors</strong> (<em>list</em> <em>[</em><a href="../common/index.htm#posei_trader.common.actor.Actor"><em>Actor</em></a> <em>]</em>) – The actors to add.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="add_dataself-list-data-clientid-client_idnone-bool-validatetrue-bool-sorttrue--none">add_data(self, list data, ClientId client_id=None, bool validate=True, bool sort=True) → None<a href="#add_dataself-list-data-clientid-client_idnone-bool-validatetrue-bool-sorttrue--none" class="hash-link" aria-label="Direct link to add_data(self, list data, ClientId client_id=None, bool validate=True, bool sort=True) → None" title="Direct link to add_data(self, list data, ClientId client_id=None, bool validate=True, bool sort=True) → None">​</a></h4>
<p>Add the given data to the backtest engine.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>data</strong> (<em>list</em> <em>[</em><a href="../core/index.htm#posei_trader.core.Data"><em>Data</em></a> <em>]</em>) – The data to add.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The client ID to associate with the data.</li>
<li><strong>validate</strong> (<em>bool</em> <em>,</em> <em>default True</em>) – If data should be validated
(recommended when adding data directly to the engine).</li>
<li><strong>sort</strong> (<em>bool</em> <em>,</em> <em>default True</em>) – If data should be sorted by ts_init with the rest of the stream after adding
(recommended when adding data directly to the engine).</li>
</ul>
</li>
<li><strong>Raises:</strong>
<ul>
<li><strong>ValueError</strong> – If data is empty.</li>
<li><strong>ValueError</strong> – If data contains objects which are not a type of Data.</li>
<li><strong>ValueError</strong> – If instrument_id for the data is not found in the cache.</li>
<li><strong>ValueError</strong> – If data elements do not have an instrument_id and client_id is <code>None</code>.</li>
<li><strong>TypeError</strong> – If data is a Rust PyO3 data type (cannot add directly to engine yet).</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-14">WARNING<a href="#warning-14" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Assumes all data elements are of the same type. Adding lists of varying
data types could result in incorrect backtest logic.</p>
<p>Caution if adding data without sort being True, as this could lead to running backtests
on a stream which does not have monotonically increasing timestamps.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="add_exec_algorithmself-execalgorithm-exec_algorithm-execalgorithm--none">add_exec_algorithm(self, ExecAlgorithm exec_algorithm: ExecAlgorithm) → None<a href="#add_exec_algorithmself-execalgorithm-exec_algorithm-execalgorithm--none" class="hash-link" aria-label="Direct link to add_exec_algorithm(self, ExecAlgorithm exec_algorithm: ExecAlgorithm) → None" title="Direct link to add_exec_algorithm(self, ExecAlgorithm exec_algorithm: ExecAlgorithm) → None">​</a></h4>
<p>Add the given execution algorithm to the backtest engine.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>exec_algorithm</strong> (<a href="../execution/index.htm#posei_trader.execution.algorithm.ExecAlgorithm"><em>ExecAlgorithm</em></a>) – The execution algorithm to add.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="add_exec_algorithmsself-list-exec_algorithms-listexecalgorithm--none">add_exec_algorithms(self, list exec_algorithms: list[ExecAlgorithm]) → None<a href="#add_exec_algorithmsself-list-exec_algorithms-listexecalgorithm--none" class="hash-link" aria-label="Direct link to add_exec_algorithms(self, list exec_algorithms: list[ExecAlgorithm]) → None" title="Direct link to add_exec_algorithms(self, list exec_algorithms: list[ExecAlgorithm]) → None">​</a></h4>
<p>Add the given list of execution algorithms to the backtest engine.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>exec_algorithms</strong> (<em>list</em> <em>[</em><a href="../execution/index.htm#posei_trader.execution.algorithm.ExecAlgorithm"><em>ExecAlgorithm</em></a> <em>]</em>) – The execution algorithms to add.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="add_instrumentself-instrument-instrument--none">add_instrument(self, Instrument instrument) → None<a href="#add_instrumentself-instrument-instrument--none" class="hash-link" aria-label="Direct link to add_instrument(self, Instrument instrument) → None" title="Direct link to add_instrument(self, Instrument instrument) → None">​</a></h4>
<p>Add the instrument to the backtest engine.</p>
<p>The instrument must be valid for its associated venue. For instance,
derivative instruments which would trade on margin cannot be added to
a venue with a <code>CASH</code> account.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>instrument</strong> (<a href="../model/instruments/index.htm#posei_trader.model.instruments.Instrument"><em>Instrument</em></a>) – The instrument to add.</li>
<li><strong>Raises:</strong>
<ul>
<li><a href="../config/index.htm#posei_trader.common.config.InvalidConfiguration"><strong>InvalidConfiguration</strong></a> – If the venue for the instrument has not been added to the engine.</li>
<li><a href="../config/index.htm#posei_trader.common.config.InvalidConfiguration"><strong>InvalidConfiguration</strong></a> – If instrument is not valid for its associated venue.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="add_strategiesself-list-strategies-liststrategy--none">add_strategies(self, list strategies: list[Strategy]) → None<a href="#add_strategiesself-list-strategies-liststrategy--none" class="hash-link" aria-label="Direct link to add_strategies(self, list strategies: list[Strategy]) → None" title="Direct link to add_strategies(self, list strategies: list[Strategy]) → None">​</a></h4>
<p>Add the given list of strategies to the backtest engine.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>strategies</strong> (<em>list</em> <em>[</em><a href="../trading/index.htm#posei_trader.trading.Strategy"><em>Strategy</em></a> <em>]</em>) – The strategies to add.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="add_strategyself-strategy-strategy-strategy--none">add_strategy(self, Strategy strategy: Strategy) → None<a href="#add_strategyself-strategy-strategy-strategy--none" class="hash-link" aria-label="Direct link to add_strategy(self, Strategy strategy: Strategy) → None" title="Direct link to add_strategy(self, Strategy strategy: Strategy) → None">​</a></h4>
<p>Add the given strategy to the backtest engine.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>strategy</strong> (<a href="../trading/index.htm#posei_trader.trading.Strategy"><em>Strategy</em></a>) – The strategy to add.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="add_venueself-venue-venue-venue-omstype-oms_type-omstype-accounttype-account_type-accounttype-list-starting_balances-listmoney-currency-base_currency-currency--none--none-default_leverage-decimal--none--none-dict-leverages-dictinstrumentid-decimal--none--none-list-modules-listsimulationmodule--none--none-fillmodel-fill_model-fillmodel--none--none-feemodel-fee_model-feemodel--none--none-latencymodel-latency_model-latencymodel--none--none-booktype-book_type-booktype--booktypel1_mbp-routing-bool--false-frozen_account-bool--false-reject_stop_orders-bool--true-support_gtd_orders-bool--true-support_contingent_orders-bool--true-use_position_ids-bool--true-use_random_ids-bool--false-use_reduce_only-bool--true-use_message_queue-bool--true-bar_execution-bool--true-bar_adaptive_high_low_ordering-bool--false-trade_execution-bool--false--none">add_venue(self, Venue venue: Venue, OmsType oms_type: OmsType, AccountType account_type: AccountType, list starting_balances: list[Money], Currency base_currency: Currency | None = None, default_leverage: Decimal | None = None, dict leverages: dict[InstrumentId, Decimal] | None = None, list modules: list[SimulationModule] | None = None, FillModel fill_model: FillModel | None = None, FeeModel fee_model: FeeModel | None = None, LatencyModel latency_model: LatencyModel | None = None, BookType book_type: BookType = BookType.L1_MBP, routing: bool = False, frozen_account: bool = False, reject_stop_orders: bool = True, support_gtd_orders: bool = True, support_contingent_orders: bool = True, use_position_ids: bool = True, use_random_ids: bool = False, use_reduce_only: bool = True, use_message_queue: bool = True, bar_execution: bool = True, bar_adaptive_high_low_ordering: bool = False, trade_execution: bool = False) → None<a href="#add_venueself-venue-venue-venue-omstype-oms_type-omstype-accounttype-account_type-accounttype-list-starting_balances-listmoney-currency-base_currency-currency--none--none-default_leverage-decimal--none--none-dict-leverages-dictinstrumentid-decimal--none--none-list-modules-listsimulationmodule--none--none-fillmodel-fill_model-fillmodel--none--none-feemodel-fee_model-feemodel--none--none-latencymodel-latency_model-latencymodel--none--none-booktype-book_type-booktype--booktypel1_mbp-routing-bool--false-frozen_account-bool--false-reject_stop_orders-bool--true-support_gtd_orders-bool--true-support_contingent_orders-bool--true-use_position_ids-bool--true-use_random_ids-bool--false-use_reduce_only-bool--true-use_message_queue-bool--true-bar_execution-bool--true-bar_adaptive_high_low_ordering-bool--false-trade_execution-bool--false--none" class="hash-link" aria-label="Direct link to add_venue(self, Venue venue: Venue, OmsType oms_type: OmsType, AccountType account_type: AccountType, list starting_balances: list[Money], Currency base_currency: Currency | None = None, default_leverage: Decimal | None = None, dict leverages: dict[InstrumentId, Decimal] | None = None, list modules: list[SimulationModule] | None = None, FillModel fill_model: FillModel | None = None, FeeModel fee_model: FeeModel | None = None, LatencyModel latency_model: LatencyModel | None = None, BookType book_type: BookType = BookType.L1_MBP, routing: bool = False, frozen_account: bool = False, reject_stop_orders: bool = True, support_gtd_orders: bool = True, support_contingent_orders: bool = True, use_position_ids: bool = True, use_random_ids: bool = False, use_reduce_only: bool = True, use_message_queue: bool = True, bar_execution: bool = True, bar_adaptive_high_low_ordering: bool = False, trade_execution: bool = False) → None" title="Direct link to add_venue(self, Venue venue: Venue, OmsType oms_type: OmsType, AccountType account_type: AccountType, list starting_balances: list[Money], Currency base_currency: Currency | None = None, default_leverage: Decimal | None = None, dict leverages: dict[InstrumentId, Decimal] | None = None, list modules: list[SimulationModule] | None = None, FillModel fill_model: FillModel | None = None, FeeModel fee_model: FeeModel | None = None, LatencyModel latency_model: LatencyModel | None = None, BookType book_type: BookType = BookType.L1_MBP, routing: bool = False, frozen_account: bool = False, reject_stop_orders: bool = True, support_gtd_orders: bool = True, support_contingent_orders: bool = True, use_position_ids: bool = True, use_random_ids: bool = False, use_reduce_only: bool = True, use_message_queue: bool = True, bar_execution: bool = True, bar_adaptive_high_low_ordering: bool = False, trade_execution: bool = False) → None">​</a></h4>
<p>Add a SimulatedExchange with the given parameters to the backtest engine.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>venue</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.Venue"><em>Venue</em></a>) – The venue ID.</li>
<li><strong>oms_type</strong> (OmsType {<code>HEDGING</code>, <code>NETTING</code>}) – The order management system type for the exchange. If <code>HEDGING</code> will
generate new position IDs.</li>
<li><strong>account_type</strong> (<em>AccountType</em>) – The account type for the exchange.</li>
<li><strong>starting_balances</strong> (<em>list</em> <em>[</em><a href="../model/index.htm#posei_trader.model.Money"><em>Money</em></a> <em>]</em>) – The starting account balances (specify one for a single asset account).</li>
<li><strong>base_currency</strong> (<a href="../model/index.htm#posei_trader.model.Currency"><em>Currency</em></a> <em>,</em> <em>optional</em>) – The account base currency for the client. Use <code>None</code> for multi-currency accounts.</li>
<li><strong>default_leverage</strong> (<em>Decimal</em> <em>,</em> <em>optional</em>) – The account default leverage (for margin accounts).</li>
<li><strong>leverages</strong> (<em>dict</em> <em>[</em><a href="../model/identifiers/index.htm#posei_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a> <em>,</em> <em>Decimal</em> <em>]</em> <em>,</em> <em>optional</em>) – The instrument specific leverage configuration (for margin accounts).</li>
<li><strong>modules</strong> (<em>list</em> <em>[</em><a href="#posei_trader.backtest.modules.SimulationModule"><em>SimulationModule</em></a> <em>]</em> <em>,</em> <em>optional</em>) – The simulation modules to load into the exchange.</li>
<li><strong>fill_model</strong> (<a href="#posei_trader.backtest.models.FillModel"><em>FillModel</em></a> <em>,</em> <em>optional</em>) – The fill model for the exchange.</li>
<li><strong>fee_model</strong> (<a href="#posei_trader.backtest.models.FeeModel"><em>FeeModel</em></a> <em>,</em> <em>optional</em>) – The fee model for the venue.</li>
<li><strong>latency_model</strong> (<a href="#posei_trader.backtest.models.LatencyModel"><em>LatencyModel</em></a> <em>,</em> <em>optional</em>) – The latency model for the exchange.</li>
<li><strong>book_type</strong> (BookType, default <code>BookType.L1_MBP</code>) – The default order book type.</li>
<li><strong>routing</strong> (<em>bool</em> <em>,</em> <em>default False</em>) – If multi-venue routing should be enabled for the execution client.</li>
<li><strong>frozen_account</strong> (<em>bool</em> <em>,</em> <em>default False</em>) – If the account for this exchange is frozen (balances will not change).</li>
<li><strong>reject_stop_orders</strong> (<em>bool</em> <em>,</em> <em>default True</em>) – If stop orders are rejected on submission if trigger price is in the market.</li>
<li><strong>support_gtd_orders</strong> (<em>bool</em> <em>,</em> <em>default True</em>) – If orders with GTD time in force will be supported by the venue.</li>
<li><strong>support_contingent_orders</strong> (<em>bool</em> <em>,</em> <em>default True</em>) – If contingent orders will be supported/respected by the venue.
If False, then it’s expected the strategy will be managing any contingent orders.</li>
<li><strong>use_position_ids</strong> (<em>bool</em> <em>,</em> <em>default True</em>) – If venue position IDs will be generated on order fills.</li>
<li><strong>use_random_ids</strong> (<em>bool</em> <em>,</em> <em>default False</em>) – If all venue generated identifiers will be random UUID4’s.</li>
<li><strong>use_reduce_only</strong> (<em>bool</em> <em>,</em> <em>default True</em>) – If the reduce_only execution instruction on orders will be honored.</li>
<li><strong>use_message_queue</strong> (<em>bool</em> <em>,</em> <em>default True</em>) – If an internal message queue should be used to process trading commands in sequence after
they have initially arrived. Setting this to False would be appropriate for real-time
sandbox environments, where we don’t want to introduce additional latency of waiting for
the next data event before processing the trading command.</li>
<li><strong>bar_execution</strong> (<em>bool</em> <em>,</em> <em>default True</em>) – If bars should be processed by the matching engine(s) (and move the market).</li>
<li><strong>bar_adaptive_high_low_ordering</strong> (<em>bool</em> <em>,</em> <em>default False</em>) – Determines whether the processing order of bar prices is adaptive based on a heuristic.
This setting is only relevant when bar_execution is True.
If False, bar prices are always processed in the fixed order: Open, High, Low, Close.
If True, the processing order adapts with the heuristic:
<ul>
<li>If High is closer to Open than Low then the processing order is Open, High, Low, Close.</li>
<li>If Low is closer to Open than High then the processing order is Open, Low, High, Close.</li>
</ul>
</li>
<li><strong>trade_execution</strong> (<em>bool</em> <em>,</em> <em>default False</em>) – If trades should be processed by the matching engine(s) (and move the market).</li>
</ul>
</li>
<li><strong>Raises:</strong>
<strong>ValueError</strong> – If venue is already registered with the engine.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="backtest_end">backtest_end<a href="#backtest_end" class="hash-link" aria-label="Direct link to backtest_end" title="Direct link to backtest_end">​</a></h4>
<p>pd.Timestamp | None</p>
<p>Return the last backtest run time range end (if run).</p>
<ul>
<li><strong>Return type:</strong>
pd.Timestamp or <code>None</code></li>
<li><strong>Type:</strong>
BacktestEngine.backtest_end</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="backtest_start">backtest_start<a href="#backtest_start" class="hash-link" aria-label="Direct link to backtest_start" title="Direct link to backtest_start">​</a></h4>
<p>pd.Timestamp | None</p>
<p>Return the last backtest run time range start (if run).</p>
<ul>
<li><strong>Return type:</strong>
pd.Timestamp or <code>None</code></li>
<li><strong>Type:</strong>
BacktestEngine.backtest_start</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="cache">cache<a href="#cache" class="hash-link" aria-label="Direct link to cache" title="Direct link to cache">​</a></h4>
<p>CacheFacade</p>
<p>Return the engines internal read-only cache.</p>
<ul>
<li><strong>Return type:</strong>
<a href="../cache/index.htm#posei_trader.cache.base.CacheFacade">CacheFacade</a></li>
<li><strong>Type:</strong>
BacktestEngine.cache</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="change_fill_modelself-venue-venue-fillmodel-model--none">change_fill_model(self, Venue venue, FillModel model) → None<a href="#change_fill_modelself-venue-venue-fillmodel-model--none" class="hash-link" aria-label="Direct link to change_fill_model(self, Venue venue, FillModel model) → None" title="Direct link to change_fill_model(self, Venue venue, FillModel model) → None">​</a></h4>
<p>Change the fill model for the exchange of the given venue.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>venue</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.Venue"><em>Venue</em></a>) – The venue of the simulated exchange.</li>
<li><strong>model</strong> (<a href="#posei_trader.backtest.models.FillModel"><em>FillModel</em></a>) – The fill model to change to.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="clear_actorsself--none">clear_actors(self) → None<a href="#clear_actorsself--none" class="hash-link" aria-label="Direct link to clear_actors(self) → None" title="Direct link to clear_actors(self) → None">​</a></h4>
<p>Clear all actors from the engines internal trader.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="clear_dataself--none">clear_data(self) → None<a href="#clear_dataself--none" class="hash-link" aria-label="Direct link to clear_data(self) → None" title="Direct link to clear_data(self) → None">​</a></h4>
<p>Clear the engines internal data stream.</p>
<p>Does not clear added instruments.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="clear_exec_algorithmsself--none">clear_exec_algorithms(self) → None<a href="#clear_exec_algorithmsself--none" class="hash-link" aria-label="Direct link to clear_exec_algorithms(self) → None" title="Direct link to clear_exec_algorithms(self) → None">​</a></h4>
<p>Clear all execution algorithms from the engines internal trader.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="clear_strategiesself--none">clear_strategies(self) → None<a href="#clear_strategiesself--none" class="hash-link" aria-label="Direct link to clear_strategies(self) → None" title="Direct link to clear_strategies(self) → None">​</a></h4>
<p>Clear all trading strategies from the engines internal trader.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="data">data<a href="#data" class="hash-link" aria-label="Direct link to data" title="Direct link to data">​</a></h4>
<p>list[Data]</p>
<p>Return the engines internal data stream.</p>
<ul>
<li><strong>Return type:</strong>
list[<a href="../core/index.htm#posei_trader.core.Data">Data</a>]</li>
<li><strong>Type:</strong>
BacktestEngine.data</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="disposeself--none">dispose(self) → None<a href="#disposeself--none" class="hash-link" aria-label="Direct link to dispose(self) → None" title="Direct link to dispose(self) → None">​</a></h4>
<p>Dispose of the backtest engine by disposing the trader and releasing system resources.</p>
<p>Calling this method multiple times has the same effect as calling it once (it is idempotent).
Once called, it cannot be reversed, and no other methods should be called on this instance.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="dump_pickled_dataself--bytes">dump_pickled_data(self) → bytes<a href="#dump_pickled_dataself--bytes" class="hash-link" aria-label="Direct link to dump_pickled_data(self) → bytes" title="Direct link to dump_pickled_data(self) → bytes">​</a></h4>
<p>Return the internal data stream pickled.</p>
<ul>
<li><strong>Return type:</strong>
bytes</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="endself">end(self)<a href="#endself" class="hash-link" aria-label="Direct link to end(self)" title="Direct link to end(self)">​</a></h4>
<p>Manually end the backtest.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="get_log_guardself--nautilus_pyo3logguard--logguard--none">get_log_guard(self) → nautilus_pyo3.LogGuard | <a href="../common/index.htm#posei_trader.common.component.LogGuard">LogGuard</a> | None<a href="#get_log_guardself--nautilus_pyo3logguard--logguard--none" class="hash-link" aria-label="Direct link to get_log_guardself--nautilus_pyo3logguard--logguard--none" title="Direct link to get_log_guardself--nautilus_pyo3logguard--logguard--none">​</a></h4>
<p>Return the global logging subsystems log guard.</p>
<p>May return <code>None</code> if the logging subsystem was already initialized.</p>
<ul>
<li><strong>Return type:</strong>
nautilus_pyo3.LogGuard | <a href="../common/index.htm#posei_trader.common.component.LogGuard">LogGuard</a> | None</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="get_resultself">get_result(self)<a href="#get_resultself" class="hash-link" aria-label="Direct link to get_result(self)" title="Direct link to get_result(self)">​</a></h4>
<p>Return the backtest result from the last run.</p>
<ul>
<li><strong>Return type:</strong>
<a href="#posei_trader.backtest.results.BacktestResult">BacktestResult</a></li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="instance_id">instance_id<a href="#instance_id" class="hash-link" aria-label="Direct link to instance_id" title="Direct link to instance_id">​</a></h4>
<p>UUID4</p>
<p>Return the engines instance ID.</p>
<p>This is a unique identifier per initialized engine.</p>
<ul>
<li><strong>Return type:</strong>
<a href="../core/index.htm#posei_trader.core.UUID4">UUID4</a></li>
<li><strong>Type:</strong>
BacktestEngine.instance_id</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="iteration">iteration<a href="#iteration" class="hash-link" aria-label="Direct link to iteration" title="Direct link to iteration">​</a></h4>
<p>int</p>
<p>Return the backtest engine iteration count.</p>
<ul>
<li><strong>Return type:</strong>
int</li>
<li><strong>Type:</strong>
BacktestEngine.iteration</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="kernel">kernel<a href="#kernel" class="hash-link" aria-label="Direct link to kernel" title="Direct link to kernel">​</a></h4>
<p>PoseiKernel</p>
<p>Return the internal kernel for the engine.</p>
<ul>
<li><strong>Return type:</strong>
<a href="../system/index.htm#posei_trader.system.kernel.PoseiKernel">PoseiKernel</a></li>
<li><strong>Type:</strong>
BacktestEngine.kernel</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="list_venuesself--listvenue">list_venues(self) → list[<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.Venue">Venue</a>]<a href="#list_venuesself--listvenue" class="hash-link" aria-label="Direct link to list_venuesself--listvenue" title="Direct link to list_venuesself--listvenue">​</a></h4>
<p>Return the venues contained within the engine.</p>
<ul>
<li><strong>Return type:</strong>
list[<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.Venue">Venue</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="load_pickled_dataself-bytes-data--none">load_pickled_data(self, bytes data) → None<a href="#load_pickled_dataself-bytes-data--none" class="hash-link" aria-label="Direct link to load_pickled_data(self, bytes data) → None" title="Direct link to load_pickled_data(self, bytes data) → None">​</a></h4>
<p>Load the given pickled data directly into the internal data stream.</p>
<p>It is highly advised to only pass data to this method which was obtained
through a call to .dump_pickled_data().</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-15">WARNING<a href="#warning-15" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>This low-level direct access method makes the following assumptions:
: - The data contains valid Posei objects only, which inherit from Data.</p>
<ul>
<li>The data was successfully pickled from a call to pickle.dumps().</li>
<li>The data was sorted prior to pickling.</li>
<li>All required instruments have been added to the engine.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="logger">logger<a href="#logger" class="hash-link" aria-label="Direct link to logger" title="Direct link to logger">​</a></h4>
<p>Logger</p>
<p>Return the internal logger for the engine.</p>
<ul>
<li><strong>Return type:</strong>
<a href="../common/index.htm#posei_trader.common.component.Logger">Logger</a></li>
<li><strong>Type:</strong>
BacktestEngine.logger</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="machine_id">machine_id<a href="#machine_id" class="hash-link" aria-label="Direct link to machine_id" title="Direct link to machine_id">​</a></h4>
<p>str</p>
<p>Return the engines machine ID.</p>
<ul>
<li><strong>Return type:</strong>
str</li>
<li><strong>Type:</strong>
BacktestEngine.machine_id</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="portfolio">portfolio<a href="#portfolio" class="hash-link" aria-label="Direct link to portfolio" title="Direct link to portfolio">​</a></h4>
<p>PortfolioFacade</p>
<p>Return the engines internal read-only portfolio.</p>
<ul>
<li><strong>Return type:</strong>
<a href="../portfolio/index.htm#posei_trader.portfolio.PortfolioFacade">PortfolioFacade</a></li>
<li><strong>Type:</strong>
BacktestEngine.portfolio</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="resetself--none">reset(self) → None<a href="#resetself--none" class="hash-link" aria-label="Direct link to reset(self) → None" title="Direct link to reset(self) → None">​</a></h4>
<p>Reset the backtest engine.</p>
<p>All stateful fields are reset to their initial value.</p>
<p>Note: instruments and data are not dropped/reset, this can be done through a
separate call to .clear_data() if desired.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="runself-start-datetime--str--int--none--none-end-datetime--str--int--none--none-str-run_config_id-str--none--none-streaming-bool--false--none">run(self, start: datetime | str | int | None = None, end: datetime | str | int | None = None, str run_config_id: str | None = None, streaming: bool = False) → None<a href="#runself-start-datetime--str--int--none--none-end-datetime--str--int--none--none-str-run_config_id-str--none--none-streaming-bool--false--none" class="hash-link" aria-label="Direct link to run(self, start: datetime | str | int | None = None, end: datetime | str | int | None = None, str run_config_id: str | None = None, streaming: bool = False) → None" title="Direct link to run(self, start: datetime | str | int | None = None, end: datetime | str | int | None = None, str run_config_id: str | None = None, streaming: bool = False) → None">​</a></h4>
<p>Run a backtest.</p>
<p>At the end of the run the trader and strategies will be stopped, then
post-run analysis performed.</p>
<p>For datasets larger than available memory, use streaming mode with the
following sequence:</p>
<ul>
<li>
<ol>
<li>Add initial data batch and strategies</li>
</ol>
</li>
<li>
<ol start="2">
<li>Call run(streaming=True)</li>
</ol>
</li>
<li>
<ol start="3">
<li>Call clear_data()</li>
</ol>
</li>
<li>
<ol start="4">
<li>Add next batch of data stream</li>
</ol>
</li>
<li>
<ol start="5">
<li>Call run(streaming=False) or end() when processing the final batch</li>
</ol>
</li>
</ul>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li>
<p><strong>start</strong> (<em>datetime</em> <em>or</em> <em>str</em> <em>or</em> <em>int</em> <em>,</em> <em>optional</em>) – The start datetime (UTC) for the backtest run.
If <code>None</code> engine runs from the start of the data.</p>
</li>
<li>
<p><strong>end</strong> (<em>datetime</em> <em>or</em> <em>str</em> <em>or</em> <em>int</em> <em>,</em> <em>optional</em>) – The end datetime (UTC) for the backtest run.
If <code>None</code> engine runs to the end of the data.</p>
</li>
<li>
<p><strong>run_config_id</strong> (<em>str</em> <em>,</em> <em>optional</em>) – The tokenized BacktestRunConfig ID.</p>
</li>
<li>
<p><strong>streaming</strong> (<em>bool</em> <em>,</em> <em>default False</em>) –</p>
<p>Controls data loading and processing mode:</p>
<ul>
<li>If False (default): Loads all data at once.</li>
</ul>
<blockquote>
<p>This is currently the only supported mode for custom data (e.g., option Greeks).</p>
</blockquote>
<ul>
<li>If True, loads data in chunks for memory-efficient processing of large datasets.</li>
</ul>
</li>
</ul>
</li>
<li><strong>Raises:</strong>
<ul>
<li><strong>ValueError</strong> – If no data has been added to the engine.</li>
<li><strong>ValueError</strong> – If the start is &gt;= the end datetime.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="run_config_id">run_config_id<a href="#run_config_id" class="hash-link" aria-label="Direct link to run_config_id" title="Direct link to run_config_id">​</a></h4>
<p>str</p>
<p>Return the last backtest engine run config ID.</p>
<ul>
<li><strong>Return type:</strong>
str or <code>None</code></li>
<li><strong>Type:</strong>
BacktestEngine.run_config_id</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="run_finished">run_finished<a href="#run_finished" class="hash-link" aria-label="Direct link to run_finished" title="Direct link to run_finished">​</a></h4>
<p>pd.Timestamp | None</p>
<p>Return when the last backtest run finished (if run).</p>
<ul>
<li><strong>Return type:</strong>
pd.Timestamp or <code>None</code></li>
<li><strong>Type:</strong>
BacktestEngine.run_finished</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="run_id">run_id<a href="#run_id" class="hash-link" aria-label="Direct link to run_id" title="Direct link to run_id">​</a></h4>
<p>UUID4</p>
<p>Return the last backtest engine run ID (if run).</p>
<ul>
<li><strong>Return type:</strong>
UUID4 or <code>None</code></li>
<li><strong>Type:</strong>
BacktestEngine.run_id</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="run_started">run_started<a href="#run_started" class="hash-link" aria-label="Direct link to run_started" title="Direct link to run_started">​</a></h4>
<p>pd.Timestamp | None</p>
<p>Return when the last backtest run started (if run).</p>
<ul>
<li><strong>Return type:</strong>
pd.Timestamp or <code>None</code></li>
<li><strong>Type:</strong>
BacktestEngine.run_started</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="set_default_market_data_clientself--none">set_default_market_data_client(self) → None<a href="#set_default_market_data_clientself--none" class="hash-link" aria-label="Direct link to set_default_market_data_client(self) → None" title="Direct link to set_default_market_data_client(self) → None">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="trader">trader<a href="#trader" class="hash-link" aria-label="Direct link to trader" title="Direct link to trader">​</a></h4>
<p>Trader</p>
<p>Return the engines internal trader.</p>
<ul>
<li><strong>Return type:</strong>
<a href="../trading/index.htm#posei_trader.trading.Trader">Trader</a></li>
<li><strong>Type:</strong>
BacktestEngine.trader</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="trader_id-2">trader_id<a href="#trader_id-2" class="hash-link" aria-label="Direct link to trader_id" title="Direct link to trader_id">​</a></h4>
<p>TraderId</p>
<p>Return the engines trader ID.</p>
<ul>
<li><strong>Return type:</strong>
<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.TraderId">TraderId</a></li>
<li><strong>Type:</strong>
BacktestEngine.trader_id</li>
</ul>
<p><a id="module-posei_trader.backtest.exchange"></a></p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="class-simulatedexchange"><em>class</em> SimulatedExchange<a href="#class-simulatedexchange" class="hash-link" aria-label="Direct link to class-simulatedexchange" title="Direct link to class-simulatedexchange">​</a></h3>
<p>Bases: <code>object</code></p>
<p>SimulatedExchange(Venue venue, OmsType oms_type, AccountType account_type, list starting_balances, Currency base_currency: Currency | None, default_leverage: Decimal, dict leverages: dict[InstrumentId, Decimal], list modules, PortfolioFacade portfolio, MessageBus msgbus, CacheFacade cache, TestClock clock, FillModel fill_model, FeeModel fee_model, LatencyModel latency_model=None, BookType book_type=BookType.L1_MBP, bool frozen_account=False, bool reject_stop_orders=True, bool support_gtd_orders=True, bool support_contingent_orders=True, bool use_position_ids=True, bool use_random_ids=False, bool use_reduce_only=True, bool use_message_queue=True, bool bar_execution=True, bool bar_adaptive_high_low_ordering=False, bool trade_execution=False) -&gt; None</p>
<p>Provides a simulated exchange venue.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>venue</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.Venue"><em>Venue</em></a>) – The venue to simulate.</li>
<li><strong>oms_type</strong> (OmsType {<code>HEDGING</code>, <code>NETTING</code>}) – The order management system type used by the exchange.</li>
<li><strong>account_type</strong> (<em>AccountType</em>) – The account type for the client.</li>
<li><strong>starting_balances</strong> (<em>list</em> <em>[</em><a href="../model/index.htm#posei_trader.model.Money"><em>Money</em></a> <em>]</em>) – The starting balances for the exchange.</li>
<li><strong>base_currency</strong> (<a href="../model/index.htm#posei_trader.model.Currency"><em>Currency</em></a> <em>,</em> <em>optional</em>) – The account base currency for the client. Use <code>None</code> for multi-currency accounts.</li>
<li><strong>default_leverage</strong> (<em>Decimal</em>) – The account default leverage (for margin accounts).</li>
<li><strong>leverages</strong> (<em>dict</em> <em>[</em><a href="../model/identifiers/index.htm#posei_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a> <em>,</em> <em>Decimal</em> <em>]</em>) – The instrument specific leverage configuration (for margin accounts).</li>
<li><strong>modules</strong> (<em>list</em> *[*<em>SimulatedModule</em> <em>]</em>) – The simulation modules for the exchange.</li>
<li><strong>portfolio</strong> (<a href="../portfolio/index.htm#posei_trader.portfolio.PortfolioFacade"><em>PortfolioFacade</em></a>) – The read-only portfolio for the exchange.</li>
<li><strong>msgbus</strong> (<a href="../common/index.htm#posei_trader.common.component.MessageBus"><em>MessageBus</em></a>) – The message bus for the exchange.</li>
<li><strong>cache</strong> (<a href="../cache/index.htm#posei_trader.cache.base.CacheFacade"><em>CacheFacade</em></a>) – The read-only cache for the exchange.</li>
<li><strong>clock</strong> (<a href="../common/index.htm#posei_trader.common.component.TestClock"><em>TestClock</em></a>) – The clock for the exchange.</li>
<li><strong>fill_model</strong> (<a href="#posei_trader.backtest.models.FillModel"><em>FillModel</em></a>) – The fill model for the exchange.</li>
<li><strong>fee_model</strong> (<a href="#posei_trader.backtest.models.FeeModel"><em>FeeModel</em></a>) – The fee model for the exchange.</li>
<li><strong>latency_model</strong> (<a href="#posei_trader.backtest.models.LatencyModel"><em>LatencyModel</em></a> <em>,</em> <em>optional</em>) – The latency model for the exchange.</li>
<li><strong>book_type</strong> (<em>BookType</em>) – The order book type for the exchange.</li>
<li><strong>frozen_account</strong> (<em>bool</em> <em>,</em> <em>default False</em>) – If the account for this exchange is frozen (balances will not change).</li>
<li><strong>reject_stop_orders</strong> (<em>bool</em> <em>,</em> <em>default True</em>) – If stop orders are rejected on submission if in the market.</li>
<li><strong>support_gtd_orders</strong> (<em>bool</em> <em>,</em> <em>default True</em>) – If orders with GTD time in force will be supported by the exchange.</li>
<li><strong>support_contingent_orders</strong> (<em>bool</em> <em>,</em> <em>default True</em>) – If contingent orders will be supported/respected by the exchange.
If False, then its expected the strategy will be managing any contingent orders.</li>
<li><strong>use_position_ids</strong> (<em>bool</em> <em>,</em> <em>default True</em>) – If venue position IDs will be generated on order fills.</li>
<li><strong>use_random_ids</strong> (<em>bool</em> <em>,</em> <em>default False</em>) – If all exchange generated identifiers will be random UUID4’s.</li>
<li><strong>use_reduce_only</strong> (<em>bool</em> <em>,</em> <em>default True</em>) – If the reduce_only execution instruction on orders will be honored.</li>
<li><strong>use_message_queue</strong> (<em>bool</em> <em>,</em> <em>default True</em>) – If an internal message queue should be used to process trading commands in sequence after
they have initially arrived. Setting this to False would be appropriate for real-time
sandbox environments, where we don’t want to introduce additional latency of waiting for
the next data event before processing the trading command.</li>
<li><strong>bar_execution</strong> (<em>bool</em> <em>,</em> <em>default True</em>) – If bars should be processed by the matching engine(s) (and move the market).</li>
<li><strong>bar_adaptive_high_low_ordering</strong> (<em>bool</em> <em>,</em> <em>default False</em>) – Determines whether the processing order of bar prices is adaptive based on a heuristic.
This setting is only relevant when bar_execution is True.
If False, bar prices are always processed in the fixed order: Open, High, Low, Close.
If True, the processing order adapts with the heuristic:
<ul>
<li>If High is closer to Open than Low then the processing order is Open, High, Low, Close.</li>
<li>If Low is closer to Open than High then the processing order is Open, Low, High, Close.</li>
</ul>
</li>
<li><strong>trade_execution</strong> (<em>bool</em> <em>,</em> <em>default False</em>) – If trades should be processed by the matching engine(s) (and move the market).</li>
</ul>
</li>
<li><strong>Raises:</strong>
<ul>
<li><strong>ValueError</strong> – If instruments is empty.</li>
<li><strong>ValueError</strong> – If instruments contains a type other than Instrument.</li>
<li><strong>ValueError</strong> – If starting_balances is empty.</li>
<li><strong>ValueError</strong> – If starting_balances contains a type other than Money.</li>
<li><strong>ValueError</strong> – If base_currency and multiple starting balances.</li>
<li><strong>ValueError</strong> – If modules contains a type other than SimulationModule.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="account_type">account_type<a href="#account_type" class="hash-link" aria-label="Direct link to account_type" title="Direct link to account_type">​</a></h4>
<p>The account base currency.</p>
<ul>
<li><strong>Returns:</strong>
AccountType</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="add_instrumentself-instrument-instrument--void">add_instrument(self, Instrument instrument) → void<a href="#add_instrumentself-instrument-instrument--void" class="hash-link" aria-label="Direct link to add_instrument(self, Instrument instrument) → void" title="Direct link to add_instrument(self, Instrument instrument) → void">​</a></h4>
<p>Add the given instrument to the exchange.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>instrument</strong> (<a href="../model/instruments/index.htm#posei_trader.model.instruments.Instrument"><em>Instrument</em></a>) – The instrument to add.</li>
<li><strong>Raises:</strong>
<ul>
<li><strong>ValueError</strong> – If instrument.id.venue is not equal to the venue ID.</li>
<li><a href="../config/index.htm#posei_trader.common.config.InvalidConfiguration"><strong>InvalidConfiguration</strong></a> – If instrument is invalid for this venue.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="adjust_accountself-money-adjustment--void">adjust_account(self, Money adjustment) → void<a href="#adjust_accountself-money-adjustment--void" class="hash-link" aria-label="Direct link to adjust_account(self, Money adjustment) → void" title="Direct link to adjust_account(self, Money adjustment) → void">​</a></h4>
<p>Adjust the account at the exchange with the given adjustment.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>adjustment</strong> (<a href="../model/index.htm#posei_trader.model.Money"><em>Money</em></a>) – The adjustment for the account.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="bar_adaptive_high_low_ordering">bar_adaptive_high_low_ordering<a href="#bar_adaptive_high_low_ordering" class="hash-link" aria-label="Direct link to bar_adaptive_high_low_ordering" title="Direct link to bar_adaptive_high_low_ordering">​</a></h4>
<p>If the processing order of bar prices is adaptive based on a heuristic.</p>
<ul>
<li><strong>Returns:</strong>
bool</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="bar_execution">bar_execution<a href="#bar_execution" class="hash-link" aria-label="Direct link to bar_execution" title="Direct link to bar_execution">​</a></h4>
<p>If bars should be processed by the matching engine(s) (and move the market).</p>
<ul>
<li><strong>Returns:</strong>
bool</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="base_currency">base_currency<a href="#base_currency" class="hash-link" aria-label="Direct link to base_currency" title="Direct link to base_currency">​</a></h4>
<p>The account base currency (None for multi-currency accounts).</p>
<ul>
<li><strong>Returns:</strong>
Currency or <code>None</code></li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="best_ask_priceself-instrumentid-instrument_id--price">best_ask_price(self, InstrumentId instrument_id) → <a href="../model/index.htm#posei_trader.model.Price">Price</a><a href="#best_ask_priceself-instrumentid-instrument_id--price" class="hash-link" aria-label="Direct link to best_ask_priceself-instrumentid-instrument_id--price" title="Direct link to best_ask_priceself-instrumentid-instrument_id--price">​</a></h4>
<p>Return the best ask price for the given instrument ID (if found).</p>
<ul>
<li><strong>Parameters:</strong>
<strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument ID for the price.</li>
<li><strong>Return type:</strong>
Price or <code>None</code></li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="best_bid_priceself-instrumentid-instrument_id--price">best_bid_price(self, InstrumentId instrument_id) → <a href="../model/index.htm#posei_trader.model.Price">Price</a><a href="#best_bid_priceself-instrumentid-instrument_id--price" class="hash-link" aria-label="Direct link to best_bid_priceself-instrumentid-instrument_id--price" title="Direct link to best_bid_priceself-instrumentid-instrument_id--price">​</a></h4>
<p>Return the best bid price for the given instrument ID (if found).</p>
<ul>
<li><strong>Parameters:</strong>
<strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument ID for the price.</li>
<li><strong>Return type:</strong>
Price or <code>None</code></li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="book_type">book_type<a href="#book_type" class="hash-link" aria-label="Direct link to book_type" title="Direct link to book_type">​</a></h4>
<p>The exchange default order book type.</p>
<ul>
<li><strong>Returns:</strong>
BookType</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="cache-1">cache<a href="#cache-1" class="hash-link" aria-label="Direct link to cache" title="Direct link to cache">​</a></h4>
<p>The cache wired to the exchange.</p>
<ul>
<li><strong>Returns:</strong>
CacheFacade</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="default_leverage">default_leverage<a href="#default_leverage" class="hash-link" aria-label="Direct link to default_leverage" title="Direct link to default_leverage">​</a></h4>
<p>The accounts default leverage.</p>
<ul>
<li><strong>Returns:</strong>
Decimal</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="exec_client">exec_client<a href="#exec_client" class="hash-link" aria-label="Direct link to exec_client" title="Direct link to exec_client">​</a></h4>
<p>The execution client wired to the exchange.</p>
<ul>
<li><strong>Returns:</strong>
BacktestExecClient</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="fee_model">fee_model<a href="#fee_model" class="hash-link" aria-label="Direct link to fee_model" title="Direct link to fee_model">​</a></h4>
<p>The fee model for the exchange.</p>
<ul>
<li><strong>Returns:</strong>
FeeModel</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="fill_model">fill_model<a href="#fill_model" class="hash-link" aria-label="Direct link to fill_model" title="Direct link to fill_model">​</a></h4>
<p>The fill model for the exchange.</p>
<ul>
<li><strong>Returns:</strong>
FillModel</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="get_accountself--account">get_account(self) → Account<a href="#get_accountself--account" class="hash-link" aria-label="Direct link to get_account(self) → Account" title="Direct link to get_account(self) → Account">​</a></h4>
<p>Return the account for the registered client (if registered).</p>
<ul>
<li><strong>Return type:</strong>
Account or <code>None</code></li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="get_bookself-instrumentid-instrument_id--orderbook">get_book(self, InstrumentId instrument_id) → <a href="../model/book/index.htm#posei_trader.model.book.OrderBook">OrderBook</a><a href="#get_bookself-instrumentid-instrument_id--orderbook" class="hash-link" aria-label="Direct link to get_bookself-instrumentid-instrument_id--orderbook" title="Direct link to get_bookself-instrumentid-instrument_id--orderbook">​</a></h4>
<p>Return the order book for the given instrument ID.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument ID for the price.</li>
<li><strong>Return type:</strong>
OrderBook or <code>None</code></li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="get_booksself--dict">get_books(self) → dict<a href="#get_booksself--dict" class="hash-link" aria-label="Direct link to get_books(self) → dict" title="Direct link to get_books(self) → dict">​</a></h4>
<p>Return all order books within the exchange.</p>
<ul>
<li><strong>Return type:</strong>
dict[<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.InstrumentId">InstrumentId</a>, <a href="../model/book/index.htm#posei_trader.model.book.OrderBook">OrderBook</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="get_matching_engineself-instrumentid-instrument_id--ordermatchingengine">get_matching_engine(self, InstrumentId instrument_id) → OrderMatchingEngine<a href="#get_matching_engineself-instrumentid-instrument_id--ordermatchingengine" class="hash-link" aria-label="Direct link to get_matching_engine(self, InstrumentId instrument_id) → OrderMatchingEngine" title="Direct link to get_matching_engine(self, InstrumentId instrument_id) → OrderMatchingEngine">​</a></h4>
<p>Return the matching engine for the given instrument ID (if found).</p>
<ul>
<li><strong>Parameters:</strong>
<strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument ID for the matching engine.</li>
<li><strong>Return type:</strong>
OrderMatchingEngine or <code>None</code></li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="get_matching_enginesself--dict">get_matching_engines(self) → dict<a href="#get_matching_enginesself--dict" class="hash-link" aria-label="Direct link to get_matching_engines(self) → dict" title="Direct link to get_matching_engines(self) → dict">​</a></h4>
<p>Return all matching engines for the exchange (for every instrument).</p>
<ul>
<li><strong>Return type:</strong>
dict[<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.InstrumentId">InstrumentId</a>, OrderMatchingEngine]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="get_open_ask_ordersself-instrumentid-instrument_idnone--list">get_open_ask_orders(self, InstrumentId instrument_id=None) → list<a href="#get_open_ask_ordersself-instrumentid-instrument_idnone--list" class="hash-link" aria-label="Direct link to get_open_ask_orders(self, InstrumentId instrument_id=None) → list" title="Direct link to get_open_ask_orders(self, InstrumentId instrument_id=None) → list">​</a></h4>
<p>Return the open ask orders at the exchange.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a> <em>,</em> <em>optional</em>) – The instrument_id query filter.</li>
<li><strong>Return type:</strong>
list[<a href="../model/orders/index.htm#posei_trader.model.orders.Order">Order</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="get_open_bid_ordersself-instrumentid-instrument_idnone--list">get_open_bid_orders(self, InstrumentId instrument_id=None) → list<a href="#get_open_bid_ordersself-instrumentid-instrument_idnone--list" class="hash-link" aria-label="Direct link to get_open_bid_orders(self, InstrumentId instrument_id=None) → list" title="Direct link to get_open_bid_orders(self, InstrumentId instrument_id=None) → list">​</a></h4>
<p>Return the open bid orders at the exchange.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a> <em>,</em> <em>optional</em>) – The instrument_id query filter.</li>
<li><strong>Return type:</strong>
list[<a href="../model/orders/index.htm#posei_trader.model.orders.Order">Order</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="get_open_ordersself-instrumentid-instrument_idnone--list">get_open_orders(self, InstrumentId instrument_id=None) → list<a href="#get_open_ordersself-instrumentid-instrument_idnone--list" class="hash-link" aria-label="Direct link to get_open_orders(self, InstrumentId instrument_id=None) → list" title="Direct link to get_open_orders(self, InstrumentId instrument_id=None) → list">​</a></h4>
<p>Return the open orders at the exchange.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a> <em>,</em> <em>optional</em>) – The instrument_id query filter.</li>
<li><strong>Return type:</strong>
list[<a href="../model/orders/index.htm#posei_trader.model.orders.Order">Order</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="id-2">id<a href="#id-2" class="hash-link" aria-label="Direct link to id" title="Direct link to id">​</a></h4>
<p>The exchange ID.</p>
<ul>
<li><strong>Returns:</strong>
Venue</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="initialize_accountself--void">initialize_account(self) → void<a href="#initialize_accountself--void" class="hash-link" aria-label="Direct link to initialize_account(self) → void" title="Direct link to initialize_account(self) → void">​</a></h4>
<p>Initialize the account to the starting balances.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="instruments">instruments<a href="#instruments" class="hash-link" aria-label="Direct link to instruments" title="Direct link to instruments">​</a></h4>
<p>The exchange instruments.</p>
<ul>
<li><strong>Returns:</strong>
dict[InstrumentId, Instrument]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_frozen_account">is_frozen_account<a href="#is_frozen_account" class="hash-link" aria-label="Direct link to is_frozen_account" title="Direct link to is_frozen_account">​</a></h4>
<p>If the account for the exchange is frozen.</p>
<ul>
<li><strong>Returns:</strong>
bool</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="latency_model">latency_model<a href="#latency_model" class="hash-link" aria-label="Direct link to latency_model" title="Direct link to latency_model">​</a></h4>
<p>The latency model for the exchange.</p>
<ul>
<li><strong>Returns:</strong>
LatencyModel</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="leverages">leverages<a href="#leverages" class="hash-link" aria-label="Direct link to leverages" title="Direct link to leverages">​</a></h4>
<p>The accounts instrument specific leverage configuration.</p>
<ul>
<li><strong>Returns:</strong>
dict[InstrumentId, Decimal]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="modules">modules<a href="#modules" class="hash-link" aria-label="Direct link to modules" title="Direct link to modules">​</a></h4>
<p>The simulation modules registered with the exchange.</p>
<ul>
<li><strong>Returns:</strong>
list[SimulationModule]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="msgbus">msgbus<a href="#msgbus" class="hash-link" aria-label="Direct link to msgbus" title="Direct link to msgbus">​</a></h4>
<p>The message bus wired to the exchange.</p>
<ul>
<li><strong>Returns:</strong>
MessageBus</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="oms_type">oms_type<a href="#oms_type" class="hash-link" aria-label="Direct link to oms_type" title="Direct link to oms_type">​</a></h4>
<p>The exchange order management system type.</p>
<ul>
<li><strong>Returns:</strong>
OmsType</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="processself-uint64_t-ts_now--void">process(self, uint64_t ts_now) → void<a href="#processself-uint64_t-ts_now--void" class="hash-link" aria-label="Direct link to process(self, uint64_t ts_now) → void" title="Direct link to process(self, uint64_t ts_now) → void">​</a></h4>
<p>Process the exchange to the given time.</p>
<p>All pending commands will be processed along with all simulation modules.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>ts_now</strong> (<em>uint64_t</em>) – The current UNIX timestamp (nanoseconds).</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="process_barself-bar-bar--void">process_bar(self, Bar bar) → void<a href="#process_barself-bar-bar--void" class="hash-link" aria-label="Direct link to process_bar(self, Bar bar) → void" title="Direct link to process_bar(self, Bar bar) → void">​</a></h4>
<p>Process the exchanges market for the given bar.</p>
<p>Market dynamics are simulated by auctioning open orders.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>bar</strong> (<a href="../model/data/index.htm#posei_trader.model.data.Bar"><em>Bar</em></a>) – The bar to process.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="process_instrument_closeself-instrumentclose-close--void">process_instrument_close(self, InstrumentClose close) → void<a href="#process_instrument_closeself-instrumentclose-close--void" class="hash-link" aria-label="Direct link to process_instrument_close(self, InstrumentClose close) → void" title="Direct link to process_instrument_close(self, InstrumentClose close) → void">​</a></h4>
<p>Process the exchanges market for the given instrument close.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>close</strong> (<a href="../model/data/index.htm#posei_trader.model.data.InstrumentClose"><em>InstrumentClose</em></a>) – The instrument close to process.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="process_instrument_statusself-instrumentstatus-data--void">process_instrument_status(self, InstrumentStatus data) → void<a href="#process_instrument_statusself-instrumentstatus-data--void" class="hash-link" aria-label="Direct link to process_instrument_status(self, InstrumentStatus data) → void" title="Direct link to process_instrument_status(self, InstrumentStatus data) → void">​</a></h4>
<p>Process a specific instrument status.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>data</strong> (<a href="../model/data/index.htm#posei_trader.model.data.InstrumentStatus"><em>InstrumentStatus</em></a>) – The instrument status update to process.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="process_order_book_deltaself-orderbookdelta-delta--void">process_order_book_delta(self, OrderBookDelta delta) → void<a href="#process_order_book_deltaself-orderbookdelta-delta--void" class="hash-link" aria-label="Direct link to process_order_book_delta(self, OrderBookDelta delta) → void" title="Direct link to process_order_book_delta(self, OrderBookDelta delta) → void">​</a></h4>
<p>Process the exchanges market for the given order book delta.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>data</strong> (<a href="../model/data/index.htm#posei_trader.model.data.OrderBookDelta"><em>OrderBookDelta</em></a>) – The order book delta to process.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="process_order_book_deltasself-orderbookdeltas-deltas--void">process_order_book_deltas(self, OrderBookDeltas deltas) → void<a href="#process_order_book_deltasself-orderbookdeltas-deltas--void" class="hash-link" aria-label="Direct link to process_order_book_deltas(self, OrderBookDeltas deltas) → void" title="Direct link to process_order_book_deltas(self, OrderBookDeltas deltas) → void">​</a></h4>
<p>Process the exchanges market for the given order book deltas.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>data</strong> (<a href="../model/data/index.htm#posei_trader.model.data.OrderBookDeltas"><em>OrderBookDeltas</em></a>) – The order book deltas to process.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="process_order_book_depth10self-orderbookdepth10-depth--void">process_order_book_depth10(self, OrderBookDepth10 depth) → void<a href="#process_order_book_depth10self-orderbookdepth10-depth--void" class="hash-link" aria-label="Direct link to process_order_book_depth10(self, OrderBookDepth10 depth) → void" title="Direct link to process_order_book_depth10(self, OrderBookDepth10 depth) → void">​</a></h4>
<p>Process the exchanges market for the given order book depth.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>depth</strong> (<a href="../model/data/index.htm#posei_trader.model.data.OrderBookDepth10"><em>OrderBookDepth10</em></a>) – The order book depth to process.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="process_quote_tickself-quotetick-tick--void">process_quote_tick(self, QuoteTick tick) → void<a href="#process_quote_tickself-quotetick-tick--void" class="hash-link" aria-label="Direct link to process_quote_tick(self, QuoteTick tick) → void" title="Direct link to process_quote_tick(self, QuoteTick tick) → void">​</a></h4>
<p>Process the exchanges market for the given quote tick.</p>
<p>Market dynamics are simulated by auctioning open orders.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>tick</strong> (<a href="../model/data/index.htm#posei_trader.model.data.QuoteTick"><em>QuoteTick</em></a>) – The tick to process.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="process_trade_tickself-tradetick-tick--void">process_trade_tick(self, TradeTick tick) → void<a href="#process_trade_tickself-tradetick-tick--void" class="hash-link" aria-label="Direct link to process_trade_tick(self, TradeTick tick) → void" title="Direct link to process_trade_tick(self, TradeTick tick) → void">​</a></h4>
<p>Process the exchanges market for the given trade tick.</p>
<p>Market dynamics are simulated by auctioning open orders.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>tick</strong> (<a href="../model/data/index.htm#posei_trader.model.data.TradeTick"><em>TradeTick</em></a>) – The tick to process.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="register_clientself-backtestexecclient-client--void">register_client(self, BacktestExecClient client) → void<a href="#register_clientself-backtestexecclient-client--void" class="hash-link" aria-label="Direct link to register_client(self, BacktestExecClient client) → void" title="Direct link to register_client(self, BacktestExecClient client) → void">​</a></h4>
<p>Register the given execution client with the simulated exchange.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>client</strong> (<a href="#posei_trader.backtest.execution_client.BacktestExecClient"><em>BacktestExecClient</em></a>) – The client to register</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="reject_stop_orders">reject_stop_orders<a href="#reject_stop_orders" class="hash-link" aria-label="Direct link to reject_stop_orders" title="Direct link to reject_stop_orders">​</a></h4>
<p>If stop orders are rejected on submission if in the market.</p>
<ul>
<li><strong>Returns:</strong>
bool</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="resetself--void-3">reset(self) → void<a href="#resetself--void-3" class="hash-link" aria-label="Direct link to reset(self) → void" title="Direct link to reset(self) → void">​</a></h4>
<p>Reset the simulated exchange.</p>
<p>All stateful fields are reset to their initial value.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="sendself-tradingcommand-command--void">send(self, TradingCommand command) → void<a href="#sendself-tradingcommand-command--void" class="hash-link" aria-label="Direct link to send(self, TradingCommand command) → void" title="Direct link to send(self, TradingCommand command) → void">​</a></h4>
<p>Send the given trading command into the exchange.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>command</strong> (<a href="../execution/index.htm#posei_trader.execution.messages.TradingCommand"><em>TradingCommand</em></a>) – The command to send.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="set_fill_modelself-fillmodel-fill_model--void">set_fill_model(self, FillModel fill_model) → void<a href="#set_fill_modelself-fillmodel-fill_model--void" class="hash-link" aria-label="Direct link to set_fill_model(self, FillModel fill_model) → void" title="Direct link to set_fill_model(self, FillModel fill_model) → void">​</a></h4>
<p>Set the fill model for all matching engines.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>fill_model</strong> (<a href="#posei_trader.backtest.models.FillModel"><em>FillModel</em></a>) – The fill model to set.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="set_latency_modelself-latencymodel-latency_model--void">set_latency_model(self, LatencyModel latency_model) → void<a href="#set_latency_modelself-latencymodel-latency_model--void" class="hash-link" aria-label="Direct link to set_latency_model(self, LatencyModel latency_model) → void" title="Direct link to set_latency_model(self, LatencyModel latency_model) → void">​</a></h4>
<p>Change the latency model for this exchange.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>latency_model</strong> (<a href="#posei_trader.backtest.models.LatencyModel"><em>LatencyModel</em></a>) – The latency model to set.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="starting_balances">starting_balances<a href="#starting_balances" class="hash-link" aria-label="Direct link to starting_balances" title="Direct link to starting_balances">​</a></h4>
<p>The account starting balances for each backtest run.</p>
<ul>
<li><strong>Returns:</strong>
bool</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="support_contingent_orders">support_contingent_orders<a href="#support_contingent_orders" class="hash-link" aria-label="Direct link to support_contingent_orders" title="Direct link to support_contingent_orders">​</a></h4>
<p>If contingent orders will be supported/respected by the venue.</p>
<ul>
<li><strong>Returns:</strong>
bool</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="support_gtd_orders">support_gtd_orders<a href="#support_gtd_orders" class="hash-link" aria-label="Direct link to support_gtd_orders" title="Direct link to support_gtd_orders">​</a></h4>
<p>If orders with GTD time in force will be supported by the venue.</p>
<ul>
<li><strong>Returns:</strong>
bool</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="trade_execution">trade_execution<a href="#trade_execution" class="hash-link" aria-label="Direct link to trade_execution" title="Direct link to trade_execution">​</a></h4>
<p>If trades should be processed by the matching engine(s) (and move the market).</p>
<ul>
<li><strong>Returns:</strong>
bool</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="update_instrumentself-instrument-instrument--void">update_instrument(self, Instrument instrument) → void<a href="#update_instrumentself-instrument-instrument--void" class="hash-link" aria-label="Direct link to update_instrument(self, Instrument instrument) → void" title="Direct link to update_instrument(self, Instrument instrument) → void">​</a></h4>
<p>Update the venues current instrument definition with the given instrument.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>instrument</strong> (<a href="../model/instruments/index.htm#posei_trader.model.instruments.Instrument"><em>Instrument</em></a>) – The instrument definition to update.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="use_message_queue">use_message_queue<a href="#use_message_queue" class="hash-link" aria-label="Direct link to use_message_queue" title="Direct link to use_message_queue">​</a></h4>
<p>If an internal message queue is being used to sequentially process incoming trading commands.</p>
<ul>
<li><strong>Returns:</strong>
bool</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="use_position_ids">use_position_ids<a href="#use_position_ids" class="hash-link" aria-label="Direct link to use_position_ids" title="Direct link to use_position_ids">​</a></h4>
<p>If venue position IDs will be generated on order fills.</p>
<ul>
<li><strong>Returns:</strong>
bool</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="use_random_ids">use_random_ids<a href="#use_random_ids" class="hash-link" aria-label="Direct link to use_random_ids" title="Direct link to use_random_ids">​</a></h4>
<p>If venue order and position IDs will be randomly generated UUID4s.</p>
<ul>
<li><strong>Returns:</strong>
bool</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="use_reduce_only">use_reduce_only<a href="#use_reduce_only" class="hash-link" aria-label="Direct link to use_reduce_only" title="Direct link to use_reduce_only">​</a></h4>
<p>If the reduce_only option on orders will be honored.</p>
<ul>
<li><strong>Returns:</strong>
bool</li>
</ul>
<p><a id="module-posei_trader.backtest.execution_client"></a></p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="class-backtestexecclient"><em>class</em> BacktestExecClient<a href="#class-backtestexecclient" class="hash-link" aria-label="Direct link to class-backtestexecclient" title="Direct link to class-backtestexecclient">​</a></h3>
<p>Bases: <a href="../execution/index.htm#posei_trader.execution.client.ExecutionClient"><code>ExecutionClient</code></a></p>
<p>BacktestExecClient(SimulatedExchange exchange, MessageBus msgbus, Cache cache, TestClock clock, bool routing=False, bool frozen_account=False) -&gt; None</p>
<p>Provides an execution client for the BacktestEngine.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>exchange</strong> (<a href="#posei_trader.backtest.exchange.SimulatedExchange"><em>SimulatedExchange</em></a>) – The simulated exchange for the backtest.</li>
<li><strong>msgbus</strong> (<a href="../common/index.htm#posei_trader.common.component.MessageBus"><em>MessageBus</em></a>) – The message bus for the client.</li>
<li><strong>cache</strong> (<a href="../cache/index.htm#posei_trader.cache.Cache"><em>Cache</em></a>) – The cache for the client.</li>
<li><strong>clock</strong> (<a href="../common/index.htm#posei_trader.common.component.TestClock"><em>TestClock</em></a>) – The clock for the client.</li>
<li><strong>routing</strong> (<em>bool</em>) – If multi-venue routing is enabled for the client.</li>
<li><strong>frozen_account</strong> (<em>bool</em>) – If the backtest run account is frozen.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="account_id">account_id<a href="#account_id" class="hash-link" aria-label="Direct link to account_id" title="Direct link to account_id">​</a></h4>
<p>The clients account ID.</p>
<ul>
<li><strong>Returns:</strong>
AccountId or <code>None</code></li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="account_type-1">account_type<a href="#account_type-1" class="hash-link" aria-label="Direct link to account_type" title="Direct link to account_type">​</a></h4>
<p>The clients account type.</p>
<ul>
<li><strong>Returns:</strong>
AccountType</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="base_currency-1">base_currency<a href="#base_currency-1" class="hash-link" aria-label="Direct link to base_currency" title="Direct link to base_currency">​</a></h4>
<p>The clients account base currency (None for multi-currency accounts).</p>
<ul>
<li><strong>Returns:</strong>
Currency or <code>None</code></li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="batch_cancel_ordersself-batchcancelorders-command--void">batch_cancel_orders(self, BatchCancelOrders command) → void<a href="#batch_cancel_ordersself-batchcancelorders-command--void" class="hash-link" aria-label="Direct link to batch_cancel_orders(self, BatchCancelOrders command) → void" title="Direct link to batch_cancel_orders(self, BatchCancelOrders command) → void">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="cancel_all_ordersself-cancelallorders-command--void">cancel_all_orders(self, CancelAllOrders command) → void<a href="#cancel_all_ordersself-cancelallorders-command--void" class="hash-link" aria-label="Direct link to cancel_all_orders(self, CancelAllOrders command) → void" title="Direct link to cancel_all_orders(self, CancelAllOrders command) → void">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="cancel_orderself-cancelorder-command--void">cancel_order(self, CancelOrder command) → void<a href="#cancel_orderself-cancelorder-command--void" class="hash-link" aria-label="Direct link to cancel_order(self, CancelOrder command) → void" title="Direct link to cancel_order(self, CancelOrder command) → void">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="degradeself--void-2">degrade(self) → void<a href="#degradeself--void-2" class="hash-link" aria-label="Direct link to degrade(self) → void" title="Direct link to degrade(self) → void">​</a></h4>
<p>Degrade the component.</p>
<p>While executing on_degrade() any exception will be logged and reraised, then the component
will remain in a <code>DEGRADING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-16">WARNING<a href="#warning-16" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="disposeself--void-2">dispose(self) → void<a href="#disposeself--void-2" class="hash-link" aria-label="Direct link to dispose(self) → void" title="Direct link to dispose(self) → void">​</a></h4>
<p>Dispose of the component.</p>
<p>While executing on_dispose() any exception will be logged and reraised, then the component
will remain in a <code>DISPOSING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-17">WARNING<a href="#warning-17" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="faultself--void-2">fault(self) → void<a href="#faultself--void-2" class="hash-link" aria-label="Direct link to fault(self) → void" title="Direct link to fault(self) → void">​</a></h4>
<p>Fault the component.</p>
<p>Calling this method multiple times has the same effect as calling it once (it is idempotent).
Once called, it cannot be reversed, and no other methods should be called on this instance.</p>
<p>While executing on_fault() any exception will be logged and reraised, then the component
will remain in a <code>FAULTING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-18">WARNING<a href="#warning-18" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="classmethod-fully_qualified_namecls--str-2"><em>classmethod</em> fully_qualified_name(cls) → str<a href="#classmethod-fully_qualified_namecls--str-2" class="hash-link" aria-label="Direct link to classmethod-fully_qualified_namecls--str-2" title="Direct link to classmethod-fully_qualified_namecls--str-2">​</a></h4>
<p>Return the fully qualified name for the components class.</p>
<ul>
<li><strong>Return type:</strong>
str</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="generate_account_stateself-list-balances-list-margins-bool-reported-uint64_t-ts_event-dict-infonone--void">generate_account_state(self, list balances, list margins, bool reported, uint64_t ts_event, dict info=None) → void<a href="#generate_account_stateself-list-balances-list-margins-bool-reported-uint64_t-ts_event-dict-infonone--void" class="hash-link" aria-label="Direct link to generate_account_state(self, list balances, list margins, bool reported, uint64_t ts_event, dict info=None) → void" title="Direct link to generate_account_state(self, list balances, list margins, bool reported, uint64_t ts_event, dict info=None) → void">​</a></h4>
<p>Generate an AccountState event and publish on the message bus.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>balances</strong> (<em>list</em> <em>[</em><a href="../model/index.htm#posei_trader.model.AccountBalance"><em>AccountBalance</em></a> <em>]</em>) – The account balances.</li>
<li><strong>margins</strong> (<em>list</em> <em>[</em><a href="../model/index.htm#posei_trader.model.MarginBalance"><em>MarginBalance</em></a> <em>]</em>) – The margin balances.</li>
<li><strong>reported</strong> (<em>bool</em>) – If the balances are reported directly from the exchange.</li>
<li><strong>ts_event</strong> (<em>uint64_t</em>) – UNIX timestamp (nanoseconds) when the account state event occurred.</li>
<li><strong>info</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>object</em> <em>]</em>) – The additional implementation specific account information.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="generate_order_acceptedself-strategyid-strategy_id-instrumentid-instrument_id-clientorderid-client_order_id-venueorderid-venue_order_id-uint64_t-ts_event--void">generate_order_accepted(self, StrategyId strategy_id, InstrumentId instrument_id, ClientOrderId client_order_id, VenueOrderId venue_order_id, uint64_t ts_event) → void<a href="#generate_order_acceptedself-strategyid-strategy_id-instrumentid-instrument_id-clientorderid-client_order_id-venueorderid-venue_order_id-uint64_t-ts_event--void" class="hash-link" aria-label="Direct link to generate_order_accepted(self, StrategyId strategy_id, InstrumentId instrument_id, ClientOrderId client_order_id, VenueOrderId venue_order_id, uint64_t ts_event) → void" title="Direct link to generate_order_accepted(self, StrategyId strategy_id, InstrumentId instrument_id, ClientOrderId client_order_id, VenueOrderId venue_order_id, uint64_t ts_event) → void">​</a></h4>
<p>Generate an OrderAccepted event and send it to the ExecutionEngine.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>strategy_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.StrategyId"><em>StrategyId</em></a>) – The strategy ID associated with the event.</li>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument ID.</li>
<li><strong>client_order_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.ClientOrderId"><em>ClientOrderId</em></a>) – The client order ID.</li>
<li><strong>venue_order_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.VenueOrderId"><em>VenueOrderId</em></a>) – The venue order ID (assigned by the venue).</li>
<li><strong>ts_event</strong> (<em>uint64_t</em>) – UNIX timestamp (nanoseconds) when the order accepted event occurred.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="generate_order_cancel_rejectedself-strategyid-strategy_id-instrumentid-instrument_id-clientorderid-client_order_id-venueorderid-venue_order_id-str-reason-uint64_t-ts_event--void">generate_order_cancel_rejected(self, StrategyId strategy_id, InstrumentId instrument_id, ClientOrderId client_order_id, VenueOrderId venue_order_id, str reason, uint64_t ts_event) → void<a href="#generate_order_cancel_rejectedself-strategyid-strategy_id-instrumentid-instrument_id-clientorderid-client_order_id-venueorderid-venue_order_id-str-reason-uint64_t-ts_event--void" class="hash-link" aria-label="Direct link to generate_order_cancel_rejected(self, StrategyId strategy_id, InstrumentId instrument_id, ClientOrderId client_order_id, VenueOrderId venue_order_id, str reason, uint64_t ts_event) → void" title="Direct link to generate_order_cancel_rejected(self, StrategyId strategy_id, InstrumentId instrument_id, ClientOrderId client_order_id, VenueOrderId venue_order_id, str reason, uint64_t ts_event) → void">​</a></h4>
<p>Generate an OrderCancelRejected event and send it to the ExecutionEngine.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>strategy_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.StrategyId"><em>StrategyId</em></a>) – The strategy ID associated with the event.</li>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument ID.</li>
<li><strong>client_order_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.ClientOrderId"><em>ClientOrderId</em></a>) – The client order ID.</li>
<li><strong>venue_order_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.VenueOrderId"><em>VenueOrderId</em></a>) – The venue order ID (assigned by the venue).</li>
<li><strong>reason</strong> (<em>str</em>) – The order cancel rejected reason.</li>
<li><strong>ts_event</strong> (<em>uint64_t</em>) – UNIX timestamp (nanoseconds) when the order cancel rejected event occurred.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="generate_order_canceledself-strategyid-strategy_id-instrumentid-instrument_id-clientorderid-client_order_id-venueorderid-venue_order_id-uint64_t-ts_event--void">generate_order_canceled(self, StrategyId strategy_id, InstrumentId instrument_id, ClientOrderId client_order_id, VenueOrderId venue_order_id, uint64_t ts_event) → void<a href="#generate_order_canceledself-strategyid-strategy_id-instrumentid-instrument_id-clientorderid-client_order_id-venueorderid-venue_order_id-uint64_t-ts_event--void" class="hash-link" aria-label="Direct link to generate_order_canceled(self, StrategyId strategy_id, InstrumentId instrument_id, ClientOrderId client_order_id, VenueOrderId venue_order_id, uint64_t ts_event) → void" title="Direct link to generate_order_canceled(self, StrategyId strategy_id, InstrumentId instrument_id, ClientOrderId client_order_id, VenueOrderId venue_order_id, uint64_t ts_event) → void">​</a></h4>
<p>Generate an OrderCanceled event and send it to the ExecutionEngine.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>strategy_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.StrategyId"><em>StrategyId</em></a>) – The strategy ID associated with the event.</li>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument ID.</li>
<li><strong>client_order_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.ClientOrderId"><em>ClientOrderId</em></a>) – The client order ID.</li>
<li><strong>venue_order_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.VenueOrderId"><em>VenueOrderId</em></a>) – The venue order ID (assigned by the venue).</li>
<li><strong>ts_event</strong> (<em>uint64_t</em>) – UNIX timestamp (nanoseconds) when order canceled event occurred.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="generate_order_expiredself-strategyid-strategy_id-instrumentid-instrument_id-clientorderid-client_order_id-venueorderid-venue_order_id-uint64_t-ts_event--void">generate_order_expired(self, StrategyId strategy_id, InstrumentId instrument_id, ClientOrderId client_order_id, VenueOrderId venue_order_id, uint64_t ts_event) → void<a href="#generate_order_expiredself-strategyid-strategy_id-instrumentid-instrument_id-clientorderid-client_order_id-venueorderid-venue_order_id-uint64_t-ts_event--void" class="hash-link" aria-label="Direct link to generate_order_expired(self, StrategyId strategy_id, InstrumentId instrument_id, ClientOrderId client_order_id, VenueOrderId venue_order_id, uint64_t ts_event) → void" title="Direct link to generate_order_expired(self, StrategyId strategy_id, InstrumentId instrument_id, ClientOrderId client_order_id, VenueOrderId venue_order_id, uint64_t ts_event) → void">​</a></h4>
<p>Generate an OrderExpired event and send it to the ExecutionEngine.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>strategy_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.StrategyId"><em>StrategyId</em></a>) – The strategy ID associated with the event.</li>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument ID.</li>
<li><strong>client_order_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.ClientOrderId"><em>ClientOrderId</em></a>) – The client order ID.</li>
<li><strong>venue_order_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.VenueOrderId"><em>VenueOrderId</em></a>) – The venue order ID (assigned by the venue).</li>
<li><strong>ts_event</strong> (<em>uint64_t</em>) – UNIX timestamp (nanoseconds) when the order expired event occurred.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="generate_order_filledself-strategyid-strategy_id-instrumentid-instrument_id-clientorderid-client_order_id-venueorderid-venue_order_id-positionid-venue_position_id-positionid--none-tradeid-trade_id-orderside-order_side-ordertype-order_type-quantity-last_qty-price-last_px-currency-quote_currency-money-commission-liquidityside-liquidity_side-uint64_t-ts_event-dict-infonone--void">generate_order_filled(self, StrategyId strategy_id, InstrumentId instrument_id, ClientOrderId client_order_id, VenueOrderId venue_order_id, PositionId venue_position_id: PositionId | None, TradeId trade_id, OrderSide order_side, OrderType order_type, Quantity last_qty, Price last_px, Currency quote_currency, Money commission, LiquiditySide liquidity_side, uint64_t ts_event, dict info=None) → void<a href="#generate_order_filledself-strategyid-strategy_id-instrumentid-instrument_id-clientorderid-client_order_id-venueorderid-venue_order_id-positionid-venue_position_id-positionid--none-tradeid-trade_id-orderside-order_side-ordertype-order_type-quantity-last_qty-price-last_px-currency-quote_currency-money-commission-liquidityside-liquidity_side-uint64_t-ts_event-dict-infonone--void" class="hash-link" aria-label="Direct link to generate_order_filled(self, StrategyId strategy_id, InstrumentId instrument_id, ClientOrderId client_order_id, VenueOrderId venue_order_id, PositionId venue_position_id: PositionId | None, TradeId trade_id, OrderSide order_side, OrderType order_type, Quantity last_qty, Price last_px, Currency quote_currency, Money commission, LiquiditySide liquidity_side, uint64_t ts_event, dict info=None) → void" title="Direct link to generate_order_filled(self, StrategyId strategy_id, InstrumentId instrument_id, ClientOrderId client_order_id, VenueOrderId venue_order_id, PositionId venue_position_id: PositionId | None, TradeId trade_id, OrderSide order_side, OrderType order_type, Quantity last_qty, Price last_px, Currency quote_currency, Money commission, LiquiditySide liquidity_side, uint64_t ts_event, dict info=None) → void">​</a></h4>
<p>Generate an OrderFilled event and send it to the ExecutionEngine.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>strategy_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.StrategyId"><em>StrategyId</em></a>) – The strategy ID associated with the event.</li>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument ID.</li>
<li><strong>client_order_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.ClientOrderId"><em>ClientOrderId</em></a>) – The client order ID.</li>
<li><strong>venue_order_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.VenueOrderId"><em>VenueOrderId</em></a>) – The venue order ID (assigned by the venue).</li>
<li><strong>trade_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.TradeId"><em>TradeId</em></a>) – The trade ID.</li>
<li><strong>venue_position_id</strong> (PositionId or <code>None</code>) – The venue position ID associated with the order. If the trading
venue has assigned a position ID / ticket then pass that here,
otherwise pass <code>None</code> and the execution engine OMS will handle
position ID resolution.</li>
<li><strong>order_side</strong> (OrderSide {<code>BUY</code>, <code>SELL</code>}) – The execution order side.</li>
<li><strong>order_type</strong> (<em>OrderType</em>) – The execution order type.</li>
<li><strong>last_qty</strong> (<a href="../model/index.htm#posei_trader.model.Quantity"><em>Quantity</em></a>) – The fill quantity for this execution.</li>
<li><strong>last_px</strong> (<a href="../model/index.htm#posei_trader.model.Price"><em>Price</em></a>) – The fill price for this execution (not average price).</li>
<li><strong>quote_currency</strong> (<a href="../model/index.htm#posei_trader.model.Currency"><em>Currency</em></a>) – The currency of the price.</li>
<li><strong>commission</strong> (<a href="../model/index.htm#posei_trader.model.Money"><em>Money</em></a>) – The fill commission.</li>
<li><strong>liquidity_side</strong> (LiquiditySide {<code>NO_LIQUIDITY_SIDE</code>, <code>MAKER</code>, <code>TAKER</code>}) – The execution liquidity side.</li>
<li><strong>ts_event</strong> (<em>uint64_t</em>) – UNIX timestamp (nanoseconds) when the order filled event occurred.</li>
<li><strong>info</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>object</em> <em>]</em> <em>,</em> <em>optional</em>) – The additional fill information.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="generate_order_modify_rejectedself-strategyid-strategy_id-instrumentid-instrument_id-clientorderid-client_order_id-venueorderid-venue_order_id-str-reason-uint64_t-ts_event--void">generate_order_modify_rejected(self, StrategyId strategy_id, InstrumentId instrument_id, ClientOrderId client_order_id, VenueOrderId venue_order_id, str reason, uint64_t ts_event) → void<a href="#generate_order_modify_rejectedself-strategyid-strategy_id-instrumentid-instrument_id-clientorderid-client_order_id-venueorderid-venue_order_id-str-reason-uint64_t-ts_event--void" class="hash-link" aria-label="Direct link to generate_order_modify_rejected(self, StrategyId strategy_id, InstrumentId instrument_id, ClientOrderId client_order_id, VenueOrderId venue_order_id, str reason, uint64_t ts_event) → void" title="Direct link to generate_order_modify_rejected(self, StrategyId strategy_id, InstrumentId instrument_id, ClientOrderId client_order_id, VenueOrderId venue_order_id, str reason, uint64_t ts_event) → void">​</a></h4>
<p>Generate an OrderModifyRejected event and send it to the ExecutionEngine.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>strategy_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.StrategyId"><em>StrategyId</em></a>) – The strategy ID associated with the event.</li>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument ID.</li>
<li><strong>client_order_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.ClientOrderId"><em>ClientOrderId</em></a>) – The client order ID.</li>
<li><strong>venue_order_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.VenueOrderId"><em>VenueOrderId</em></a>) – The venue order ID (assigned by the venue).</li>
<li><strong>reason</strong> (<em>str</em>) – The order update rejected reason.</li>
<li><strong>ts_event</strong> (<em>uint64_t</em>) – UNIX timestamp (nanoseconds) when the order update rejection event occurred.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="generate_order_rejectedself-strategyid-strategy_id-instrumentid-instrument_id-clientorderid-client_order_id-str-reason-uint64_t-ts_event--void">generate_order_rejected(self, StrategyId strategy_id, InstrumentId instrument_id, ClientOrderId client_order_id, str reason, uint64_t ts_event) → void<a href="#generate_order_rejectedself-strategyid-strategy_id-instrumentid-instrument_id-clientorderid-client_order_id-str-reason-uint64_t-ts_event--void" class="hash-link" aria-label="Direct link to generate_order_rejected(self, StrategyId strategy_id, InstrumentId instrument_id, ClientOrderId client_order_id, str reason, uint64_t ts_event) → void" title="Direct link to generate_order_rejected(self, StrategyId strategy_id, InstrumentId instrument_id, ClientOrderId client_order_id, str reason, uint64_t ts_event) → void">​</a></h4>
<p>Generate an OrderRejected event and send it to the ExecutionEngine.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>strategy_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.StrategyId"><em>StrategyId</em></a>) – The strategy ID associated with the event.</li>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument ID.</li>
<li><strong>client_order_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.ClientOrderId"><em>ClientOrderId</em></a>) – The client order ID.</li>
<li><strong>reason</strong> (<em>datetime</em>) – The order rejected reason.</li>
<li><strong>ts_event</strong> (<em>uint64_t</em>) – UNIX timestamp (nanoseconds) when the order rejected event occurred.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="generate_order_submittedself-strategyid-strategy_id-instrumentid-instrument_id-clientorderid-client_order_id-uint64_t-ts_event--void">generate_order_submitted(self, StrategyId strategy_id, InstrumentId instrument_id, ClientOrderId client_order_id, uint64_t ts_event) → void<a href="#generate_order_submittedself-strategyid-strategy_id-instrumentid-instrument_id-clientorderid-client_order_id-uint64_t-ts_event--void" class="hash-link" aria-label="Direct link to generate_order_submitted(self, StrategyId strategy_id, InstrumentId instrument_id, ClientOrderId client_order_id, uint64_t ts_event) → void" title="Direct link to generate_order_submitted(self, StrategyId strategy_id, InstrumentId instrument_id, ClientOrderId client_order_id, uint64_t ts_event) → void">​</a></h4>
<p>Generate an OrderSubmitted event and send it to the ExecutionEngine.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>strategy_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.StrategyId"><em>StrategyId</em></a>) – The strategy ID associated with the event.</li>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument ID.</li>
<li><strong>client_order_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.ClientOrderId"><em>ClientOrderId</em></a>) – The client order ID.</li>
<li><strong>ts_event</strong> (<em>uint64_t</em>) – UNIX timestamp (nanoseconds) when the order submitted event occurred.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="generate_order_triggeredself-strategyid-strategy_id-instrumentid-instrument_id-clientorderid-client_order_id-venueorderid-venue_order_id-uint64_t-ts_event--void">generate_order_triggered(self, StrategyId strategy_id, InstrumentId instrument_id, ClientOrderId client_order_id, VenueOrderId venue_order_id, uint64_t ts_event) → void<a href="#generate_order_triggeredself-strategyid-strategy_id-instrumentid-instrument_id-clientorderid-client_order_id-venueorderid-venue_order_id-uint64_t-ts_event--void" class="hash-link" aria-label="Direct link to generate_order_triggered(self, StrategyId strategy_id, InstrumentId instrument_id, ClientOrderId client_order_id, VenueOrderId venue_order_id, uint64_t ts_event) → void" title="Direct link to generate_order_triggered(self, StrategyId strategy_id, InstrumentId instrument_id, ClientOrderId client_order_id, VenueOrderId venue_order_id, uint64_t ts_event) → void">​</a></h4>
<p>Generate an OrderTriggered event and send it to the ExecutionEngine.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>strategy_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.StrategyId"><em>StrategyId</em></a>) – The strategy ID associated with the event.</li>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument ID.</li>
<li><strong>client_order_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.ClientOrderId"><em>ClientOrderId</em></a>) – The client order ID.</li>
<li><strong>venue_order_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.VenueOrderId"><em>VenueOrderId</em></a>) – The venue order ID (assigned by the venue).</li>
<li><strong>ts_event</strong> (<em>uint64_t</em>) – UNIX timestamp (nanoseconds) when the order triggered event occurred.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="generate_order_updatedself-strategyid-strategy_id-instrumentid-instrument_id-clientorderid-client_order_id-venueorderid-venue_order_id-quantity-quantity-price-price-price-trigger_price-uint64_t-ts_event-bool-venue_order_id_modifiedfalse--void">generate_order_updated(self, StrategyId strategy_id, InstrumentId instrument_id, ClientOrderId client_order_id, VenueOrderId venue_order_id, Quantity quantity, Price price, Price trigger_price, uint64_t ts_event, bool venue_order_id_modified=False) → void<a href="#generate_order_updatedself-strategyid-strategy_id-instrumentid-instrument_id-clientorderid-client_order_id-venueorderid-venue_order_id-quantity-quantity-price-price-price-trigger_price-uint64_t-ts_event-bool-venue_order_id_modifiedfalse--void" class="hash-link" aria-label="Direct link to generate_order_updated(self, StrategyId strategy_id, InstrumentId instrument_id, ClientOrderId client_order_id, VenueOrderId venue_order_id, Quantity quantity, Price price, Price trigger_price, uint64_t ts_event, bool venue_order_id_modified=False) → void" title="Direct link to generate_order_updated(self, StrategyId strategy_id, InstrumentId instrument_id, ClientOrderId client_order_id, VenueOrderId venue_order_id, Quantity quantity, Price price, Price trigger_price, uint64_t ts_event, bool venue_order_id_modified=False) → void">​</a></h4>
<p>Generate an OrderUpdated event and send it to the ExecutionEngine.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>strategy_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.StrategyId"><em>StrategyId</em></a>) – The strategy ID associated with the event.</li>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument ID.</li>
<li><strong>client_order_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.ClientOrderId"><em>ClientOrderId</em></a>) – The client order ID.</li>
<li><strong>venue_order_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.VenueOrderId"><em>VenueOrderId</em></a>) – The venue order ID (assigned by the venue).</li>
<li><strong>quantity</strong> (<a href="../model/index.htm#posei_trader.model.Quantity"><em>Quantity</em></a>) – The orders current quantity.</li>
<li><strong>price</strong> (<a href="../model/index.htm#posei_trader.model.Price"><em>Price</em></a>) – The orders current price.</li>
<li><strong>trigger_price</strong> (Price or <code>None</code>) – The orders current trigger price.</li>
<li><strong>ts_event</strong> (<em>uint64_t</em>) – UNIX timestamp (nanoseconds) when the order update event occurred.</li>
<li><strong>venue_order_id_modified</strong> (<em>bool</em>) – If the ID was modified for this event.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="get_accountself--account-1">get_account(self) → Account<a href="#get_accountself--account-1" class="hash-link" aria-label="Direct link to get_account(self) → Account" title="Direct link to get_account(self) → Account">​</a></h4>
<p>Return the account for the client (if registered).</p>
<ul>
<li><strong>Return type:</strong>
Account or <code>None</code></li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="id-3">id<a href="#id-3" class="hash-link" aria-label="Direct link to id" title="Direct link to id">​</a></h4>
<p>The components ID.</p>
<ul>
<li><strong>Returns:</strong>
ComponentId</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_connected-2">is_connected<a href="#is_connected-2" class="hash-link" aria-label="Direct link to is_connected" title="Direct link to is_connected">​</a></h4>
<p>If the client is connected.</p>
<ul>
<li><strong>Returns:</strong>
bool</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_degraded-2">is_degraded<a href="#is_degraded-2" class="hash-link" aria-label="Direct link to is_degraded" title="Direct link to is_degraded">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>DEGRADED</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_degraded</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_disposed-2">is_disposed<a href="#is_disposed-2" class="hash-link" aria-label="Direct link to is_disposed" title="Direct link to is_disposed">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>DISPOSED</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_disposed</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_faulted-2">is_faulted<a href="#is_faulted-2" class="hash-link" aria-label="Direct link to is_faulted" title="Direct link to is_faulted">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>FAULTED</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_faulted</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_initialized-2">is_initialized<a href="#is_initialized-2" class="hash-link" aria-label="Direct link to is_initialized" title="Direct link to is_initialized">​</a></h4>
<p>bool</p>
<p>Return whether the component has been initialized (component.state &gt;= <code>INITIALIZED</code>).</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_initialized</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_running-2">is_running<a href="#is_running-2" class="hash-link" aria-label="Direct link to is_running" title="Direct link to is_running">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>RUNNING</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_running</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_stopped-2">is_stopped<a href="#is_stopped-2" class="hash-link" aria-label="Direct link to is_stopped" title="Direct link to is_stopped">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>STOPPED</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_stopped</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="modify_orderself-modifyorder-command--void">modify_order(self, ModifyOrder command) → void<a href="#modify_orderself-modifyorder-command--void" class="hash-link" aria-label="Direct link to modify_order(self, ModifyOrder command) → void" title="Direct link to modify_order(self, ModifyOrder command) → void">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="oms_type-1">oms_type<a href="#oms_type-1" class="hash-link" aria-label="Direct link to oms_type" title="Direct link to oms_type">​</a></h4>
<p>The venues order management system type.</p>
<ul>
<li><strong>Returns:</strong>
OmsType</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="query_orderself-queryorder-command--void">query_order(self, QueryOrder command) → void<a href="#query_orderself-queryorder-command--void" class="hash-link" aria-label="Direct link to query_order(self, QueryOrder command) → void" title="Direct link to query_order(self, QueryOrder command) → void">​</a></h4>
<p>Initiate a reconciliation for the queried order which will generate an
OrderStatusReport.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>command</strong> (<a href="../execution/index.htm#posei_trader.execution.messages.QueryOrder"><em>QueryOrder</em></a>) – The command to execute.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="resetself--void-4">reset(self) → void<a href="#resetself--void-4" class="hash-link" aria-label="Direct link to reset(self) → void" title="Direct link to reset(self) → void">​</a></h4>
<p>Reset the component.</p>
<p>All stateful fields are reset to their initial value.</p>
<p>While executing on_reset() any exception will be logged and reraised, then the component
will remain in a <code>RESETTING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-19">WARNING<a href="#warning-19" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="resumeself--void-2">resume(self) → void<a href="#resumeself--void-2" class="hash-link" aria-label="Direct link to resume(self) → void" title="Direct link to resume(self) → void">​</a></h4>
<p>Resume the component.</p>
<p>While executing on_resume() any exception will be logged and reraised, then the component
will remain in a <code>RESUMING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-20">WARNING<a href="#warning-20" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="shutdown_systemself-str-reasonnone--void-2">shutdown_system(self, str reason=None) → void<a href="#shutdown_systemself-str-reasonnone--void-2" class="hash-link" aria-label="Direct link to shutdown_system(self, str reason=None) → void" title="Direct link to shutdown_system(self, str reason=None) → void">​</a></h4>
<p>Initiate a system-wide shutdown by generating and publishing a ShutdownSystem command.</p>
<p>The command is handled by the system’s PoseiKernel, which will invoke either stop (synchronously)
or stop_async (asynchronously) depending on the execution context and the presence of an active event loop.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>reason</strong> (<em>str</em> <em>,</em> <em>optional</em>) – The reason for issuing the shutdown command.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="startself--void-2">start(self) → void<a href="#startself--void-2" class="hash-link" aria-label="Direct link to start(self) → void" title="Direct link to start(self) → void">​</a></h4>
<p>Start the component.</p>
<p>While executing on_start() any exception will be logged and reraised, then the component
will remain in a <code>STARTING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-21">WARNING<a href="#warning-21" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="state-2">state<a href="#state-2" class="hash-link" aria-label="Direct link to state" title="Direct link to state">​</a></h4>
<p>ComponentState</p>
<p>Return the components current state.</p>
<ul>
<li><strong>Return type:</strong>
ComponentState</li>
<li><strong>Type:</strong>
Component.state</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="stopself--void-2">stop(self) → void<a href="#stopself--void-2" class="hash-link" aria-label="Direct link to stop(self) → void" title="Direct link to stop(self) → void">​</a></h4>
<p>Stop the component.</p>
<p>While executing on_stop() any exception will be logged and reraised, then the component
will remain in a <code>STOPPING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-22">WARNING<a href="#warning-22" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="submit_orderself-submitorder-command--void">submit_order(self, SubmitOrder command) → void<a href="#submit_orderself-submitorder-command--void" class="hash-link" aria-label="Direct link to submit_order(self, SubmitOrder command) → void" title="Direct link to submit_order(self, SubmitOrder command) → void">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="submit_order_listself-submitorderlist-command--void">submit_order_list(self, SubmitOrderList command) → void<a href="#submit_order_listself-submitorderlist-command--void" class="hash-link" aria-label="Direct link to submit_order_list(self, SubmitOrderList command) → void" title="Direct link to submit_order_list(self, SubmitOrderList command) → void">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="trader_id-3">trader_id<a href="#trader_id-3" class="hash-link" aria-label="Direct link to trader_id" title="Direct link to trader_id">​</a></h4>
<p>The trader ID associated with the component.</p>
<ul>
<li><strong>Returns:</strong>
TraderId</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="type-2">type<a href="#type-2" class="hash-link" aria-label="Direct link to type" title="Direct link to type">​</a></h4>
<p>The components type.</p>
<ul>
<li><strong>Returns:</strong>
type</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="venue-2">venue<a href="#venue-2" class="hash-link" aria-label="Direct link to venue" title="Direct link to venue">​</a></h4>
<p>The clients venue ID (if not a routing client).</p>
<ul>
<li><strong>Returns:</strong>
Venue or <code>None</code></li>
</ul>
<p><a id="module-posei_trader.backtest.models"></a></p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="class-feemodel"><em>class</em> FeeModel<a href="#class-feemodel" class="hash-link" aria-label="Direct link to class-feemodel" title="Direct link to class-feemodel">​</a></h3>
<p>Bases: <code>object</code></p>
<p>Provides an abstract fee model for trades.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="get_commissionself-order-order-quantity-fill_qty-price-fill_px-instrument-instrument--money">get_commission(self, Order order, Quantity fill_qty, Price fill_px, Instrument instrument) → <a href="../model/index.htm#posei_trader.model.Money">Money</a><a href="#get_commissionself-order-order-quantity-fill_qty-price-fill_px-instrument-instrument--money" class="hash-link" aria-label="Direct link to get_commissionself-order-order-quantity-fill_qty-price-fill_px-instrument-instrument--money" title="Direct link to get_commissionself-order-order-quantity-fill_qty-price-fill_px-instrument-instrument--money">​</a></h4>
<p>Return the commission for a trade.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>order</strong> (<a href="../model/orders/index.htm#posei_trader.model.orders.Order"><em>Order</em></a>) – The order to calculate the commission for.</li>
<li><strong>fill_qty</strong> (<a href="../model/index.htm#posei_trader.model.Quantity"><em>Quantity</em></a>) – The fill quantity of the order.</li>
<li><strong>fill_px</strong> (<a href="../model/index.htm#posei_trader.model.Price"><em>Price</em></a>) – The fill price of the order.</li>
<li><strong>instrument</strong> (<a href="../model/instruments/index.htm#posei_trader.model.instruments.Instrument"><em>Instrument</em></a>) – The instrument for the order.</li>
</ul>
</li>
<li><strong>Return type:</strong>
<a href="../model/index.htm#posei_trader.model.Money">Money</a></li>
</ul>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="class-fillmodel"><em>class</em> FillModel<a href="#class-fillmodel" class="hash-link" aria-label="Direct link to class-fillmodel" title="Direct link to class-fillmodel">​</a></h3>
<p>Bases: <code>object</code></p>
<p>FillModel(double prob_fill_on_limit=1.0, double prob_fill_on_stop=1.0, double prob_slippage=0.0, int random_seed: int | None = None, config=None) -&gt; None</p>
<p>Provides probabilistic modeling for order fill dynamics including probability
of fills and slippage by order type.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>prob_fill_on_limit</strong> (<em>double</em>) – The probability of limit order filling if the market rests on its price.</li>
<li><strong>prob_fill_on_stop</strong> (<em>double</em>) – The probability of stop orders filling if the market rests on its price.</li>
<li><strong>prob_slippage</strong> (<em>double</em>) – The probability of order fill prices slipping by one tick.</li>
<li><strong>random_seed</strong> (<em>int</em> <em>,</em> <em>optional</em>) – The random seed (if None then no random seed).</li>
<li><strong>config</strong> (<a href="../config/index.htm#posei_trader.backtest.config.FillModelConfig"><em>FillModelConfig</em></a> <em>,</em> <em>optional</em>) – The configuration for the model.</li>
</ul>
</li>
<li><strong>Raises:</strong>
<ul>
<li><strong>ValueError</strong> – If any probability argument is not within range [0, 1].</li>
<li><strong>TypeError</strong> – If random_seed is not None and not of type int.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_limit_filledself--bool">is_limit_filled(self) → bool<a href="#is_limit_filledself--bool" class="hash-link" aria-label="Direct link to is_limit_filled(self) → bool" title="Direct link to is_limit_filled(self) → bool">​</a></h4>
<p>Return a value indicating whether a <code>LIMIT</code> order filled.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_slippedself--bool">is_slipped(self) → bool<a href="#is_slippedself--bool" class="hash-link" aria-label="Direct link to is_slipped(self) → bool" title="Direct link to is_slipped(self) → bool">​</a></h4>
<p>Return a value indicating whether an order fill slipped.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_stop_filledself--bool">is_stop_filled(self) → bool<a href="#is_stop_filledself--bool" class="hash-link" aria-label="Direct link to is_stop_filled(self) → bool" title="Direct link to is_stop_filled(self) → bool">​</a></h4>
<p>Return a value indicating whether a <code>STOP-MARKET</code> order filled.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="prob_fill_on_limit">prob_fill_on_limit<a href="#prob_fill_on_limit" class="hash-link" aria-label="Direct link to prob_fill_on_limit" title="Direct link to prob_fill_on_limit">​</a></h4>
<p>The probability of limit orders filling on the limit price.</p>
<ul>
<li><strong>Returns:</strong>
bool</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="prob_fill_on_stop">prob_fill_on_stop<a href="#prob_fill_on_stop" class="hash-link" aria-label="Direct link to prob_fill_on_stop" title="Direct link to prob_fill_on_stop">​</a></h4>
<p>The probability of stop orders filling on the stop price.</p>
<ul>
<li><strong>Returns:</strong>
bool</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="prob_slippage">prob_slippage<a href="#prob_slippage" class="hash-link" aria-label="Direct link to prob_slippage" title="Direct link to prob_slippage">​</a></h4>
<p>The probability of aggressive order execution slipping.</p>
<ul>
<li><strong>Returns:</strong>
bool</li>
</ul>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="class-fixedfeemodel"><em>class</em> FixedFeeModel<a href="#class-fixedfeemodel" class="hash-link" aria-label="Direct link to class-fixedfeemodel" title="Direct link to class-fixedfeemodel">​</a></h3>
<p>Bases: <a href="#posei_trader.backtest.models.FeeModel"><code>FeeModel</code></a></p>
<p>FixedFeeModel(Money commission=None, bool charge_commission_once: bool = True, config=None) -&gt; None</p>
<p>Provides a fixed fee model for trades.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>commission</strong> (<a href="../model/index.htm#posei_trader.model.Money"><em>Money</em></a> <em>,</em> <em>optional</em>) – The fixed commission amount for trades.</li>
<li><strong>charge_commission_once</strong> (<em>bool</em> <em>,</em> <em>default True</em>) – Whether to charge the commission once per order or per fill.</li>
<li><strong>config</strong> (<a href="../config/index.htm#posei_trader.backtest.config.FixedFeeModelConfig"><em>FixedFeeModelConfig</em></a> <em>,</em> <em>optional</em>) – The configuration for the model.</li>
</ul>
</li>
<li><strong>Raises:</strong>
<ul>
<li><strong>ValueError</strong> – If both <code>commission</code> <strong>and</strong> <code>config</code> are provided, <strong>or</strong> if both are <code>None</code> (exactly one must be supplied).</li>
<li><strong>ValueError</strong> – If commission is not a positive amount.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="get_commissionself-order-order-quantity-fill_qty-price-fill_px-instrument-instrument--money-1">get_commission(self, Order order, Quantity fill_qty, Price fill_px, Instrument instrument) → <a href="../model/index.htm#posei_trader.model.Money">Money</a><a href="#get_commissionself-order-order-quantity-fill_qty-price-fill_px-instrument-instrument--money-1" class="hash-link" aria-label="Direct link to get_commissionself-order-order-quantity-fill_qty-price-fill_px-instrument-instrument--money-1" title="Direct link to get_commissionself-order-order-quantity-fill_qty-price-fill_px-instrument-instrument--money-1">​</a></h4>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="class-latencymodel"><em>class</em> LatencyModel<a href="#class-latencymodel" class="hash-link" aria-label="Direct link to class-latencymodel" title="Direct link to class-latencymodel">​</a></h3>
<p>Bases: <code>object</code></p>
<p>LatencyModel(uint64_t base_latency_nanos=NANOSECONDS_IN_MILLISECOND, uint64_t insert_latency_nanos=0, uint64_t update_latency_nanos=0, uint64_t cancel_latency_nanos=0, config=None) -&gt; None</p>
<p>Provides a latency model for simulated exchange message I/O.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>base_latency_nanos</strong> (<em>int</em> <em>,</em> <em>default 1_000_000_000</em>) – The base latency (nanoseconds) for the model.</li>
<li><strong>insert_latency_nanos</strong> (<em>int</em> <em>,</em> <em>default 0</em>) – The order insert latency (nanoseconds) for the model.</li>
<li><strong>update_latency_nanos</strong> (<em>int</em> <em>,</em> <em>default 0</em>) – The order update latency (nanoseconds) for the model.</li>
<li><strong>cancel_latency_nanos</strong> (<em>int</em> <em>,</em> <em>default 0</em>) – The order cancel latency (nanoseconds) for the model.</li>
<li><strong>config</strong> (<a href="../config/index.htm#posei_trader.backtest.config.FillModelConfig"><em>FillModelConfig</em></a> <em>,</em> <em>optional</em>) – The configuration for the model.</li>
</ul>
</li>
<li><strong>Raises:</strong>
<ul>
<li><strong>ValueError</strong> – If base_latency_nanos is negative (&lt; 0).</li>
<li><strong>ValueError</strong> – If insert_latency_nanos is negative (&lt; 0).</li>
<li><strong>ValueError</strong> – If update_latency_nanos is negative (&lt; 0).</li>
<li><strong>ValueError</strong> – If cancel_latency_nanos is negative (&lt; 0).</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="base_latency_nanos">base_latency_nanos<a href="#base_latency_nanos" class="hash-link" aria-label="Direct link to base_latency_nanos" title="Direct link to base_latency_nanos">​</a></h4>
<p>The default latency to the exchange.</p>
<ul>
<li><strong>Returns:</strong>
int</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="cancel_latency_nanos">cancel_latency_nanos<a href="#cancel_latency_nanos" class="hash-link" aria-label="Direct link to cancel_latency_nanos" title="Direct link to cancel_latency_nanos">​</a></h4>
<p>The latency (nanoseconds) for order cancel messages to reach the exchange.</p>
<ul>
<li><strong>Returns:</strong>
int</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="insert_latency_nanos">insert_latency_nanos<a href="#insert_latency_nanos" class="hash-link" aria-label="Direct link to insert_latency_nanos" title="Direct link to insert_latency_nanos">​</a></h4>
<p>The latency (nanoseconds) for order insert messages to reach the exchange.</p>
<ul>
<li><strong>Returns:</strong>
int</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="update_latency_nanos">update_latency_nanos<a href="#update_latency_nanos" class="hash-link" aria-label="Direct link to update_latency_nanos" title="Direct link to update_latency_nanos">​</a></h4>
<p>The latency (nanoseconds) for order update messages to reach the exchange.</p>
<ul>
<li><strong>Returns:</strong>
int</li>
</ul>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="class-makertakerfeemodel"><em>class</em> MakerTakerFeeModel<a href="#class-makertakerfeemodel" class="hash-link" aria-label="Direct link to class-makertakerfeemodel" title="Direct link to class-makertakerfeemodel">​</a></h3>
<p>Bases: <a href="#posei_trader.backtest.models.FeeModel"><code>FeeModel</code></a></p>
<p>MakerTakerFeeModel(config=None) -&gt; None</p>
<p>Provide a fee model for trades based on a maker/taker fee schedule
and notional value of the trade.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>config</strong> (<a href="../config/index.htm#posei_trader.backtest.config.MakerTakerFeeModelConfig"><em>MakerTakerFeeModelConfig</em></a> <em>,</em> <em>optional</em>) – The configuration for the fee model.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="get_commissionself-order-order-quantity-fill_qty-price-fill_px-instrument-instrument--money-2">get_commission(self, Order order, Quantity fill_qty, Price fill_px, Instrument instrument) → <a href="../model/index.htm#posei_trader.model.Money">Money</a><a href="#get_commissionself-order-order-quantity-fill_qty-price-fill_px-instrument-instrument--money-2" class="hash-link" aria-label="Direct link to get_commissionself-order-order-quantity-fill_qty-price-fill_px-instrument-instrument--money-2" title="Direct link to get_commissionself-order-order-quantity-fill_qty-price-fill_px-instrument-instrument--money-2">​</a></h4>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="class-percontractfeemodel"><em>class</em> PerContractFeeModel<a href="#class-percontractfeemodel" class="hash-link" aria-label="Direct link to class-percontractfeemodel" title="Direct link to class-percontractfeemodel">​</a></h3>
<p>Bases: <a href="#posei_trader.backtest.models.FeeModel"><code>FeeModel</code></a></p>
<p>PerContractFeeModel(Money commission=None, config=None) -&gt; None</p>
<p>Provides a fee model which charges a commission per contract traded.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>commission</strong> (<a href="../model/index.htm#posei_trader.model.Money"><em>Money</em></a> <em>,</em> <em>optional</em>) – The commission amount per contract.</li>
<li><strong>config</strong> (<a href="../config/index.htm#posei_trader.backtest.config.PerContractFeeModelConfig"><em>PerContractFeeModelConfig</em></a> <em>,</em> <em>optional</em>) – The configuration for the model.</li>
</ul>
</li>
<li><strong>Raises:</strong>
<ul>
<li><strong>ValueError</strong> – If both <code>commission</code> <strong>and</strong> <code>config</code> are provided, <strong>or</strong> if both are <code>None</code> (exactly one must be supplied).</li>
<li><strong>ValueError</strong> – If commission is negative (&lt; 0).</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="get_commissionself-order-order-quantity-fill_qty-price-fill_px-instrument-instrument--money-3">get_commission(self, Order order, Quantity fill_qty, Price fill_px, Instrument instrument) → <a href="../model/index.htm#posei_trader.model.Money">Money</a><a href="#get_commissionself-order-order-quantity-fill_qty-price-fill_px-instrument-instrument--money-3" class="hash-link" aria-label="Direct link to get_commissionself-order-order-quantity-fill_qty-price-fill_px-instrument-instrument--money-3" title="Direct link to get_commissionself-order-order-quantity-fill_qty-price-fill_px-instrument-instrument--money-3">​</a></h4>
<p><a id="module-posei_trader.backtest.modules"></a></p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="class-fxrolloverinterestmodule"><em>class</em> FXRolloverInterestModule<a href="#class-fxrolloverinterestmodule" class="hash-link" aria-label="Direct link to class-fxrolloverinterestmodule" title="Direct link to class-fxrolloverinterestmodule">​</a></h3>
<p>Bases: <a href="#posei_trader.backtest.modules.SimulationModule"><code>SimulationModule</code></a></p>
<p>FXRolloverInterestModule(config: FXRolloverInterestConfig)</p>
<p>Provides an FX rollover interest simulation module.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>config</strong> (<a href="../config/index.htm#posei_trader.backtest.config.FXRolloverInterestConfig"><em>FXRolloverInterestConfig</em></a>)</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="active_task_idsself--list">active_task_ids(self) → list<a href="#active_task_idsself--list" class="hash-link" aria-label="Direct link to active_task_ids(self) → list" title="Direct link to active_task_ids(self) → list">​</a></h4>
<p>Return the active task identifiers.</p>
<ul>
<li><strong>Return type:</strong>
list[<a href="../common/index.htm#posei_trader.common.executor.TaskId">TaskId</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="add_syntheticself-syntheticinstrument-synthetic--void">add_synthetic(self, SyntheticInstrument synthetic) → void<a href="#add_syntheticself-syntheticinstrument-synthetic--void" class="hash-link" aria-label="Direct link to add_synthetic(self, SyntheticInstrument synthetic) → void" title="Direct link to add_synthetic(self, SyntheticInstrument synthetic) → void">​</a></h4>
<p>Add the created synthetic instrument to the cache.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>synthetic</strong> (<a href="../model/instruments/index.htm#posei_trader.model.instruments.SyntheticInstrument"><em>SyntheticInstrument</em></a>) – The synthetic instrument to add to the cache.</li>
<li><strong>Raises:</strong>
<strong>KeyError</strong> – If synthetic is already in the cache.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="cache-2">cache<a href="#cache-2" class="hash-link" aria-label="Direct link to cache" title="Direct link to cache">​</a></h4>
<p>The read-only cache for the actor.</p>
<ul>
<li><strong>Returns:</strong>
CacheFacade</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="cancel_all_tasksself--void">cancel_all_tasks(self) → void<a href="#cancel_all_tasksself--void" class="hash-link" aria-label="Direct link to cancel_all_tasks(self) → void" title="Direct link to cancel_all_tasks(self) → void">​</a></h4>
<p>Cancel all queued and active tasks.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="cancel_taskself-task_id-taskid--void">cancel_task(self, task_id: <a href="../common/index.htm#posei_trader.common.executor.TaskId">TaskId</a>) → void<a href="#cancel_taskself-task_id-taskid--void" class="hash-link" aria-label="Direct link to cancel_taskself-task_id-taskid--void" title="Direct link to cancel_taskself-task_id-taskid--void">​</a></h4>
<p>Cancel the task with the given task_id (if queued or active).</p>
<p>If the task is not found then a warning is logged.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>task_id</strong> (<a href="../common/index.htm#posei_trader.common.executor.TaskId"><em>TaskId</em></a>) – The task identifier.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="clock">clock<a href="#clock" class="hash-link" aria-label="Direct link to clock" title="Direct link to clock">​</a></h4>
<p>The actors clock.</p>
<ul>
<li><strong>Returns:</strong>
Clock</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="config">config<a href="#config" class="hash-link" aria-label="Direct link to config" title="Direct link to config">​</a></h4>
<p>The actors configuration.</p>
<ul>
<li><strong>Returns:</strong>
PoseiConfig</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="degradeself--void-3">degrade(self) → void<a href="#degradeself--void-3" class="hash-link" aria-label="Direct link to degrade(self) → void" title="Direct link to degrade(self) → void">​</a></h4>
<p>Degrade the component.</p>
<p>While executing on_degrade() any exception will be logged and reraised, then the component
will remain in a <code>DEGRADING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-23">WARNING<a href="#warning-23" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="deregister_warning_eventself-type-event--void">deregister_warning_event(self, type event) → void<a href="#deregister_warning_eventself-type-event--void" class="hash-link" aria-label="Direct link to deregister_warning_event(self, type event) → void" title="Direct link to deregister_warning_event(self, type event) → void">​</a></h4>
<p>Deregister the given event type from warning log levels.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>event</strong> (<em>type</em>) – The event class to deregister.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="disposeself--void-3">dispose(self) → void<a href="#disposeself--void-3" class="hash-link" aria-label="Direct link to dispose(self) → void" title="Direct link to dispose(self) → void">​</a></h4>
<p>Dispose of the component.</p>
<p>While executing on_dispose() any exception will be logged and reraised, then the component
will remain in a <code>DISPOSING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-24">WARNING<a href="#warning-24" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="exchange">exchange<a href="#exchange" class="hash-link" aria-label="Direct link to exchange" title="Direct link to exchange">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="faultself--void-3">fault(self) → void<a href="#faultself--void-3" class="hash-link" aria-label="Direct link to fault(self) → void" title="Direct link to fault(self) → void">​</a></h4>
<p>Fault the component.</p>
<p>Calling this method multiple times has the same effect as calling it once (it is idempotent).
Once called, it cannot be reversed, and no other methods should be called on this instance.</p>
<p>While executing on_fault() any exception will be logged and reraised, then the component
will remain in a <code>FAULTING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-25">WARNING<a href="#warning-25" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="classmethod-fully_qualified_namecls--str-3"><em>classmethod</em> fully_qualified_name(cls) → str<a href="#classmethod-fully_qualified_namecls--str-3" class="hash-link" aria-label="Direct link to classmethod-fully_qualified_namecls--str-3" title="Direct link to classmethod-fully_qualified_namecls--str-3">​</a></h4>
<p>Return the fully qualified name for the components class.</p>
<ul>
<li><strong>Return type:</strong>
str</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="greeks">greeks<a href="#greeks" class="hash-link" aria-label="Direct link to greeks" title="Direct link to greeks">​</a></h4>
<p>The read-only greeks calculator for the actor.</p>
<ul>
<li><strong>Returns:</strong>
GreeksCalculator</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_barself-bar-bar--void">handle_bar(self, Bar bar) → void<a href="#handle_barself-bar-bar--void" class="hash-link" aria-label="Direct link to handle_bar(self, Bar bar) → void" title="Direct link to handle_bar(self, Bar bar) → void">​</a></h4>
<p>Handle the given bar data.</p>
<p>If state is <code>RUNNING</code> then passes to on_bar.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>bar</strong> (<a href="../model/data/index.htm#posei_trader.model.data.Bar"><em>Bar</em></a>) – The bar received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-26">WARNING<a href="#warning-26" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_barsself-list-bars--void">handle_bars(self, list bars) → void<a href="#handle_barsself-list-bars--void" class="hash-link" aria-label="Direct link to handle_bars(self, list bars) → void" title="Direct link to handle_bars(self, list bars) → void">​</a></h4>
<p>Handle the given historical bar data by handling each bar individually.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>bars</strong> (<em>list</em> <em>[</em><a href="../model/data/index.htm#posei_trader.model.data.Bar"><em>Bar</em></a> <em>]</em>) – The bars to handle.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-27">WARNING<a href="#warning-27" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<ul>
<li><strong>Raises:</strong>
<strong>RuntimeError</strong> – If bar data has incorrectly sorted timestamps (not monotonically increasing).</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_dataself-data-data--void">handle_data(self, Data data) → void<a href="#handle_dataself-data-data--void" class="hash-link" aria-label="Direct link to handle_data(self, Data data) → void" title="Direct link to handle_data(self, Data data) → void">​</a></h4>
<p>Handle the given data.</p>
<p>If state is <code>RUNNING</code> then passes to on_data.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>data</strong> (<a href="../core/index.htm#posei_trader.core.Data"><em>Data</em></a>) – The data received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-28">WARNING<a href="#warning-28" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_eventself-event-event--void">handle_event(self, Event event) → void<a href="#handle_eventself-event-event--void" class="hash-link" aria-label="Direct link to handle_event(self, Event event) → void" title="Direct link to handle_event(self, Event event) → void">​</a></h4>
<p>Handle the given event.</p>
<p>If state is <code>RUNNING</code> then passes to on_event.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>event</strong> (<a href="../core/index.htm#posei_trader.core.Event"><em>Event</em></a>) – The event received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-29">WARNING<a href="#warning-29" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_historical_dataself-data--void">handle_historical_data(self, data) → void<a href="#handle_historical_dataself-data--void" class="hash-link" aria-label="Direct link to handle_historical_data(self, data) → void" title="Direct link to handle_historical_data(self, data) → void">​</a></h4>
<p>Handle the given historical data.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>data</strong> (<a href="../core/index.htm#posei_trader.core.Data"><em>Data</em></a>) – The historical data received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-30">WARNING<a href="#warning-30" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_index_priceself-indexpriceupdate-index_price--void">handle_index_price(self, IndexPriceUpdate index_price) → void<a href="#handle_index_priceself-indexpriceupdate-index_price--void" class="hash-link" aria-label="Direct link to handle_index_price(self, IndexPriceUpdate index_price) → void" title="Direct link to handle_index_price(self, IndexPriceUpdate index_price) → void">​</a></h4>
<p>Handle the given index price update.</p>
<p>If state is <code>RUNNING</code> then passes to on_index_price.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>index_price</strong> (<a href="../model/data/index.htm#posei_trader.model.data.IndexPriceUpdate"><em>IndexPriceUpdate</em></a>) – The index price update received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-31">WARNING<a href="#warning-31" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_instrumentself-instrument-instrument--void">handle_instrument(self, Instrument instrument) → void<a href="#handle_instrumentself-instrument-instrument--void" class="hash-link" aria-label="Direct link to handle_instrument(self, Instrument instrument) → void" title="Direct link to handle_instrument(self, Instrument instrument) → void">​</a></h4>
<p>Handle the given instrument.</p>
<p>Passes to on_instrument if state is <code>RUNNING</code>.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>instrument</strong> (<a href="../model/instruments/index.htm#posei_trader.model.instruments.Instrument"><em>Instrument</em></a>) – The instrument received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-32">WARNING<a href="#warning-32" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_instrument_closeself-instrumentclose-update--void">handle_instrument_close(self, InstrumentClose update) → void<a href="#handle_instrument_closeself-instrumentclose-update--void" class="hash-link" aria-label="Direct link to handle_instrument_close(self, InstrumentClose update) → void" title="Direct link to handle_instrument_close(self, InstrumentClose update) → void">​</a></h4>
<p>Handle the given instrument close update.</p>
<p>If state is <code>RUNNING</code> then passes to on_instrument_close.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>update</strong> (<a href="../model/data/index.htm#posei_trader.model.data.InstrumentClose"><em>InstrumentClose</em></a>) – The update received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-33">WARNING<a href="#warning-33" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_instrument_statusself-instrumentstatus-data--void">handle_instrument_status(self, InstrumentStatus data) → void<a href="#handle_instrument_statusself-instrumentstatus-data--void" class="hash-link" aria-label="Direct link to handle_instrument_status(self, InstrumentStatus data) → void" title="Direct link to handle_instrument_status(self, InstrumentStatus data) → void">​</a></h4>
<p>Handle the given instrument status update.</p>
<p>If state is <code>RUNNING</code> then passes to on_instrument_status.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>data</strong> (<a href="../model/data/index.htm#posei_trader.model.data.InstrumentStatus"><em>InstrumentStatus</em></a>) – The status update received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-34">WARNING<a href="#warning-34" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_instrumentsself-list-instruments--void">handle_instruments(self, list instruments) → void<a href="#handle_instrumentsself-list-instruments--void" class="hash-link" aria-label="Direct link to handle_instruments(self, list instruments) → void" title="Direct link to handle_instruments(self, list instruments) → void">​</a></h4>
<p>Handle the given instruments data by handling each instrument individually.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>instruments</strong> (<em>list</em> <em>[</em><a href="../model/instruments/index.htm#posei_trader.model.instruments.Instrument"><em>Instrument</em></a> <em>]</em>) – The instruments received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-35">WARNING<a href="#warning-35" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_mark_priceself-markpriceupdate-mark_price--void">handle_mark_price(self, MarkPriceUpdate mark_price) → void<a href="#handle_mark_priceself-markpriceupdate-mark_price--void" class="hash-link" aria-label="Direct link to handle_mark_price(self, MarkPriceUpdate mark_price) → void" title="Direct link to handle_mark_price(self, MarkPriceUpdate mark_price) → void">​</a></h4>
<p>Handle the given mark price update.</p>
<p>If state is <code>RUNNING</code> then passes to on_mark_price.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>mark_price</strong> (<a href="../model/data/index.htm#posei_trader.model.data.MarkPriceUpdate"><em>MarkPriceUpdate</em></a>) – The mark price update received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-36">WARNING<a href="#warning-36" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_order_bookself-orderbook-order_book--void">handle_order_book(self, OrderBook order_book) → void<a href="#handle_order_bookself-orderbook-order_book--void" class="hash-link" aria-label="Direct link to handle_order_book(self, OrderBook order_book) → void" title="Direct link to handle_order_book(self, OrderBook order_book) → void">​</a></h4>
<p>Handle the given order book.</p>
<p>Passes to on_order_book if state is <code>RUNNING</code>.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>order_book</strong> (<a href="../model/book/index.htm#posei_trader.model.book.OrderBook"><em>OrderBook</em></a>) – The order book received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-37">WARNING<a href="#warning-37" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_order_book_deltasself-deltas--void">handle_order_book_deltas(self, deltas) → void<a href="#handle_order_book_deltasself-deltas--void" class="hash-link" aria-label="Direct link to handle_order_book_deltas(self, deltas) → void" title="Direct link to handle_order_book_deltas(self, deltas) → void">​</a></h4>
<p>Handle the given order book deltas.</p>
<p>Passes to on_order_book_deltas if state is <code>RUNNING</code>.
The deltas will be nautilus_pyo3.OrderBookDeltas if the
pyo3_conversion flag was set for the subscription.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>deltas</strong> (<a href="../model/data/index.htm#posei_trader.model.data.OrderBookDeltas"><em>OrderBookDeltas</em></a> <em>or</em> <em>nautilus_pyo3.OrderBookDeltas</em>) – The order book deltas received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-38">WARNING<a href="#warning-38" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_order_book_depthself-orderbookdepth10-depth--void">handle_order_book_depth(self, OrderBookDepth10 depth) → void<a href="#handle_order_book_depthself-orderbookdepth10-depth--void" class="hash-link" aria-label="Direct link to handle_order_book_depth(self, OrderBookDepth10 depth) → void" title="Direct link to handle_order_book_depth(self, OrderBookDepth10 depth) → void">​</a></h4>
<p>Handle the given order book depth</p>
<p>Passes to on_order_book_depth if state is <code>RUNNING</code>.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>depth</strong> (<a href="../model/data/index.htm#posei_trader.model.data.OrderBookDepth10"><em>OrderBookDepth10</em></a>) – The order book depth received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-39">WARNING<a href="#warning-39" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_quote_tickself-quotetick-tick--void">handle_quote_tick(self, QuoteTick tick) → void<a href="#handle_quote_tickself-quotetick-tick--void" class="hash-link" aria-label="Direct link to handle_quote_tick(self, QuoteTick tick) → void" title="Direct link to handle_quote_tick(self, QuoteTick tick) → void">​</a></h4>
<p>Handle the given quote tick.</p>
<p>If state is <code>RUNNING</code> then passes to on_quote_tick.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>tick</strong> (<a href="../model/data/index.htm#posei_trader.model.data.QuoteTick"><em>QuoteTick</em></a>) – The tick received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-40">WARNING<a href="#warning-40" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_quote_ticksself-list-ticks--void">handle_quote_ticks(self, list ticks) → void<a href="#handle_quote_ticksself-list-ticks--void" class="hash-link" aria-label="Direct link to handle_quote_ticks(self, list ticks) → void" title="Direct link to handle_quote_ticks(self, list ticks) → void">​</a></h4>
<p>Handle the given historical quote tick data by handling each tick individually.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>ticks</strong> (<em>list</em> <em>[</em><a href="../model/data/index.htm#posei_trader.model.data.QuoteTick"><em>QuoteTick</em></a> <em>]</em>) – The ticks received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-41">WARNING<a href="#warning-41" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_signalself-data-signal--void">handle_signal(self, Data signal) → void<a href="#handle_signalself-data-signal--void" class="hash-link" aria-label="Direct link to handle_signal(self, Data signal) → void" title="Direct link to handle_signal(self, Data signal) → void">​</a></h4>
<p>Handle the given signal.</p>
<p>If state is <code>RUNNING</code> then passes to on_signal.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>signal</strong> (<a href="../core/index.htm#posei_trader.core.Data"><em>Data</em></a>) – The signal received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-42">WARNING<a href="#warning-42" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_trade_tickself-tradetick-tick--void">handle_trade_tick(self, TradeTick tick) → void<a href="#handle_trade_tickself-tradetick-tick--void" class="hash-link" aria-label="Direct link to handle_trade_tick(self, TradeTick tick) → void" title="Direct link to handle_trade_tick(self, TradeTick tick) → void">​</a></h4>
<p>Handle the given trade tick.</p>
<p>If state is <code>RUNNING</code> then passes to on_trade_tick.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>tick</strong> (<a href="../model/data/index.htm#posei_trader.model.data.TradeTick"><em>TradeTick</em></a>) – The tick received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-43">WARNING<a href="#warning-43" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_trade_ticksself-list-ticks--void">handle_trade_ticks(self, list ticks) → void<a href="#handle_trade_ticksself-list-ticks--void" class="hash-link" aria-label="Direct link to handle_trade_ticks(self, list ticks) → void" title="Direct link to handle_trade_ticks(self, list ticks) → void">​</a></h4>
<p>Handle the given historical trade tick data by handling each tick individually.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>ticks</strong> (<em>list</em> <em>[</em><a href="../model/data/index.htm#posei_trader.model.data.TradeTick"><em>TradeTick</em></a> <em>]</em>) – The ticks received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-44">WARNING<a href="#warning-44" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="has_active_tasksself--bool">has_active_tasks(self) → bool<a href="#has_active_tasksself--bool" class="hash-link" aria-label="Direct link to has_active_tasks(self) → bool" title="Direct link to has_active_tasks(self) → bool">​</a></h4>
<p>Return a value indicating whether there are any active tasks.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="has_any_tasksself--bool">has_any_tasks(self) → bool<a href="#has_any_tasksself--bool" class="hash-link" aria-label="Direct link to has_any_tasks(self) → bool" title="Direct link to has_any_tasks(self) → bool">​</a></h4>
<p>Return a value indicating whether there are any queued OR active tasks.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="has_pending_requestsself--bool">has_pending_requests(self) → bool<a href="#has_pending_requestsself--bool" class="hash-link" aria-label="Direct link to has_pending_requests(self) → bool" title="Direct link to has_pending_requests(self) → bool">​</a></h4>
<p>Return whether the actor is pending processing for any requests.</p>
<ul>
<li><strong>Returns:</strong>
True if any requests are pending, else False.</li>
<li><strong>Return type:</strong>
bool</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="has_queued_tasksself--bool">has_queued_tasks(self) → bool<a href="#has_queued_tasksself--bool" class="hash-link" aria-label="Direct link to has_queued_tasks(self) → bool" title="Direct link to has_queued_tasks(self) → bool">​</a></h4>
<p>Return a value indicating whether there are any queued tasks.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="id-4">id<a href="#id-4" class="hash-link" aria-label="Direct link to id" title="Direct link to id">​</a></h4>
<p>The components ID.</p>
<ul>
<li><strong>Returns:</strong>
ComponentId</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="indicators_initializedself--bool">indicators_initialized(self) → bool<a href="#indicators_initializedself--bool" class="hash-link" aria-label="Direct link to indicators_initialized(self) → bool" title="Direct link to indicators_initialized(self) → bool">​</a></h4>
<p>Return a value indicating whether all indicators are initialized.</p>
<ul>
<li><strong>Returns:</strong>
True if all initialized, else False</li>
<li><strong>Return type:</strong>
bool</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_degraded-3">is_degraded<a href="#is_degraded-3" class="hash-link" aria-label="Direct link to is_degraded" title="Direct link to is_degraded">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>DEGRADED</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_degraded</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_disposed-3">is_disposed<a href="#is_disposed-3" class="hash-link" aria-label="Direct link to is_disposed" title="Direct link to is_disposed">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>DISPOSED</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_disposed</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_faulted-3">is_faulted<a href="#is_faulted-3" class="hash-link" aria-label="Direct link to is_faulted" title="Direct link to is_faulted">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>FAULTED</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_faulted</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_initialized-3">is_initialized<a href="#is_initialized-3" class="hash-link" aria-label="Direct link to is_initialized" title="Direct link to is_initialized">​</a></h4>
<p>bool</p>
<p>Return whether the component has been initialized (component.state &gt;= <code>INITIALIZED</code>).</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_initialized</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_pending_requestself-uuid4-request_id--bool">is_pending_request(self, UUID4 request_id) → bool<a href="#is_pending_requestself-uuid4-request_id--bool" class="hash-link" aria-label="Direct link to is_pending_request(self, UUID4 request_id) → bool" title="Direct link to is_pending_request(self, UUID4 request_id) → bool">​</a></h4>
<p>Return whether the request for the given identifier is pending processing.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>request_id</strong> (<a href="../core/index.htm#posei_trader.core.UUID4"><em>UUID4</em></a>) – The request ID to check.</li>
<li><strong>Returns:</strong>
True if request is pending, else False.</li>
<li><strong>Return type:</strong>
bool</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_running-3">is_running<a href="#is_running-3" class="hash-link" aria-label="Direct link to is_running" title="Direct link to is_running">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>RUNNING</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_running</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_stopped-3">is_stopped<a href="#is_stopped-3" class="hash-link" aria-label="Direct link to is_stopped" title="Direct link to is_stopped">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>STOPPED</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_stopped</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="loadself-dict-state--void">load(self, dict state) → void<a href="#loadself-dict-state--void" class="hash-link" aria-label="Direct link to load(self, dict state) → void" title="Direct link to load(self, dict state) → void">​</a></h4>
<p>Load the actor/strategy state from the give state dictionary.</p>
<p>Calls on_load and passes the state.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>state</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>bytes</em> <em>]</em>) – The strategy state to load.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-45">WARNING<a href="#warning-45" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Exceptions raised will be caught, logged, and reraised.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="log">log<a href="#log" class="hash-link" aria-label="Direct link to log" title="Direct link to log">​</a></h4>
<p>The actors logger.</p>
<ul>
<li><strong>Returns:</strong>
Logger</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="log_diagnosticsself-logger-logger--void">log_diagnostics(self, Logger logger) → void<a href="#log_diagnosticsself-logger-logger--void" class="hash-link" aria-label="Direct link to log_diagnostics(self, Logger logger) → void" title="Direct link to log_diagnostics(self, Logger logger) → void">​</a></h4>
<p>Log diagnostics out to the BacktestEngine logger.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>logger</strong> (<a href="../common/index.htm#posei_trader.common.component.Logger"><em>Logger</em></a>) – The logger to log to.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="msgbus-1">msgbus<a href="#msgbus-1" class="hash-link" aria-label="Direct link to msgbus" title="Direct link to msgbus">​</a></h4>
<p>The message bus for the actor (if registered).</p>
<ul>
<li><strong>Returns:</strong>
MessageBus or <code>None</code></li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_barself-bar-bar--void">on_bar(self, Bar bar) → void<a href="#on_barself-bar-bar--void" class="hash-link" aria-label="Direct link to on_bar(self, Bar bar) → void" title="Direct link to on_bar(self, Bar bar) → void">​</a></h4>
<p>Actions to be performed when running and receives a bar.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>bar</strong> (<a href="../model/data/index.htm#posei_trader.model.data.Bar"><em>Bar</em></a>) – The bar received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-46">WARNING<a href="#warning-46" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_dataself-data--void">on_data(self, data) → void<a href="#on_dataself-data--void" class="hash-link" aria-label="Direct link to on_data(self, data) → void" title="Direct link to on_data(self, data) → void">​</a></h4>
<p>Actions to be performed when running and receives data.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>data</strong> (<a href="../core/index.htm#posei_trader.core.Data"><em>Data</em></a>) – The data received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-47">WARNING<a href="#warning-47" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_degradeself--void">on_degrade(self) → void<a href="#on_degradeself--void" class="hash-link" aria-label="Direct link to on_degrade(self) → void" title="Direct link to on_degrade(self) → void">​</a></h4>
<p>Actions to be performed on degrade.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-48">WARNING<a href="#warning-48" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<p>Should be overridden in the actor implementation.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_disposeself--void">on_dispose(self) → void<a href="#on_disposeself--void" class="hash-link" aria-label="Direct link to on_dispose(self) → void" title="Direct link to on_dispose(self) → void">​</a></h4>
<p>Actions to be performed on dispose.</p>
<p>Cleanup/release any resources used here.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-49">WARNING<a href="#warning-49" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_eventself-event-event--void">on_event(self, Event event) → void<a href="#on_eventself-event-event--void" class="hash-link" aria-label="Direct link to on_event(self, Event event) → void" title="Direct link to on_event(self, Event event) → void">​</a></h4>
<p>Actions to be performed running and receives an event.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>event</strong> (<a href="../core/index.htm#posei_trader.core.Event"><em>Event</em></a>) – The event received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-50">WARNING<a href="#warning-50" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_faultself--void">on_fault(self) → void<a href="#on_faultself--void" class="hash-link" aria-label="Direct link to on_fault(self) → void" title="Direct link to on_fault(self) → void">​</a></h4>
<p>Actions to be performed on fault.</p>
<p>Cleanup any resources used by the actor here.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-51">WARNING<a href="#warning-51" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<p>Should be overridden in the actor implementation.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_historical_dataself-data--void">on_historical_data(self, data) → void<a href="#on_historical_dataself-data--void" class="hash-link" aria-label="Direct link to on_historical_data(self, data) → void" title="Direct link to on_historical_data(self, data) → void">​</a></h4>
<p>Actions to be performed when running and receives historical data.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>data</strong> (<a href="../core/index.htm#posei_trader.core.Data"><em>Data</em></a>) – The historical data received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-52">WARNING<a href="#warning-52" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_index_priceself-indexpriceupdate-index_price--void">on_index_price(self, IndexPriceUpdate index_price) → void<a href="#on_index_priceself-indexpriceupdate-index_price--void" class="hash-link" aria-label="Direct link to on_index_price(self, IndexPriceUpdate index_price) → void" title="Direct link to on_index_price(self, IndexPriceUpdate index_price) → void">​</a></h4>
<p>Actions to be performed when running and receives an index price update.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>index_price</strong> (<a href="../model/data/index.htm#posei_trader.model.data.IndexPriceUpdate"><em>IndexPriceUpdate</em></a>) – The index price update received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-53">WARNING<a href="#warning-53" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_instrumentself-instrument-instrument--void">on_instrument(self, Instrument instrument) → void<a href="#on_instrumentself-instrument-instrument--void" class="hash-link" aria-label="Direct link to on_instrument(self, Instrument instrument) → void" title="Direct link to on_instrument(self, Instrument instrument) → void">​</a></h4>
<p>Actions to be performed when running and receives an instrument.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>instrument</strong> (<a href="../model/instruments/index.htm#posei_trader.model.instruments.Instrument"><em>Instrument</em></a>) – The instrument received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-54">WARNING<a href="#warning-54" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_instrument_closeself-instrumentclose-update--void">on_instrument_close(self, InstrumentClose update) → void<a href="#on_instrument_closeself-instrumentclose-update--void" class="hash-link" aria-label="Direct link to on_instrument_close(self, InstrumentClose update) → void" title="Direct link to on_instrument_close(self, InstrumentClose update) → void">​</a></h4>
<p>Actions to be performed when running and receives an instrument close
update.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>update</strong> (<a href="../model/data/index.htm#posei_trader.model.data.InstrumentClose"><em>InstrumentClose</em></a>) – The instrument close received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-55">WARNING<a href="#warning-55" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_instrument_statusself-instrumentstatus-data--void">on_instrument_status(self, InstrumentStatus data) → void<a href="#on_instrument_statusself-instrumentstatus-data--void" class="hash-link" aria-label="Direct link to on_instrument_status(self, InstrumentStatus data) → void" title="Direct link to on_instrument_status(self, InstrumentStatus data) → void">​</a></h4>
<p>Actions to be performed when running and receives an instrument status
update.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>data</strong> (<a href="../model/data/index.htm#posei_trader.model.data.InstrumentStatus"><em>InstrumentStatus</em></a>) – The instrument status update received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-56">WARNING<a href="#warning-56" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_loadself-dict-state--void">on_load(self, dict state) → void<a href="#on_loadself-dict-state--void" class="hash-link" aria-label="Direct link to on_load(self, dict state) → void" title="Direct link to on_load(self, dict state) → void">​</a></h4>
<p>Actions to be performed when the actor state is loaded.</p>
<p>Saved state values will be contained in the give state dictionary.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>state</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>bytes</em> <em>]</em>) – The strategy state to load.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-57">WARNING<a href="#warning-57" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_mark_priceself-markpriceupdate-mark_price--void">on_mark_price(self, MarkPriceUpdate mark_price) → void<a href="#on_mark_priceself-markpriceupdate-mark_price--void" class="hash-link" aria-label="Direct link to on_mark_price(self, MarkPriceUpdate mark_price) → void" title="Direct link to on_mark_price(self, MarkPriceUpdate mark_price) → void">​</a></h4>
<p>Actions to be performed when running and receives a mark price update.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>mark_price</strong> (<a href="../model/data/index.htm#posei_trader.model.data.MarkPriceUpdate"><em>MarkPriceUpdate</em></a>) – The mark price update received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-58">WARNING<a href="#warning-58" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_order_bookself-orderbook-order_book--void">on_order_book(self, OrderBook order_book) → void<a href="#on_order_bookself-orderbook-order_book--void" class="hash-link" aria-label="Direct link to on_order_book(self, OrderBook order_book) → void" title="Direct link to on_order_book(self, OrderBook order_book) → void">​</a></h4>
<p>Actions to be performed when running and receives an order book.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>order_book</strong> (<a href="../model/book/index.htm#posei_trader.model.book.OrderBook"><em>OrderBook</em></a>) – The order book received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-59">WARNING<a href="#warning-59" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_order_book_deltasself-deltas--void">on_order_book_deltas(self, deltas) → void<a href="#on_order_book_deltasself-deltas--void" class="hash-link" aria-label="Direct link to on_order_book_deltas(self, deltas) → void" title="Direct link to on_order_book_deltas(self, deltas) → void">​</a></h4>
<p>Actions to be performed when running and receives order book deltas.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>deltas</strong> (<a href="../model/data/index.htm#posei_trader.model.data.OrderBookDeltas"><em>OrderBookDeltas</em></a> <em>or</em> <em>nautilus_pyo3.OrderBookDeltas</em>) – The order book deltas received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-60">WARNING<a href="#warning-60" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_order_book_depthself-depth--void">on_order_book_depth(self, depth) → void<a href="#on_order_book_depthself-depth--void" class="hash-link" aria-label="Direct link to on_order_book_depth(self, depth) → void" title="Direct link to on_order_book_depth(self, depth) → void">​</a></h4>
<p>Actions to be performed when running and receives an order book depth.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>depth</strong> (<a href="../model/data/index.htm#posei_trader.model.data.OrderBookDepth10"><em>OrderBookDepth10</em></a>) – The order book depth received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-61">WARNING<a href="#warning-61" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_quote_tickself-quotetick-tick--void">on_quote_tick(self, QuoteTick tick) → void<a href="#on_quote_tickself-quotetick-tick--void" class="hash-link" aria-label="Direct link to on_quote_tick(self, QuoteTick tick) → void" title="Direct link to on_quote_tick(self, QuoteTick tick) → void">​</a></h4>
<p>Actions to be performed when running and receives a quote tick.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>tick</strong> (<a href="../model/data/index.htm#posei_trader.model.data.QuoteTick"><em>QuoteTick</em></a>) – The tick received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-62">WARNING<a href="#warning-62" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_resetself--void">on_reset(self) → void<a href="#on_resetself--void" class="hash-link" aria-label="Direct link to on_reset(self) → void" title="Direct link to on_reset(self) → void">​</a></h4>
<p>Actions to be performed on reset.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-63">WARNING<a href="#warning-63" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<p>Should be overridden in a user implementation.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_resumeself--void">on_resume(self) → void<a href="#on_resumeself--void" class="hash-link" aria-label="Direct link to on_resume(self) → void" title="Direct link to on_resume(self) → void">​</a></h4>
<p>Actions to be performed on resume.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-64">WARNING<a href="#warning-64" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_saveself--dict">on_save(self) → dict<a href="#on_saveself--dict" class="hash-link" aria-label="Direct link to on_save(self) → dict" title="Direct link to on_save(self) → dict">​</a></h4>
<p>Actions to be performed when the actor state is saved.</p>
<p>Create and return a state dictionary of values to be saved.</p>
<ul>
<li><strong>Returns:</strong>
The strategy state to save.</li>
<li><strong>Return type:</strong>
dict[str, bytes]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-65">WARNING<a href="#warning-65" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_signalself-signal--void">on_signal(self, signal) → void<a href="#on_signalself-signal--void" class="hash-link" aria-label="Direct link to on_signal(self, signal) → void" title="Direct link to on_signal(self, signal) → void">​</a></h4>
<p>Actions to be performed when running and receives signal data.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>signal</strong> (<a href="../core/index.htm#posei_trader.core.Data"><em>Data</em></a>) – The signal received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-66">WARNING<a href="#warning-66" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_startself--void">on_start(self) → void<a href="#on_startself--void" class="hash-link" aria-label="Direct link to on_start(self) → void" title="Direct link to on_start(self) → void">​</a></h4>
<p>Actions to be performed on start.</p>
<p>The intent is that this method is called once per trading ‘run’, when
initially starting.</p>
<p>It is recommended to subscribe/request for data here.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-67">WARNING<a href="#warning-67" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<p>Should be overridden in a user implementation.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_stopself--void">on_stop(self) → void<a href="#on_stopself--void" class="hash-link" aria-label="Direct link to on_stop(self) → void" title="Direct link to on_stop(self) → void">​</a></h4>
<p>Actions to be performed on stop.</p>
<p>The intent is that this method is called to pause, or when done for day.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-68">WARNING<a href="#warning-68" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<p>Should be overridden in a user implementation.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_trade_tickself-tradetick-tick--void">on_trade_tick(self, TradeTick tick) → void<a href="#on_trade_tickself-tradetick-tick--void" class="hash-link" aria-label="Direct link to on_trade_tick(self, TradeTick tick) → void" title="Direct link to on_trade_tick(self, TradeTick tick) → void">​</a></h4>
<p>Actions to be performed when running and receives a trade tick.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>tick</strong> (<a href="../model/data/index.htm#posei_trader.model.data.TradeTick"><em>TradeTick</em></a>) – The tick received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-69">WARNING<a href="#warning-69" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="pending_requestsself--set">pending_requests(self) → set<a href="#pending_requestsself--set" class="hash-link" aria-label="Direct link to pending_requests(self) → set" title="Direct link to pending_requests(self) → set">​</a></h4>
<p>Return the request IDs which are currently pending processing.</p>
<ul>
<li><strong>Return type:</strong>
set[<a href="../core/index.htm#posei_trader.core.UUID4">UUID4</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="portfolio-1">portfolio<a href="#portfolio-1" class="hash-link" aria-label="Direct link to portfolio" title="Direct link to portfolio">​</a></h4>
<p>The read-only portfolio for the actor.</p>
<ul>
<li><strong>Returns:</strong>
PortfolioFacade</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="pre_processself-data-data--void">pre_process(self, Data data) → void<a href="#pre_processself-data-data--void" class="hash-link" aria-label="Direct link to pre_process(self, Data data) → void" title="Direct link to pre_process(self, Data data) → void">​</a></h4>
<p>Abstract method pre_process (implement in subclass).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="processself-uint64_t-ts_now--void-1">process(self, uint64_t ts_now) → void<a href="#processself-uint64_t-ts_now--void-1" class="hash-link" aria-label="Direct link to process(self, uint64_t ts_now) → void" title="Direct link to process(self, uint64_t ts_now) → void">​</a></h4>
<p>Process the given tick through the module.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>ts_now</strong> (<em>uint64_t</em>) – The current UNIX timestamp (nanoseconds) in the simulated exchange.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="publish_dataself-datatype-data_type-data-data--void">publish_data(self, DataType data_type, Data data) → void<a href="#publish_dataself-datatype-data_type-data-data--void" class="hash-link" aria-label="Direct link to publish_data(self, DataType data_type, Data data) → void" title="Direct link to publish_data(self, DataType data_type, Data data) → void">​</a></h4>
<p>Publish the given data to the message bus.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>data_type</strong> (<a href="../model/data/index.htm#posei_trader.model.data.DataType"><em>DataType</em></a>) – The data type being published.</li>
<li><strong>data</strong> (<a href="../core/index.htm#posei_trader.core.Data"><em>Data</em></a>) – The data to publish.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="publish_signalself-str-name-value-uint64_t-ts_event0--void">publish_signal(self, str name, value, uint64_t ts_event=0) → void<a href="#publish_signalself-str-name-value-uint64_t-ts_event0--void" class="hash-link" aria-label="Direct link to publish_signal(self, str name, value, uint64_t ts_event=0) → void" title="Direct link to publish_signal(self, str name, value, uint64_t ts_event=0) → void">​</a></h4>
<p>Publish the given value as a signal to the message bus.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>name</strong> (<em>str</em>) – The name of the signal being published.
The signal name will be converted to title case, with each word capitalized
(e.g., ‘example’ becomes ‘SignalExample’).</li>
<li><strong>value</strong> (<em>object</em>) – The signal data to publish.</li>
<li><strong>ts_event</strong> (<em>uint64_t</em> <em>,</em> <em>optional</em>) – UNIX timestamp (nanoseconds) when the signal event occurred.
If <code>None</code> then will timestamp current time.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="queue_for_executorself-func-callable-any-tuple-argsnone-dict-kwargsnone">queue_for_executor(self, func: Callable[..., Any], tuple args=None, dict kwargs=None)<a href="#queue_for_executorself-func-callable-any-tuple-argsnone-dict-kwargsnone" class="hash-link" aria-label="Direct link to queue_for_executor(self, func: Callable[..., Any], tuple args=None, dict kwargs=None)" title="Direct link to queue_for_executor(self, func: Callable[..., Any], tuple args=None, dict kwargs=None)">​</a></h4>
<p>Queues the callable func to be executed as fn(*args, **kwargs) sequentially.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>func</strong> (<em>Callable</em>) – The function to be executed.</li>
<li><strong>args</strong> (<em>positional arguments</em>) – The positional arguments for the call to func.</li>
<li><strong>kwargs</strong> (<em>arbitrary keyword arguments</em>) – The keyword arguments for the call to func.</li>
</ul>
</li>
<li><strong>Raises:</strong>
<strong>TypeError</strong> – If func is not of type Callable.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="queued_task_idsself--list">queued_task_ids(self) → list<a href="#queued_task_idsself--list" class="hash-link" aria-label="Direct link to queued_task_ids(self) → list" title="Direct link to queued_task_ids(self) → list">​</a></h4>
<p>Return the queued task identifiers.</p>
<ul>
<li><strong>Return type:</strong>
list[<a href="../common/index.htm#posei_trader.common.executor.TaskId">TaskId</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="register_baseself-portfoliofacade-portfolio-messagebus-msgbus-cachefacade-cache-clock-clock--void">register_base(self, PortfolioFacade portfolio, MessageBus msgbus, CacheFacade cache, Clock clock) → void<a href="#register_baseself-portfoliofacade-portfolio-messagebus-msgbus-cachefacade-cache-clock-clock--void" class="hash-link" aria-label="Direct link to register_base(self, PortfolioFacade portfolio, MessageBus msgbus, CacheFacade cache, Clock clock) → void" title="Direct link to register_base(self, PortfolioFacade portfolio, MessageBus msgbus, CacheFacade cache, Clock clock) → void">​</a></h4>
<p>Register with a trader.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>portfolio</strong> (<a href="../portfolio/index.htm#posei_trader.portfolio.PortfolioFacade"><em>PortfolioFacade</em></a>) – The read-only portfolio for the actor.</li>
<li><strong>msgbus</strong> (<a href="../common/index.htm#posei_trader.common.component.MessageBus"><em>MessageBus</em></a>) – The message bus for the actor.</li>
<li><strong>cache</strong> (<a href="../cache/index.htm#posei_trader.cache.base.CacheFacade"><em>CacheFacade</em></a>) – The read-only cache for the actor.</li>
<li><strong>clock</strong> (<a href="../common/index.htm#posei_trader.common.component.Clock"><em>Clock</em></a>) – The clock for the actor.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-70">WARNING<a href="#warning-70" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="register_executorself-loop-asyncioabstracteventloop-executor-executor--void">register_executor(self, loop: asyncio.AbstractEventLoop, executor: Executor) → void<a href="#register_executorself-loop-asyncioabstracteventloop-executor-executor--void" class="hash-link" aria-label="Direct link to register_executor(self, loop: asyncio.AbstractEventLoop, executor: Executor) → void" title="Direct link to register_executor(self, loop: asyncio.AbstractEventLoop, executor: Executor) → void">​</a></h4>
<p>Register the given Executor for the actor.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>loop</strong> (<em>asyncio.AbstractEventLoop</em>) – The event loop of the application.</li>
<li><strong>executor</strong> (<em>concurrent.futures.Executor</em>) – The executor to register.</li>
</ul>
</li>
<li><strong>Raises:</strong>
<strong>TypeError</strong> – If executor is not of type concurrent.futures.Executor</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="register_indicator_for_barsself-bartype-bar_type-indicator-indicator--void">register_indicator_for_bars(self, BarType bar_type, Indicator indicator) → void<a href="#register_indicator_for_barsself-bartype-bar_type-indicator-indicator--void" class="hash-link" aria-label="Direct link to register_indicator_for_bars(self, BarType bar_type, Indicator indicator) → void" title="Direct link to register_indicator_for_bars(self, BarType bar_type, Indicator indicator) → void">​</a></h4>
<p>Register the given indicator with the actor/strategy to receive bar data for the
given bar type.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>bar_type</strong> (<a href="../model/data/index.htm#posei_trader.model.data.BarType"><em>BarType</em></a>) – The bar type for bar updates.</li>
<li><strong>indicator</strong> (<a href="../indicators/index.htm#posei_trader.indicators.base.indicator.Indicator"><em>Indicator</em></a>) – The indicator to register.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="register_indicator_for_quote_ticksself-instrumentid-instrument_id-indicator-indicator--void">register_indicator_for_quote_ticks(self, InstrumentId instrument_id, Indicator indicator) → void<a href="#register_indicator_for_quote_ticksself-instrumentid-instrument_id-indicator-indicator--void" class="hash-link" aria-label="Direct link to register_indicator_for_quote_ticks(self, InstrumentId instrument_id, Indicator indicator) → void" title="Direct link to register_indicator_for_quote_ticks(self, InstrumentId instrument_id, Indicator indicator) → void">​</a></h4>
<p>Register the given indicator with the actor/strategy to receive quote tick
data for the given instrument ID.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument ID for tick updates.</li>
<li><strong>indicator</strong> (<a href="../indicators/index.htm#posei_trader.indicators.base.indicator.Indicator"><em>Indicator</em></a>) – The indicator to register.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="register_indicator_for_trade_ticksself-instrumentid-instrument_id-indicator-indicator--void">register_indicator_for_trade_ticks(self, InstrumentId instrument_id, Indicator indicator) → void<a href="#register_indicator_for_trade_ticksself-instrumentid-instrument_id-indicator-indicator--void" class="hash-link" aria-label="Direct link to register_indicator_for_trade_ticks(self, InstrumentId instrument_id, Indicator indicator) → void" title="Direct link to register_indicator_for_trade_ticks(self, InstrumentId instrument_id, Indicator indicator) → void">​</a></h4>
<p>Register the given indicator with the actor/strategy to receive trade tick
data for the given instrument ID.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument ID for tick updates.</li>
<li><strong>indicator</strong> (<em>indicator</em>) – The indicator to register.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="register_venueself-simulatedexchange-exchange--void">register_venue(self, SimulatedExchange exchange) → void<a href="#register_venueself-simulatedexchange-exchange--void" class="hash-link" aria-label="Direct link to register_venue(self, SimulatedExchange exchange) → void" title="Direct link to register_venue(self, SimulatedExchange exchange) → void">​</a></h4>
<p>Register the given simulated exchange with the module.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>exchange</strong> (<a href="#posei_trader.backtest.exchange.SimulatedExchange"><em>SimulatedExchange</em></a>) – The exchange to register.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="register_warning_eventself-type-event--void">register_warning_event(self, type event) → void<a href="#register_warning_eventself-type-event--void" class="hash-link" aria-label="Direct link to register_warning_event(self, type event) → void" title="Direct link to register_warning_event(self, type event) → void">​</a></h4>
<p>Register the given event type for warning log levels.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>event</strong> (<em>type</em>) – The event class to register.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="registered_indicators">registered_indicators<a href="#registered_indicators" class="hash-link" aria-label="Direct link to registered_indicators" title="Direct link to registered_indicators">​</a></h4>
<p>Return the registered indicators for the strategy.</p>
<ul>
<li><strong>Return type:</strong>
list[<a href="../indicators/index.htm#posei_trader.indicators.base.indicator.Indicator">Indicator</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="request_aggregated_barsself-list-bar_types-datetime-startnone-datetime-endnone-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-bool-include_external_datafalse-bool-update_subscriptionsfalse-update_catalog-bool--false-dict-paramsnone--uuid4">request_aggregated_bars(self, list bar_types, datetime start=None, datetime end=None, int limit=0, ClientId client_id=None, callback: Callable[[UUID4], None] | None = None, bool include_external_data=False, bool update_subscriptions=False, update_catalog: bool = False, dict params=None) → <a href="../core/index.htm#posei_trader.core.UUID4">UUID4</a><a href="#request_aggregated_barsself-list-bar_types-datetime-startnone-datetime-endnone-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-bool-include_external_datafalse-bool-update_subscriptionsfalse-update_catalog-bool--false-dict-paramsnone--uuid4" class="hash-link" aria-label="Direct link to request_aggregated_barsself-list-bar_types-datetime-startnone-datetime-endnone-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-bool-include_external_datafalse-bool-update_subscriptionsfalse-update_catalog-bool--false-dict-paramsnone--uuid4" title="Direct link to request_aggregated_barsself-list-bar_types-datetime-startnone-datetime-endnone-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-bool-include_external_datafalse-bool-update_subscriptionsfalse-update_catalog-bool--false-dict-paramsnone--uuid4">​</a></h4>
<p>Request historical aggregated Bar data for multiple bar types.
The first bar is used to determine which market data type will be queried.
This can either be quotes, trades or bars. If bars are queried,
the first bar type needs to have a composite bar that is external (i.e. not internal/aggregated).
This external bar type will be queried.</p>
<p>If end is <code>None</code> then will request up to the most recent data.</p>
<p>Once the response is received, the bar data is forwarded from the message bus
to the on_historical_data handler. Any tick data used for aggregation is also
forwarded to the on_historical_data handler.</p>
<p>If the request fails, then an error is logged.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>bar_types</strong> (<em>list</em> <em>[</em><a href="../model/data/index.htm#posei_trader.model.data.BarType"><em>BarType</em></a> <em>]</em>) – The list of bar types for the request. Composite bars can also be used and need to
figure in the list after a BarType on which it depends.</li>
<li><strong>start</strong> (<em>datetime</em> <em>,</em> <em>optional</em>) – The start datetime (UTC) of request time range.
The inclusiveness depends on individual data client implementation.</li>
<li><strong>end</strong> (<em>datetime</em> <em>,</em> <em>optional</em>) – The end datetime (UTC) of request time range.
The inclusiveness depends on individual data client implementation.</li>
<li><strong>limit</strong> (<em>int</em> <em>,</em> <em>optional</em>) – The limit on the amount of data received (quote ticks, trade ticks or bars).</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>callback</strong> (<em>Callable</em> <em>[</em> <em>[</em><a href="../core/index.htm#posei_trader.core.UUID4"><em>UUID4</em></a> <em>]</em> <em>,</em> <em>None</em> <em>]</em> <em>,</em> <em>optional</em>) – The registered callback, to be called with the request ID when the response has
completed processing.</li>
<li><strong>include_external_data</strong> (<em>bool</em> <em>,</em> <em>default False</em>) – If True, includes the queried external data in the response.</li>
<li><strong>update_subscriptions</strong> (<em>bool</em> <em>,</em> <em>default False</em>) – If True, updates the aggregators of any existing or future subscription with the queried external data.</li>
<li><strong>update_catalog</strong> (<em>bool</em> <em>,</em> <em>optional</em>) – Whether to update a catalog with the received data.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
<li><strong>Returns:</strong>
The request_id for the request.</li>
<li><strong>Return type:</strong>
<a href="../core/index.htm#posei_trader.core.UUID4">UUID4</a></li>
<li><strong>Raises:</strong>
<ul>
<li><strong>ValueError</strong> – If start is not None and &gt; current timestamp (now).</li>
<li><strong>ValueError</strong> – If end is not None and &gt; current timestamp (now).</li>
<li><strong>ValueError</strong> – If start and end are not None and start is &gt;= end.</li>
<li><strong>ValueError</strong> – If bar_types is empty.</li>
<li><strong>TypeError</strong> – If callback is not None and not of type Callable.</li>
<li><strong>TypeError</strong> – If bar_types is empty or contains elements not of type BarType.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="request_barsself-bartype-bar_type-datetime-startnone-datetime-endnone-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4">request_bars(self, BarType bar_type, datetime start=None, datetime end=None, int limit=0, ClientId client_id=None, callback: Callable[[UUID4], None] | None = None, update_catalog: bool = False, dict params=None) → <a href="../core/index.htm#posei_trader.core.UUID4">UUID4</a><a href="#request_barsself-bartype-bar_type-datetime-startnone-datetime-endnone-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4" class="hash-link" aria-label="Direct link to request_barsself-bartype-bar_type-datetime-startnone-datetime-endnone-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4" title="Direct link to request_barsself-bartype-bar_type-datetime-startnone-datetime-endnone-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4">​</a></h4>
<p>Request historical Bar data.</p>
<p>If end is <code>None</code> then will request up to the most recent data.</p>
<p>Once the response is received, the bar data is forwarded from the message bus
to the on_historical_data handler.</p>
<p>If the request fails, then an error is logged.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>bar_type</strong> (<a href="../model/data/index.htm#posei_trader.model.data.BarType"><em>BarType</em></a>) – The bar type for the request.</li>
<li><strong>start</strong> (<em>datetime</em> <em>,</em> <em>optional</em>) – The start datetime (UTC) of request time range.
The inclusiveness depends on individual data client implementation.</li>
<li><strong>end</strong> (<em>datetime</em> <em>,</em> <em>optional</em>) – The end datetime (UTC) of request time range.
The inclusiveness depends on individual data client implementation.</li>
<li><strong>limit</strong> (<em>int</em> <em>,</em> <em>optional</em>) – The limit on the amount of bars received.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>callback</strong> (<em>Callable</em> <em>[</em> <em>[</em><a href="../core/index.htm#posei_trader.core.UUID4"><em>UUID4</em></a> <em>]</em> <em>,</em> <em>None</em> <em>]</em> <em>,</em> <em>optional</em>) – The registered callback, to be called with the request ID when the response has
completed processing.</li>
<li><strong>update_catalog</strong> (<em>bool</em> <em>,</em> <em>optional</em>) – Whether to update a catalog with the received data.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
<li><strong>Returns:</strong>
The request_id for the request.</li>
<li><strong>Return type:</strong>
<a href="../core/index.htm#posei_trader.core.UUID4">UUID4</a></li>
<li><strong>Raises:</strong>
<ul>
<li><strong>ValueError</strong> – If start is not None and &gt; current timestamp (now).</li>
<li><strong>ValueError</strong> – If end is not None and &gt; current timestamp (now).</li>
<li><strong>ValueError</strong> – If start and end are not None and start is &gt;= end.</li>
<li><strong>TypeError</strong> – If callback is not None and not of type Callable.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="request_dataself-datatype-data_type-clientid-client_id-instrumentid-instrument_idnone-datetime-startnone-datetime-endnone-int-limit0-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4">request_data(self, DataType data_type, ClientId client_id, InstrumentId instrument_id=None, datetime start=None, datetime end=None, int limit=0, callback: Callable[[UUID4], None] | None = None, update_catalog: bool = False, dict params=None) → <a href="../core/index.htm#posei_trader.core.UUID4">UUID4</a><a href="#request_dataself-datatype-data_type-clientid-client_id-instrumentid-instrument_idnone-datetime-startnone-datetime-endnone-int-limit0-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4" class="hash-link" aria-label="Direct link to request_dataself-datatype-data_type-clientid-client_id-instrumentid-instrument_idnone-datetime-startnone-datetime-endnone-int-limit0-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4" title="Direct link to request_dataself-datatype-data_type-clientid-client_id-instrumentid-instrument_idnone-datetime-startnone-datetime-endnone-int-limit0-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4">​</a></h4>
<p>Request custom data for the given data type from the given data client.</p>
<p>Once the response is received, the data is forwarded from the message bus
to the on_historical_data handler.</p>
<p>If the request fails, then an error is logged.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>data_type</strong> (<a href="../model/data/index.htm#posei_trader.model.data.DataType"><em>DataType</em></a>) – The data type for the request.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.ClientId"><em>ClientId</em></a>) – The data client ID.</li>
<li><strong>start</strong> (<em>datetime</em> <em>,</em> <em>optional</em>) – The start datetime (UTC) of request time range.
The inclusiveness depends on individual data client implementation.</li>
<li><strong>end</strong> (<em>datetime</em> <em>,</em> <em>optional</em>) – The end datetime (UTC) of request time range.
The inclusiveness depends on individual data client implementation.</li>
<li><strong>limit</strong> (<em>int</em> <em>,</em> <em>optional</em>) – The limit on the amount of data points received.</li>
<li><strong>callback</strong> (<em>Callable</em> <em>[</em> <em>[</em><a href="../core/index.htm#posei_trader.core.UUID4"><em>UUID4</em></a> <em>]</em> <em>,</em> <em>None</em> <em>]</em> <em>,</em> <em>optional</em>) – The registered callback, to be called with the request ID when the response has
completed processing.</li>
<li><strong>update_catalog</strong> (<em>bool</em> <em>,</em> <em>optional</em>) – Whether to update a catalog with the received data.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
<li><strong>Returns:</strong>
The request_id for the request.</li>
<li><strong>Return type:</strong>
<a href="../core/index.htm#posei_trader.core.UUID4">UUID4</a></li>
<li><strong>Raises:</strong>
<strong>TypeError</strong> – If callback is not None and not of type Callable.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="request_instrumentself-instrumentid-instrument_id-datetime-startnone-datetime-endnone-clientid-client_idnone-callback-callableuuid4-noane--none--none-update_catalog-bool--false-dict-paramsnone--uuid4">request_instrument(self, InstrumentId instrument_id, datetime start=None, datetime end=None, ClientId client_id=None, callback: Callable[[UUID4], Noane] | None = None, update_catalog: bool = False, dict params=None) → <a href="../core/index.htm#posei_trader.core.UUID4">UUID4</a><a href="#request_instrumentself-instrumentid-instrument_id-datetime-startnone-datetime-endnone-clientid-client_idnone-callback-callableuuid4-noane--none--none-update_catalog-bool--false-dict-paramsnone--uuid4" class="hash-link" aria-label="Direct link to request_instrumentself-instrumentid-instrument_id-datetime-startnone-datetime-endnone-clientid-client_idnone-callback-callableuuid4-noane--none--none-update_catalog-bool--false-dict-paramsnone--uuid4" title="Direct link to request_instrumentself-instrumentid-instrument_id-datetime-startnone-datetime-endnone-clientid-client_idnone-callback-callableuuid4-noane--none--none-update_catalog-bool--false-dict-paramsnone--uuid4">​</a></h4>
<p>Request Instrument data for the given instrument ID.</p>
<p>If end is <code>None</code> then will request up to the most recent data.</p>
<p>Once the response is received, the instrument data is forwarded from the message bus
to the on_instrument handler.</p>
<p>If the request fails, then an error is logged.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument ID for the request.</li>
<li><strong>start</strong> (<em>datetime</em> <em>,</em> <em>optional</em>) – The start datetime (UTC) of request time range.
The inclusiveness depends on individual data client implementation.</li>
<li><strong>end</strong> (<em>datetime</em> <em>,</em> <em>optional</em>) – The end datetime (UTC) of request time range.
The inclusiveness depends on individual data client implementation.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>callback</strong> (<em>Callable</em> <em>[</em> <em>[</em><a href="../core/index.htm#posei_trader.core.UUID4"><em>UUID4</em></a> <em>]</em> <em>,</em> <em>None</em> <em>]</em> <em>,</em> <em>optional</em>) – The registered callback, to be called with the request ID when the response has
completed processing.</li>
<li><strong>update_catalog</strong> (<em>bool</em> <em>,</em> <em>optional</em>) – Whether to update a catalog with the received data.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
<li><strong>Returns:</strong>
The request_id for the request.</li>
<li><strong>Return type:</strong>
<a href="../core/index.htm#posei_trader.core.UUID4">UUID4</a></li>
<li><strong>Raises:</strong>
<ul>
<li><strong>ValueError</strong> – If start is not None and &gt; current timestamp (now).</li>
<li><strong>ValueError</strong> – If end is not None and &gt; current timestamp (now).</li>
<li><strong>ValueError</strong> – If start and end are not None and start is &gt;= end.</li>
<li><strong>TypeError</strong> – If callback is not None and not of type Callable.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="request_instrumentsself-venue-venue-datetime-startnone-datetime-endnone-clientid-client_idnone-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4">request_instruments(self, Venue venue, datetime start=None, datetime end=None, ClientId client_id=None, callback: Callable[[UUID4], None] | None = None, update_catalog: bool = False, dict params=None) → <a href="../core/index.htm#posei_trader.core.UUID4">UUID4</a><a href="#request_instrumentsself-venue-venue-datetime-startnone-datetime-endnone-clientid-client_idnone-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4" class="hash-link" aria-label="Direct link to request_instrumentsself-venue-venue-datetime-startnone-datetime-endnone-clientid-client_idnone-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4" title="Direct link to request_instrumentsself-venue-venue-datetime-startnone-datetime-endnone-clientid-client_idnone-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4">​</a></h4>
<p>Request all Instrument data for the given venue.</p>
<p>If end is <code>None</code> then will request up to the most recent data.</p>
<p>Once the response is received, the instrument data is forwarded from the message bus
to the on_instrument handler.</p>
<p>If the request fails, then an error is logged.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>venue</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.Venue"><em>Venue</em></a>) – The venue for the request.</li>
<li><strong>start</strong> (<em>datetime</em> <em>,</em> <em>optional</em>) – The start datetime (UTC) of request time range.
The inclusiveness depends on individual data client implementation.</li>
<li><strong>end</strong> (<em>datetime</em> <em>,</em> <em>optional</em>) – The end datetime (UTC) of request time range.
The inclusiveness depends on individual data client implementation.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>callback</strong> (<em>Callable</em> <em>[</em> <em>[</em><a href="../core/index.htm#posei_trader.core.UUID4"><em>UUID4</em></a> <em>]</em> <em>,</em> <em>None</em> <em>]</em> <em>,</em> <em>optional</em>) – The registered callback, to be called with the request ID when the response has
completed processing.</li>
<li><strong>update_catalog</strong> (<em>bool</em> <em>,</em> <em>optional</em>) – Whether to update a catalog with the received data.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
<li><strong>Returns:</strong>
The request_id for the request.</li>
<li><strong>Return type:</strong>
<a href="../core/index.htm#posei_trader.core.UUID4">UUID4</a></li>
<li><strong>Raises:</strong>
<ul>
<li><strong>ValueError</strong> – If start is not None and &gt; current timestamp (now).</li>
<li><strong>ValueError</strong> – If end is not None and &gt; current timestamp (now).</li>
<li><strong>ValueError</strong> – If start and end are not None and start is &gt;= end.</li>
<li><strong>TypeError</strong> – If callback is not None and not of type Callable.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="request_order_book_snapshotself-instrumentid-instrument_id-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-dict-paramsnone--uuid4">request_order_book_snapshot(self, InstrumentId instrument_id, int limit=0, ClientId client_id=None, callback: Callable[[UUID4], None] | None = None, dict params=None) → <a href="../core/index.htm#posei_trader.core.UUID4">UUID4</a><a href="#request_order_book_snapshotself-instrumentid-instrument_id-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-dict-paramsnone--uuid4" class="hash-link" aria-label="Direct link to request_order_book_snapshotself-instrumentid-instrument_id-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-dict-paramsnone--uuid4" title="Direct link to request_order_book_snapshotself-instrumentid-instrument_id-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-dict-paramsnone--uuid4">​</a></h4>
<p>Request an order book snapshot.</p>
<p>Once the response is received, the order book data is forwarded from the message bus
to the on_historical_data handler.</p>
<p>If the request fails, then an error is logged.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument ID for the order book snapshot request.</li>
<li><strong>limit</strong> (<em>int</em> <em>,</em> <em>optional</em>) – The limit on the depth of the order book snapshot.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If None, it will be inferred from the venue in the instrument ID.</li>
<li><strong>callback</strong> (<em>Callable</em> <em>[</em> <em>[</em><a href="../core/index.htm#posei_trader.core.UUID4"><em>UUID4</em></a> <em>]</em> <em>,</em> <em>None</em> <em>]</em> <em>,</em> <em>optional</em>) – The registered callback, to be called with the request ID when the response has completed processing.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
<li><strong>Returns:</strong>
The request_id for the request.</li>
<li><strong>Return type:</strong>
<a href="../core/index.htm#posei_trader.core.UUID4">UUID4</a></li>
<li><strong>Raises:</strong>
<ul>
<li><strong>ValueError</strong> – If the instrument_id is None.</li>
<li><strong>TypeError</strong> – If callback is not None and not of type Callable.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="request_quote_ticksself-instrumentid-instrument_id-datetime-startnone-datetime-endnone-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4">request_quote_ticks(self, InstrumentId instrument_id, datetime start=None, datetime end=None, int limit=0, ClientId client_id=None, callback: Callable[[UUID4], None] | None = None, update_catalog: bool = False, dict params=None) → <a href="../core/index.htm#posei_trader.core.UUID4">UUID4</a><a href="#request_quote_ticksself-instrumentid-instrument_id-datetime-startnone-datetime-endnone-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4" class="hash-link" aria-label="Direct link to request_quote_ticksself-instrumentid-instrument_id-datetime-startnone-datetime-endnone-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4" title="Direct link to request_quote_ticksself-instrumentid-instrument_id-datetime-startnone-datetime-endnone-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4">​</a></h4>
<p>Request historical QuoteTick data.</p>
<p>If end is <code>None</code> then will request up to the most recent data.</p>
<p>Once the response is received, the quote tick data is forwarded from the message bus
to the on_historical_data handler.</p>
<p>If the request fails, then an error is logged.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The tick instrument ID for the request.</li>
<li><strong>start</strong> (<em>datetime</em> <em>,</em> <em>optional</em>) – The start datetime (UTC) of request time range.
The inclusiveness depends on individual data client implementation.</li>
<li><strong>end</strong> (<em>datetime</em> <em>,</em> <em>optional</em>) – The end datetime (UTC) of request time range.
The inclusiveness depends on individual data client implementation.</li>
<li><strong>limit</strong> (<em>int</em> <em>,</em> <em>optional</em>) – The limit on the amount of quote ticks received.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>callback</strong> (<em>Callable</em> <em>[</em> <em>[</em><a href="../core/index.htm#posei_trader.core.UUID4"><em>UUID4</em></a> <em>]</em> <em>,</em> <em>None</em> <em>]</em> <em>,</em> <em>optional</em>) – The registered callback, to be called with the request ID when the response has
completed processing.</li>
<li><strong>update_catalog</strong> (<em>bool</em> <em>,</em> <em>optional</em>) – Whether to update a catalog with the received data.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
<li><strong>Returns:</strong>
The request_id for the request.</li>
<li><strong>Return type:</strong>
<a href="../core/index.htm#posei_trader.core.UUID4">UUID4</a></li>
<li><strong>Raises:</strong>
<ul>
<li><strong>ValueError</strong> – If start is not None and &gt; current timestamp (now).</li>
<li><strong>ValueError</strong> – If end is not None and &gt; current timestamp (now).</li>
<li><strong>ValueError</strong> – If start and end are not None and start is &gt;= end.</li>
<li><strong>TypeError</strong> – If callback is not None and not of type Callable.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="request_trade_ticksself-instrumentid-instrument_id-datetime-startnone-datetime-endnone-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4">request_trade_ticks(self, InstrumentId instrument_id, datetime start=None, datetime end=None, int limit=0, ClientId client_id=None, callback: Callable[[UUID4], None] | None = None, update_catalog: bool = False, dict params=None) → <a href="../core/index.htm#posei_trader.core.UUID4">UUID4</a><a href="#request_trade_ticksself-instrumentid-instrument_id-datetime-startnone-datetime-endnone-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4" class="hash-link" aria-label="Direct link to request_trade_ticksself-instrumentid-instrument_id-datetime-startnone-datetime-endnone-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4" title="Direct link to request_trade_ticksself-instrumentid-instrument_id-datetime-startnone-datetime-endnone-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4">​</a></h4>
<p>Request historical TradeTick data.</p>
<p>If end is <code>None</code> then will request up to the most recent data.</p>
<p>Once the response is received, the trade tick data is forwarded from the message bus
to the on_historical_data handler.</p>
<p>If the request fails, then an error is logged.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The tick instrument ID for the request.</li>
<li><strong>start</strong> (<em>datetime</em> <em>,</em> <em>optional</em>) – The start datetime (UTC) of request time range.
The inclusiveness depends on individual data client implementation.</li>
<li><strong>end</strong> (<em>datetime</em> <em>,</em> <em>optional</em>) – The end datetime (UTC) of request time range.
The inclusiveness depends on individual data client implementation.</li>
<li><strong>limit</strong> (<em>int</em> <em>,</em> <em>optional</em>) – The limit on the amount of trade ticks received.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>callback</strong> (<em>Callable</em> <em>[</em> <em>[</em><a href="../core/index.htm#posei_trader.core.UUID4"><em>UUID4</em></a> <em>]</em> <em>,</em> <em>None</em> <em>]</em> <em>,</em> <em>optional</em>) – The registered callback, to be called with the request ID when the response has
completed processing.</li>
<li><strong>update_catalog</strong> (<em>bool</em> <em>,</em> <em>optional</em>) – Whether to update a catalog with the received data.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
<li><strong>Returns:</strong>
The request_id for the request.</li>
<li><strong>Return type:</strong>
<a href="../core/index.htm#posei_trader.core.UUID4">UUID4</a></li>
<li><strong>Raises:</strong>
<ul>
<li><strong>ValueError</strong> – If start is not None and &gt; current timestamp (now).</li>
<li><strong>ValueError</strong> – If end is not None and &gt; current timestamp (now).</li>
<li><strong>ValueError</strong> – If start and end are not None and start is &gt;= end.</li>
<li><strong>TypeError</strong> – If callback is not None and not of type Callable.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="resetself--void-5">reset(self) → void<a href="#resetself--void-5" class="hash-link" aria-label="Direct link to reset(self) → void" title="Direct link to reset(self) → void">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="resumeself--void-3">resume(self) → void<a href="#resumeself--void-3" class="hash-link" aria-label="Direct link to resume(self) → void" title="Direct link to resume(self) → void">​</a></h4>
<p>Resume the component.</p>
<p>While executing on_resume() any exception will be logged and reraised, then the component
will remain in a <code>RESUMING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-71">WARNING<a href="#warning-71" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="run_in_executorself-func-callable-any-tuple-argsnone-dict-kwargsnone">run_in_executor(self, func: Callable[..., Any], tuple args=None, dict kwargs=None)<a href="#run_in_executorself-func-callable-any-tuple-argsnone-dict-kwargsnone" class="hash-link" aria-label="Direct link to run_in_executor(self, func: Callable[..., Any], tuple args=None, dict kwargs=None)" title="Direct link to run_in_executor(self, func: Callable[..., Any], tuple args=None, dict kwargs=None)">​</a></h4>
<p>Schedules the callable func to be executed as fn(*args, **kwargs).</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>func</strong> (<em>Callable</em>) – The function to be executed.</li>
<li><strong>args</strong> (<em>positional arguments</em>) – The positional arguments for the call to func.</li>
<li><strong>kwargs</strong> (<em>arbitrary keyword arguments</em>) – The keyword arguments for the call to func.</li>
</ul>
</li>
<li><strong>Returns:</strong>
The unique task identifier for the execution.
This also corresponds to any future objects memory address.</li>
<li><strong>Return type:</strong>
<a href="../common/index.htm#posei_trader.common.executor.TaskId">TaskId</a></li>
<li><strong>Raises:</strong>
<strong>TypeError</strong> – If func is not of type Callable.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="saveself--dict">save(self) → dict<a href="#saveself--dict" class="hash-link" aria-label="Direct link to save(self) → dict" title="Direct link to save(self) → dict">​</a></h4>
<p>Return the actor/strategy state dictionary to be saved.</p>
<p>Calls on_save.</p>
<ul>
<li><strong>Returns:</strong>
The strategy state to save.</li>
<li><strong>Return type:</strong>
dict[str, bytes]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-72">WARNING<a href="#warning-72" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Exceptions raised will be caught, logged, and reraised.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="shutdown_systemself-str-reasonnone--void-3">shutdown_system(self, str reason=None) → void<a href="#shutdown_systemself-str-reasonnone--void-3" class="hash-link" aria-label="Direct link to shutdown_system(self, str reason=None) → void" title="Direct link to shutdown_system(self, str reason=None) → void">​</a></h4>
<p>Initiate a system-wide shutdown by generating and publishing a ShutdownSystem command.</p>
<p>The command is handled by the system’s PoseiKernel, which will invoke either stop (synchronously)
or stop_async (asynchronously) depending on the execution context and the presence of an active event loop.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>reason</strong> (<em>str</em> <em>,</em> <em>optional</em>) – The reason for issuing the shutdown command.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="startself--void-3">start(self) → void<a href="#startself--void-3" class="hash-link" aria-label="Direct link to start(self) → void" title="Direct link to start(self) → void">​</a></h4>
<p>Start the component.</p>
<p>While executing on_start() any exception will be logged and reraised, then the component
will remain in a <code>STARTING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-73">WARNING<a href="#warning-73" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="state-3">state<a href="#state-3" class="hash-link" aria-label="Direct link to state" title="Direct link to state">​</a></h4>
<p>ComponentState</p>
<p>Return the components current state.</p>
<ul>
<li><strong>Return type:</strong>
ComponentState</li>
<li><strong>Type:</strong>
Component.state</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="stopself--void-3">stop(self) → void<a href="#stopself--void-3" class="hash-link" aria-label="Direct link to stop(self) → void" title="Direct link to stop(self) → void">​</a></h4>
<p>Stop the component.</p>
<p>While executing on_stop() any exception will be logged and reraised, then the component
will remain in a <code>STOPPING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-74">WARNING<a href="#warning-74" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_barsself-bartype-bar_type-clientid-client_idnone-bool-await_partialfalse-bool-update_catalogfalse-dict-paramsnone--void">subscribe_bars(self, BarType bar_type, ClientId client_id=None, bool await_partial=False, bool update_catalog=False, dict params=None) → void<a href="#subscribe_barsself-bartype-bar_type-clientid-client_idnone-bool-await_partialfalse-bool-update_catalogfalse-dict-paramsnone--void" class="hash-link" aria-label="Direct link to subscribe_bars(self, BarType bar_type, ClientId client_id=None, bool await_partial=False, bool update_catalog=False, dict params=None) → void" title="Direct link to subscribe_bars(self, BarType bar_type, ClientId client_id=None, bool await_partial=False, bool update_catalog=False, dict params=None) → void">​</a></h4>
<p>Subscribe to streaming Bar data for the given bar type.</p>
<p>Once subscribed, any matching bar data published on the message bus is forwarded
to the on_bar handler.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>bar_type</strong> (<a href="../model/data/index.htm#posei_trader.model.data.BarType"><em>BarType</em></a>) – The bar type to subscribe to.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>await_partial</strong> (<em>bool</em> <em>,</em> <em>default False</em>) – If the bar aggregator should await the arrival of a historical partial bar prior
to actively aggregating new bars.</li>
<li><strong>update_catalog</strong> (<em>bool</em> <em>,</em> <em>optional</em>) – Whether to update a catalog with the received data.
Only useful when downloading data during a backtest.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_dataself-datatype-data_type-clientid-client_idnone-instrumentid-instrument_idnone-bool-update_catalogfalse-dict-paramsnone--void">subscribe_data(self, DataType data_type, ClientId client_id=None, InstrumentId instrument_id=None, bool update_catalog=False, dict params=None) → void<a href="#subscribe_dataself-datatype-data_type-clientid-client_idnone-instrumentid-instrument_idnone-bool-update_catalogfalse-dict-paramsnone--void" class="hash-link" aria-label="Direct link to subscribe_data(self, DataType data_type, ClientId client_id=None, InstrumentId instrument_id=None, bool update_catalog=False, dict params=None) → void" title="Direct link to subscribe_data(self, DataType data_type, ClientId client_id=None, InstrumentId instrument_id=None, bool update_catalog=False, dict params=None) → void">​</a></h4>
<p>Subscribe to data of the given data type.</p>
<p>Once subscribed, any matching data published on the message bus is forwarded
to the on_data handler.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>data_type</strong> (<a href="../model/data/index.htm#posei_trader.model.data.DataType"><em>DataType</em></a>) – The data type to subscribe to.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The data client ID. If supplied then a Subscribe command will be
sent to the corresponding data client.</li>
<li><strong>update_catalog</strong> (<em>bool</em> <em>,</em> <em>optional</em>) – Whether to update a catalog with the received data.
Only useful when downloading data during a backtest.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_index_pricesself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void">subscribe_index_prices(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void<a href="#subscribe_index_pricesself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void" class="hash-link" aria-label="Direct link to subscribe_index_prices(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void" title="Direct link to subscribe_index_prices(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Subscribe to streaming IndexPriceUpdate data for the given instrument ID.</p>
<p>Once subscribed, any matching index price updates published on the message bus are forwarded
to the on_index_price handler.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument to subscribe to.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_instrumentself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void">subscribe_instrument(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void<a href="#subscribe_instrumentself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void" class="hash-link" aria-label="Direct link to subscribe_instrument(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void" title="Direct link to subscribe_instrument(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Subscribe to update Instrument data for the given instrument ID.</p>
<p>Once subscribed, any matching instrument data published on the message bus is forwarded
to the on_instrument handler.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument ID for the subscription.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_instrument_closeself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void">subscribe_instrument_close(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void<a href="#subscribe_instrument_closeself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void" class="hash-link" aria-label="Direct link to subscribe_instrument_close(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void" title="Direct link to subscribe_instrument_close(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Subscribe to close updates for the given instrument ID.</p>
<p>Once subscribed, any matching instrument close data published on the message bus is forwarded
to the on_instrument_close handler.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument to subscribe to status updates for.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_instrument_statusself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void">subscribe_instrument_status(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void<a href="#subscribe_instrument_statusself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void" class="hash-link" aria-label="Direct link to subscribe_instrument_status(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void" title="Direct link to subscribe_instrument_status(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Subscribe to status updates for the given instrument ID.</p>
<p>Once subscribed, any matching instrument status data published on the message bus is forwarded
to the on_instrument_status handler.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument to subscribe to status updates for.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_instrumentsself-venue-venue-clientid-client_idnone-dict-paramsnone--void">subscribe_instruments(self, Venue venue, ClientId client_id=None, dict params=None) → void<a href="#subscribe_instrumentsself-venue-venue-clientid-client_idnone-dict-paramsnone--void" class="hash-link" aria-label="Direct link to subscribe_instruments(self, Venue venue, ClientId client_id=None, dict params=None) → void" title="Direct link to subscribe_instruments(self, Venue venue, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Subscribe to update Instrument data for the given venue.</p>
<p>Once subscribed, any matching instrument data published on the message bus is forwarded
the on_instrument handler.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>venue</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.Venue"><em>Venue</em></a>) – The venue for the subscription.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_mark_pricesself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void">subscribe_mark_prices(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void<a href="#subscribe_mark_pricesself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void" class="hash-link" aria-label="Direct link to subscribe_mark_prices(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void" title="Direct link to subscribe_mark_prices(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Subscribe to streaming MarkPriceUpdate data for the given instrument ID.</p>
<p>Once subscribed, any matching mark price updates published on the message bus are forwarded
to the on_mark_price handler.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument to subscribe to.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_order_book_at_intervalself-instrumentid-instrument_id-booktype-book_typebooktypel2_mbp-int-depth0-int-interval_ms1000-clientid-client_idnone-bool-managedtrue-dict-paramsnone--void">subscribe_order_book_at_interval(self, InstrumentId instrument_id, BookType book_type=BookType.L2_MBP, int depth=0, int interval_ms=1000, ClientId client_id=None, bool managed=True, dict params=None) → void<a href="#subscribe_order_book_at_intervalself-instrumentid-instrument_id-booktype-book_typebooktypel2_mbp-int-depth0-int-interval_ms1000-clientid-client_idnone-bool-managedtrue-dict-paramsnone--void" class="hash-link" aria-label="Direct link to subscribe_order_book_at_interval(self, InstrumentId instrument_id, BookType book_type=BookType.L2_MBP, int depth=0, int interval_ms=1000, ClientId client_id=None, bool managed=True, dict params=None) → void" title="Direct link to subscribe_order_book_at_interval(self, InstrumentId instrument_id, BookType book_type=BookType.L2_MBP, int depth=0, int interval_ms=1000, ClientId client_id=None, bool managed=True, dict params=None) → void">​</a></h4>
<p>Subscribe to an OrderBook at a specified interval for the given instrument ID.</p>
<p>Once subscribed, any matching order book updates published on the message bus are forwarded
to the on_order_book handler.</p>
<p>The DataEngine will only maintain one order book for each instrument.
Because of this - the level, depth and params for the stream will be set
as per the last subscription request (this will also affect all subscribers).</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The order book instrument ID to subscribe to.</li>
<li><strong>book_type</strong> (BookType {<code>L1_MBP</code>, <code>L2_MBP</code>, <code>L3_MBO</code>}) – The order book type.</li>
<li><strong>depth</strong> (<em>int</em> <em>,</em> <em>optional</em>) – The maximum depth for the order book. A depth of 0 is maximum depth.</li>
<li><strong>interval_ms</strong> (<em>int</em> <em>,</em> <em>default 1000</em>) – The order book snapshot interval (milliseconds).</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>managed</strong> (<em>bool</em> <em>,</em> <em>default True</em>) – If an order book should be managed by the data engine based on the subscribed feed.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
<li><strong>Raises:</strong>
<ul>
<li><strong>ValueError</strong> – If depth is negative (&lt; 0).</li>
<li><strong>ValueError</strong> – If interval_ms is not positive (&gt; 0).</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-75">WARNING<a href="#warning-75" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Consider subscribing to order book deltas if you need intervals less than 100 milliseconds.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_order_book_deltasself-instrumentid-instrument_id-booktype-book_typebooktypel2_mbp-int-depth0-clientid-client_idnone-bool-managedtrue-bool-pyo3_conversionfalse-dict-paramsnone--void">subscribe_order_book_deltas(self, InstrumentId instrument_id, BookType book_type=BookType.L2_MBP, int depth=0, ClientId client_id=None, bool managed=True, bool pyo3_conversion=False, dict params=None) → void<a href="#subscribe_order_book_deltasself-instrumentid-instrument_id-booktype-book_typebooktypel2_mbp-int-depth0-clientid-client_idnone-bool-managedtrue-bool-pyo3_conversionfalse-dict-paramsnone--void" class="hash-link" aria-label="Direct link to subscribe_order_book_deltas(self, InstrumentId instrument_id, BookType book_type=BookType.L2_MBP, int depth=0, ClientId client_id=None, bool managed=True, bool pyo3_conversion=False, dict params=None) → void" title="Direct link to subscribe_order_book_deltas(self, InstrumentId instrument_id, BookType book_type=BookType.L2_MBP, int depth=0, ClientId client_id=None, bool managed=True, bool pyo3_conversion=False, dict params=None) → void">​</a></h4>
<p>Subscribe to the order book data stream, being a snapshot then deltas
for the given instrument ID.</p>
<p>Once subscribed, any matching order book data published on the message bus is forwarded
to the on_order_book_deltas handler.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The order book instrument ID to subscribe to.</li>
<li><strong>book_type</strong> (BookType {<code>L1_MBP</code>, <code>L2_MBP</code>, <code>L3_MBO</code>}) – The order book type.</li>
<li><strong>depth</strong> (<em>int</em> <em>,</em> <em>optional</em>) – The maximum depth for the order book. A depth of 0 is maximum depth.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>managed</strong> (<em>bool</em> <em>,</em> <em>default True</em>) – If an order book should be managed by the data engine based on the subscribed feed.</li>
<li><strong>pyo3_conversion</strong> (<em>bool</em> <em>,</em> <em>default False</em>) – If received deltas should be converted to nautilus_pyo3.OrderBookDeltas
prior to being passed to the on_order_book_deltas handler.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_order_book_depthself-instrumentid-instrument_id-booktype-book_typebooktypel2_mbp-int-depth0-clientid-client_idnone-bool-managedtrue-bool-pyo3_conversionfalse-dict-paramsnone--void">subscribe_order_book_depth(self, InstrumentId instrument_id, BookType book_type=BookType.L2_MBP, int depth=0, ClientId client_id=None, bool managed=True, bool pyo3_conversion=False, dict params=None) → void<a href="#subscribe_order_book_depthself-instrumentid-instrument_id-booktype-book_typebooktypel2_mbp-int-depth0-clientid-client_idnone-bool-managedtrue-bool-pyo3_conversionfalse-dict-paramsnone--void" class="hash-link" aria-label="Direct link to subscribe_order_book_depth(self, InstrumentId instrument_id, BookType book_type=BookType.L2_MBP, int depth=0, ClientId client_id=None, bool managed=True, bool pyo3_conversion=False, dict params=None) → void" title="Direct link to subscribe_order_book_depth(self, InstrumentId instrument_id, BookType book_type=BookType.L2_MBP, int depth=0, ClientId client_id=None, bool managed=True, bool pyo3_conversion=False, dict params=None) → void">​</a></h4>
<p>Subscribe to the order book depth stream for the given instrument ID.</p>
<p>Once subscribed, any matching order book data published on the message bus is forwarded
to the on_order_book_depth handler.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The order book instrument ID to subscribe to.</li>
<li><strong>book_type</strong> (BookType {<code>L1_MBP</code>, <code>L2_MBP</code>, <code>L3_MBO</code>}) – The order book type.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>managed</strong> (<em>bool</em> <em>,</em> <em>default True</em>) – If an order book should be managed by the data engine based on the subscribed feed.</li>
<li><strong>pyo3_conversion</strong> (<em>bool</em> <em>,</em> <em>default False</em>) – If received deltas should be converted to nautilus_pyo3.OrderBookDepth
prior to being passed to the on_order_book_depth handler.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_quote_ticksself-instrumentid-instrument_id-clientid-client_idnone-bool-update_catalogfalse-dict-paramsnone--void">subscribe_quote_ticks(self, InstrumentId instrument_id, ClientId client_id=None, bool update_catalog=False, dict params=None) → void<a href="#subscribe_quote_ticksself-instrumentid-instrument_id-clientid-client_idnone-bool-update_catalogfalse-dict-paramsnone--void" class="hash-link" aria-label="Direct link to subscribe_quote_ticks(self, InstrumentId instrument_id, ClientId client_id=None, bool update_catalog=False, dict params=None) → void" title="Direct link to subscribe_quote_ticks(self, InstrumentId instrument_id, ClientId client_id=None, bool update_catalog=False, dict params=None) → void">​</a></h4>
<p>Subscribe to streaming QuoteTick data for the given instrument ID.</p>
<p>Once subscribed, any matching quote tick data published on the message bus is forwarded
to the on_quote_tick handler.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The tick instrument to subscribe to.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>update_catalog</strong> (<em>bool</em> <em>,</em> <em>optional</em>) – Whether to update a catalog with the received data.
Only useful when downloading data during a backtest.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_signalself-str-name--void">subscribe_signal(self, str name=&#x27;&#x27;) → void<a href="#subscribe_signalself-str-name--void" class="hash-link" aria-label="Direct link to subscribe_signal(self, str name=&#x27;&#x27;) → void" title="Direct link to subscribe_signal(self, str name=&#x27;&#x27;) → void">​</a></h4>
<p>Subscribe to a specific signal by name, or to all signals if no name is provided.</p>
<p>Once subscribed, any matching signal data published on the message bus is forwarded
to the on_signal handler.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>name</strong> (<em>str</em> <em>,</em> <em>optional</em>) – The name of the signal to subscribe to. If not provided or an empty
string is passed, the subscription will include all signals.
The signal name is case-insensitive and will be capitalized
(e.g., ‘example’ becomes ‘SignalExample*’).</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_trade_ticksself-instrumentid-instrument_id-clientid-client_idnone-bool-update_catalogfalse-dict-paramsnone--void">subscribe_trade_ticks(self, InstrumentId instrument_id, ClientId client_id=None, bool update_catalog=False, dict params=None) → void<a href="#subscribe_trade_ticksself-instrumentid-instrument_id-clientid-client_idnone-bool-update_catalogfalse-dict-paramsnone--void" class="hash-link" aria-label="Direct link to subscribe_trade_ticks(self, InstrumentId instrument_id, ClientId client_id=None, bool update_catalog=False, dict params=None) → void" title="Direct link to subscribe_trade_ticks(self, InstrumentId instrument_id, ClientId client_id=None, bool update_catalog=False, dict params=None) → void">​</a></h4>
<p>Subscribe to streaming TradeTick data for the given instrument ID.</p>
<p>Once subscribed, any matching trade tick data published on the message bus is forwarded
to the on_trade_tick handler.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The tick instrument to subscribe to.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>update_catalog</strong> (<em>bool</em> <em>,</em> <em>optional</em>) – Whether to update a catalog with the received data.
Only useful when downloading data during a backtest.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="to_importable_configself--importableactorconfig">to_importable_config(self) → <a href="../config/index.htm#nautilus_trader.common.config.ImportableActorConfig">ImportableActorConfig</a><a href="#to_importable_configself--importableactorconfig" class="hash-link" aria-label="Direct link to to_importable_configself--importableactorconfig" title="Direct link to to_importable_configself--importableactorconfig">​</a></h4>
<p>Returns an importable configuration for this actor.</p>
<ul>
<li><strong>Return type:</strong>
<a href="../config/index.htm#nautilus_trader.common.config.ImportableActorConfig">ImportableActorConfig</a></li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="trader_id-4">trader_id<a href="#trader_id-4" class="hash-link" aria-label="Direct link to trader_id" title="Direct link to trader_id">​</a></h4>
<p>The trader ID associated with the component.</p>
<ul>
<li><strong>Returns:</strong>
TraderId</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="type-3">type<a href="#type-3" class="hash-link" aria-label="Direct link to type" title="Direct link to type">​</a></h4>
<p>The components type.</p>
<ul>
<li><strong>Returns:</strong>
type</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_barsself-bartype-bar_type-clientid-client_idnone-dict-paramsnone--void">unsubscribe_bars(self, BarType bar_type, ClientId client_id=None, dict params=None) → void<a href="#unsubscribe_barsself-bartype-bar_type-clientid-client_idnone-dict-paramsnone--void" class="hash-link" aria-label="Direct link to unsubscribe_bars(self, BarType bar_type, ClientId client_id=None, dict params=None) → void" title="Direct link to unsubscribe_bars(self, BarType bar_type, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Unsubscribe from streaming Bar data for the given bar type.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>bar_type</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.BarType"><em>BarType</em></a>) – The bar type to unsubscribe from.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_dataself-datatype-data_type-clientid-client_idnone-instrumentid-instrument_idnone-dict-paramsnone--void">unsubscribe_data(self, DataType data_type, ClientId client_id=None, InstrumentId instrument_id=None, dict params=None) → void<a href="#unsubscribe_dataself-datatype-data_type-clientid-client_idnone-instrumentid-instrument_idnone-dict-paramsnone--void" class="hash-link" aria-label="Direct link to unsubscribe_data(self, DataType data_type, ClientId client_id=None, InstrumentId instrument_id=None, dict params=None) → void" title="Direct link to unsubscribe_data(self, DataType data_type, ClientId client_id=None, InstrumentId instrument_id=None, dict params=None) → void">​</a></h4>
<p>Unsubscribe from data of the given data type.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>data_type</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.DataType"><em>DataType</em></a>) – The data type to unsubscribe from.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The data client ID. If supplied then an Unsubscribe command will
be sent to the data client.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_index_pricesself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void">unsubscribe_index_prices(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void<a href="#unsubscribe_index_pricesself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void" class="hash-link" aria-label="Direct link to unsubscribe_index_prices(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void" title="Direct link to unsubscribe_index_prices(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Unsubscribe from streaming IndexPriceUpdate data for the given instrument ID.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument to subscribe to.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_instrumentself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void">unsubscribe_instrument(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void<a href="#unsubscribe_instrumentself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void" class="hash-link" aria-label="Direct link to unsubscribe_instrument(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void" title="Direct link to unsubscribe_instrument(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Unsubscribe from update Instrument data for the given instrument ID.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument to unsubscribe from.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_instrument_statusself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void">unsubscribe_instrument_status(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void<a href="#unsubscribe_instrument_statusself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void" class="hash-link" aria-label="Direct link to unsubscribe_instrument_status(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void" title="Direct link to unsubscribe_instrument_status(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Unsubscribe to status updates of the given venue.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument to unsubscribe to status updates for.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_instrumentsself-venue-venue-clientid-client_idnone-dict-paramsnone--void">unsubscribe_instruments(self, Venue venue, ClientId client_id=None, dict params=None) → void<a href="#unsubscribe_instrumentsself-venue-venue-clientid-client_idnone-dict-paramsnone--void" class="hash-link" aria-label="Direct link to unsubscribe_instruments(self, Venue venue, ClientId client_id=None, dict params=None) → void" title="Direct link to unsubscribe_instruments(self, Venue venue, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Unsubscribe from update Instrument data for the given venue.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>venue</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.Venue"><em>Venue</em></a>) – The venue for the subscription.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>)  – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_mark_pricesself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void">unsubscribe_mark_prices(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void<a href="#unsubscribe_mark_pricesself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void" class="hash-link" aria-label="Direct link to unsubscribe_mark_prices(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void" title="Direct link to unsubscribe_mark_prices(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Unsubscribe from streaming MarkPriceUpdate data for the given instrument ID.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument to subscribe to.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_order_book_at_intervalself-instrumentid-instrument_id-int-interval_ms1000-clientid-client_idnone-dict-paramsnone--void">unsubscribe_order_book_at_interval(self, InstrumentId instrument_id, int interval_ms=1000, ClientId client_id=None, dict params=None) → void<a href="#unsubscribe_order_book_at_intervalself-instrumentid-instrument_id-int-interval_ms1000-clientid-client_idnone-dict-paramsnone--void" class="hash-link" aria-label="Direct link to unsubscribe_order_book_at_interval(self, InstrumentId instrument_id, int interval_ms=1000, ClientId client_id=None, dict params=None) → void" title="Direct link to unsubscribe_order_book_at_interval(self, InstrumentId instrument_id, int interval_ms=1000, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Unsubscribe from an OrderBook at a specified interval for the given instrument ID.</p>
<p>The interval must match the previously subscribed interval.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The order book instrument to subscribe to.</li>
<li><strong>interval_ms</strong> (<em>int</em> <em>,</em> <em>default 1000</em>) – The order book snapshot interval (milliseconds).</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_order_book_deltasself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void">unsubscribe_order_book_deltas(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void<a href="#unsubscribe_order_book_deltasself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void" class="hash-link" aria-label="Direct link to unsubscribe_order_book_deltas(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void" title="Direct link to unsubscribe_order_book_deltas(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Unsubscribe the order book deltas stream for the given instrument ID.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The order book instrument to subscribe to.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_order_book_depthself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void">unsubscribe_order_book_depth(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void<a href="#unsubscribe_order_book_depthself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void" class="hash-link" aria-label="Direct link to unsubscribe_order_book_depth(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void" title="Direct link to unsubscribe_order_book_depth(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Unsubscribe the order book depth stream for the given instrument ID.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The order book instrument to subscribe to.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_quote_ticksself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void">unsubscribe_quote_ticks(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void<a href="#unsubscribe_quote_ticksself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void" class="hash-link" aria-label="Direct link to unsubscribe_quote_ticks(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void" title="Direct link to unsubscribe_quote_ticks(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Unsubscribe from streaming QuoteTick data for the given instrument ID.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The tick instrument to unsubscribe from.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_trade_ticksself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void">unsubscribe_trade_ticks(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void<a href="#unsubscribe_trade_ticksself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void" class="hash-link" aria-label="Direct link to unsubscribe_trade_ticks(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void" title="Direct link to unsubscribe_trade_ticks(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Unsubscribe from streaming TradeTick data for the given instrument ID.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The tick instrument ID to unsubscribe from.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="update_syntheticself-syntheticinstrument-synthetic--void">update_synthetic(self, SyntheticInstrument synthetic) → void<a href="#update_syntheticself-syntheticinstrument-synthetic--void" class="hash-link" aria-label="Direct link to update_synthetic(self, SyntheticInstrument synthetic) → void" title="Direct link to update_synthetic(self, SyntheticInstrument synthetic) → void">​</a></h4>
<p>Update the synthetic instrument in the cache.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>synthetic</strong> (<a href="../model/instruments/index.htm#nautilus_trader.model.instruments.SyntheticInstrument"><em>SyntheticInstrument</em></a>) – The synthetic instrument to update in the cache.</li>
<li><strong>Raises:</strong>
<strong>KeyError</strong> – If synthetic does not already exist in the cache.</li>
</ul>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="class-simulationmodule"><em>class</em> SimulationModule<a href="#class-simulationmodule" class="hash-link" aria-label="Direct link to class-simulationmodule" title="Direct link to class-simulationmodule">​</a></h3>
<p>Bases: <a href="../common/index.htm#nautilus_trader.common.actor.Actor"><code>Actor</code></a></p>
<p>SimulationModule(config: SimulationModuleConfig)</p>
<p>The base class for all simulation modules.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-76">WARNING<a href="#warning-76" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>This class should not be used directly, but through a concrete subclass.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="active_task_idsself--list-1">active_task_ids(self) → list<a href="#active_task_idsself--list-1" class="hash-link" aria-label="Direct link to active_task_ids(self) → list" title="Direct link to active_task_ids(self) → list">​</a></h4>
<p>Return the active task identifiers.</p>
<ul>
<li><strong>Return type:</strong>
list[<a href="../common/index.htm#nautilus_trader.common.executor.TaskId">TaskId</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="add_syntheticself-syntheticinstrument-synthetic--void-1">add_synthetic(self, SyntheticInstrument synthetic) → void<a href="#add_syntheticself-syntheticinstrument-synthetic--void-1" class="hash-link" aria-label="Direct link to add_synthetic(self, SyntheticInstrument synthetic) → void" title="Direct link to add_synthetic(self, SyntheticInstrument synthetic) → void">​</a></h4>
<p>Add the created synthetic instrument to the cache.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>synthetic</strong> (<a href="../model/instruments/index.htm#nautilus_trader.model.instruments.SyntheticInstrument"><em>SyntheticInstrument</em></a>) – The synthetic instrument to add to the cache.</li>
<li><strong>Raises:</strong>
<strong>KeyError</strong> – If synthetic is already in the cache.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="cache-3">cache<a href="#cache-3" class="hash-link" aria-label="Direct link to cache" title="Direct link to cache">​</a></h4>
<p>The read-only cache for the actor.</p>
<ul>
<li><strong>Returns:</strong>
CacheFacade</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="cancel_all_tasksself--void-1">cancel_all_tasks(self) → void<a href="#cancel_all_tasksself--void-1" class="hash-link" aria-label="Direct link to cancel_all_tasks(self) → void" title="Direct link to cancel_all_tasks(self) → void">​</a></h4>
<p>Cancel all queued and active tasks.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="cancel_taskself-task_id-taskid--void-1">cancel_task(self, task_id: <a href="../common/index.htm#nautilus_trader.common.executor.TaskId">TaskId</a>) → void<a href="#cancel_taskself-task_id-taskid--void-1" class="hash-link" aria-label="Direct link to cancel_taskself-task_id-taskid--void-1" title="Direct link to cancel_taskself-task_id-taskid--void-1">​</a></h4>
<p>Cancel the task with the given task_id (if queued or active).</p>
<p>If the task is not found then a warning is logged.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>task_id</strong> (<a href="../common/index.htm#nautilus_trader.common.executor.TaskId"><em>TaskId</em></a>) – The task identifier.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="clock-1">clock<a href="#clock-1" class="hash-link" aria-label="Direct link to clock" title="Direct link to clock">​</a></h4>
<p>The actors clock.</p>
<ul>
<li><strong>Returns:</strong>
Clock</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="config-1">config<a href="#config-1" class="hash-link" aria-label="Direct link to config" title="Direct link to config">​</a></h4>
<p>The actors configuration.</p>
<ul>
<li><strong>Returns:</strong>
NautilusConfig</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="degradeself--void-4">degrade(self) → void<a href="#degradeself--void-4" class="hash-link" aria-label="Direct link to degrade(self) → void" title="Direct link to degrade(self) → void">​</a></h4>
<p>Degrade the component.</p>
<p>While executing on_degrade() any exception will be logged and reraised, then the component
will remain in a <code>DEGRADING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-77">WARNING<a href="#warning-77" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="deregister_warning_eventself-type-event--void-1">deregister_warning_event(self, type event) → void<a href="#deregister_warning_eventself-type-event--void-1" class="hash-link" aria-label="Direct link to deregister_warning_event(self, type event) → void" title="Direct link to deregister_warning_event(self, type event) → void">​</a></h4>
<p>Deregister the given event type from warning log levels.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>event</strong> (<em>type</em>) – The event class to deregister.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="disposeself--void-4">dispose(self) → void<a href="#disposeself--void-4" class="hash-link" aria-label="Direct link to dispose(self) → void" title="Direct link to dispose(self) → void">​</a></h4>
<p>Dispose of the component.</p>
<p>While executing on_dispose() any exception will be logged and reraised, then the component
will remain in a <code>DISPOSING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-78">WARNING<a href="#warning-78" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="exchange-1">exchange<a href="#exchange-1" class="hash-link" aria-label="Direct link to exchange" title="Direct link to exchange">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="faultself--void-4">fault(self) → void<a href="#faultself--void-4" class="hash-link" aria-label="Direct link to fault(self) → void" title="Direct link to fault(self) → void">​</a></h4>
<p>Fault the component.</p>
<p>Calling this method multiple times has the same effect as calling it once (it is idempotent).
Once called, it cannot be reversed, and no other methods should be called on this instance.</p>
<p>While executing on_fault() any exception will be logged and reraised, then the component
will remain in a <code>FAULTING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-79">WARNING<a href="#warning-79" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="classmethod-fully_qualified_namecls--str-4"><em>classmethod</em> fully_qualified_name(cls) → str<a href="#classmethod-fully_qualified_namecls--str-4" class="hash-link" aria-label="Direct link to classmethod-fully_qualified_namecls--str-4" title="Direct link to classmethod-fully_qualified_namecls--str-4">​</a></h4>
<p>Return the fully qualified name for the components class.</p>
<ul>
<li><strong>Return type:</strong>
str</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="greeks-1">greeks<a href="#greeks-1" class="hash-link" aria-label="Direct link to greeks" title="Direct link to greeks">​</a></h4>
<p>The read-only greeks calculator for the actor.</p>
<ul>
<li><strong>Returns:</strong>
GreeksCalculator</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_barself-bar-bar--void-1">handle_bar(self, Bar bar) → void<a href="#handle_barself-bar-bar--void-1" class="hash-link" aria-label="Direct link to handle_bar(self, Bar bar) → void" title="Direct link to handle_bar(self, Bar bar) → void">​</a></h4>
<p>Handle the given bar data.</p>
<p>If state is <code>RUNNING</code> then passes to on_bar.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>bar</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.Bar"><em>Bar</em></a>) – The bar received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-80">WARNING<a href="#warning-80" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_barsself-list-bars--void-1">handle_bars(self, list bars) → void<a href="#handle_barsself-list-bars--void-1" class="hash-link" aria-label="Direct link to handle_bars(self, list bars) → void" title="Direct link to handle_bars(self, list bars) → void">​</a></h4>
<p>Handle the given historical bar data by handling each bar individually.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>bars</strong> (<em>list</em> <em>[</em><a href="../model/data/index.htm#nautilus_trader.model.data.Bar"><em>Bar</em></a> <em>]</em>) – The bars to handle.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-81">WARNING<a href="#warning-81" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<ul>
<li><strong>Raises:</strong>
<strong>RuntimeError</strong> – If bar data has incorrectly sorted timestamps (not monotonically increasing).</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_dataself-data-data--void-1">handle_data(self, Data data) → void<a href="#handle_dataself-data-data--void-1" class="hash-link" aria-label="Direct link to handle_data(self, Data data) → void" title="Direct link to handle_data(self, Data data) → void">​</a></h4>
<p>Handle the given data.</p>
<p>If state is <code>RUNNING</code> then passes to on_data.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>data</strong> (<a href="../core/index.htm#nautilus_trader.core.Data"><em>Data</em></a>) – The data received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-82">WARNING<a href="#warning-82" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_eventself-event-event--void-1">handle_event(self, Event event) → void<a href="#handle_eventself-event-event--void-1" class="hash-link" aria-label="Direct link to handle_event(self, Event event) → void" title="Direct link to handle_event(self, Event event) → void">​</a></h4>
<p>Handle the given event.</p>
<p>If state is <code>RUNNING</code> then passes to on_event.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>event</strong> (<a href="../core/index.htm#nautilus_trader.core.Event"><em>Event</em></a>) – The event received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-83">WARNING<a href="#warning-83" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_historical_dataself-data--void-1">handle_historical_data(self, data) → void<a href="#handle_historical_dataself-data--void-1" class="hash-link" aria-label="Direct link to handle_historical_data(self, data) → void" title="Direct link to handle_historical_data(self, data) → void">​</a></h4>
<p>Handle the given historical data.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>data</strong> (<a href="../core/index.htm#nautilus_trader.core.Data"><em>Data</em></a>) – The historical data received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-84">WARNING<a href="#warning-84" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_index_priceself-indexpriceupdate-index_price--void-1">handle_index_price(self, IndexPriceUpdate index_price) → void<a href="#handle_index_priceself-indexpriceupdate-index_price--void-1" class="hash-link" aria-label="Direct link to handle_index_price(self, IndexPriceUpdate index_price) → void" title="Direct link to handle_index_price(self, IndexPriceUpdate index_price) → void">​</a></h4>
<p>Handle the given index price update.</p>
<p>If state is <code>RUNNING</code> then passes to on_index_price.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>index_price</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.IndexPriceUpdate"><em>IndexPriceUpdate</em></a>) – The index price update received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-85">WARNING<a href="#warning-85" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_instrumentself-instrument-instrument--void-1">handle_instrument(self, Instrument instrument) → void<a href="#handle_instrumentself-instrument-instrument--void-1" class="hash-link" aria-label="Direct link to handle_instrument(self, Instrument instrument) → void" title="Direct link to handle_instrument(self, Instrument instrument) → void">​</a></h4>
<p>Handle the given instrument.</p>
<p>Passes to on_instrument if state is <code>RUNNING</code>.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>instrument</strong> (<a href="../model/instruments/index.htm#nautilus_trader.model.instruments.Instrument"><em>Instrument</em></a>) – The instrument received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-86">WARNING<a href="#warning-86" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_instrument_closeself-instrumentclose-update--void-1">handle_instrument_close(self, InstrumentClose update) → void<a href="#handle_instrument_closeself-instrumentclose-update--void-1" class="hash-link" aria-label="Direct link to handle_instrument_close(self, InstrumentClose update) → void" title="Direct link to handle_instrument_close(self, InstrumentClose update) → void">​</a></h4>
<p>Handle the given instrument close update.</p>
<p>If state is <code>RUNNING</code> then passes to on_instrument_close.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>update</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.InstrumentClose"><em>InstrumentClose</em></a>) – The update received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-87">WARNING<a href="#warning-87" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_instrument_statusself-instrumentstatus-data--void-1">handle_instrument_status(self, InstrumentStatus data) → void<a href="#handle_instrument_statusself-instrumentstatus-data--void-1" class="hash-link" aria-label="Direct link to handle_instrument_status(self, InstrumentStatus data) → void" title="Direct link to handle_instrument_status(self, InstrumentStatus data) → void">​</a></h4>
<p>Handle the given instrument status update.</p>
<p>If state is <code>RUNNING</code> then passes to on_instrument_status.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>data</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.InstrumentStatus"><em>InstrumentStatus</em></a>) – The status update received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-88">WARNING<a href="#warning-88" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_instrumentsself-list-instruments--void-1">handle_instruments(self, list instruments) → void<a href="#handle_instrumentsself-list-instruments--void-1" class="hash-link" aria-label="Direct link to handle_instruments(self, list instruments) → void" title="Direct link to handle_instruments(self, list instruments) → void">​</a></h4>
<p>Handle the given instruments data by handling each instrument individually.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>instruments</strong> (<em>list</em> <em>[</em><a href="../model/instruments/index.htm#nautilus_trader.model.instruments.Instrument"><em>Instrument</em></a> <em>]</em>) – The instruments received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-89">WARNING<a href="#warning-89" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_mark_priceself-markpriceupdate-mark_price--void-1">handle_mark_price(self, MarkPriceUpdate mark_price) → void<a href="#handle_mark_priceself-markpriceupdate-mark_price--void-1" class="hash-link" aria-label="Direct link to handle_mark_price(self, MarkPriceUpdate mark_price) → void" title="Direct link to handle_mark_price(self, MarkPriceUpdate mark_price) → void">​</a></h4>
<p>Handle the given mark price update.</p>
<p>If state is <code>RUNNING</code> then passes to on_mark_price.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>mark_price</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.MarkPriceUpdate"><em>MarkPriceUpdate</em></a>) – The mark price update received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-90">WARNING<a href="#warning-90" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_order_bookself-orderbook-order_book--void-1">handle_order_book(self, OrderBook order_book) → void<a href="#handle_order_bookself-orderbook-order_book--void-1" class="hash-link" aria-label="Direct link to handle_order_book(self, OrderBook order_book) → void" title="Direct link to handle_order_book(self, OrderBook order_book) → void">​</a></h4>
<p>Handle the given order book.</p>
<p>Passes to on_order_book if state is <code>RUNNING</code>.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>order_book</strong> (<a href="../model/book/index.htm#nautilus_trader.model.book.OrderBook"><em>OrderBook</em></a>) – The order book received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-91">WARNING<a href="#warning-91" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_order_book_deltasself-deltas--void-1">handle_order_book_deltas(self, deltas) → void<a href="#handle_order_book_deltasself-deltas--void-1" class="hash-link" aria-label="Direct link to handle_order_book_deltas(self, deltas) → void" title="Direct link to handle_order_book_deltas(self, deltas) → void">​</a></h4>
<p>Handle the given order book deltas.</p>
<p>Passes to on_order_book_deltas if state is <code>RUNNING</code>.
The deltas will be nautilus_pyo3.OrderBookDeltas if the
pyo3_conversion flag was set for the subscription.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>deltas</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.OrderBookDeltas"><em>OrderBookDeltas</em></a> <em>or</em> <em>nautilus_pyo3.OrderBookDeltas</em>) – The order book deltas received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-92">WARNING<a href="#warning-92" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_order_book_depthself-orderbookdepth10-depth--void-1">handle_order_book_depth(self, OrderBookDepth10 depth) → void<a href="#handle_order_book_depthself-orderbookdepth10-depth--void-1" class="hash-link" aria-label="Direct link to handle_order_book_depth(self, OrderBookDepth10 depth) → void" title="Direct link to handle_order_book_depth(self, OrderBookDepth10 depth) → void">​</a></h4>
<p>Handle the given order book depth</p>
<p>Passes to on_order_book_depth if state is <code>RUNNING</code>.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>depth</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.OrderBookDepth10"><em>OrderBookDepth10</em></a>) – The order book depth received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-93">WARNING<a href="#warning-93" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_quote_tickself-quotetick-tick--void-1">handle_quote_tick(self, QuoteTick tick) → void<a href="#handle_quote_tickself-quotetick-tick--void-1" class="hash-link" aria-label="Direct link to handle_quote_tick(self, QuoteTick tick) → void" title="Direct link to handle_quote_tick(self, QuoteTick tick) → void">​</a></h4>
<p>Handle the given quote tick.</p>
<p>If state is <code>RUNNING</code> then passes to on_quote_tick.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>tick</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.QuoteTick"><em>QuoteTick</em></a>) – The tick received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-94">WARNING<a href="#warning-94" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_quote_ticksself-list-ticks--void-1">handle_quote_ticks(self, list ticks) → void<a href="#handle_quote_ticksself-list-ticks--void-1" class="hash-link" aria-label="Direct link to handle_quote_ticks(self, list ticks) → void" title="Direct link to handle_quote_ticks(self, list ticks) → void">​</a></h4>
<p>Handle the given historical quote tick data by handling each tick individually.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>ticks</strong> (<em>list</em> <em>[</em><a href="../model/data/index.htm#nautilus_trader.model.data.QuoteTick"><em>QuoteTick</em></a> <em>]</em>) – The ticks received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-95">WARNING<a href="#warning-95" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_signalself-data-signal--void-1">handle_signal(self, Data signal) → void<a href="#handle_signalself-data-signal--void-1" class="hash-link" aria-label="Direct link to handle_signal(self, Data signal) → void" title="Direct link to handle_signal(self, Data signal) → void">​</a></h4>
<p>Handle the given signal.</p>
<p>If state is <code>RUNNING</code> then passes to on_signal.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>signal</strong> (<a href="../core/index.htm#nautilus_trader.core.Data"><em>Data</em></a>) – The signal received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-96">WARNING<a href="#warning-96" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_trade_tickself-tradetick-tick--void-1">handle_trade_tick(self, TradeTick tick) → void<a href="#handle_trade_tickself-tradetick-tick--void-1" class="hash-link" aria-label="Direct link to handle_trade_tick(self, TradeTick tick) → void" title="Direct link to handle_trade_tick(self, TradeTick tick) → void">​</a></h4>
<p>Handle the given trade tick.</p>
<p>If state is <code>RUNNING</code> then passes to on_trade_tick.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>tick</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.TradeTick"><em>TradeTick</em></a>) – The tick received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-97">WARNING<a href="#warning-97" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_trade_ticksself-list-ticks--void-1">handle_trade_ticks(self, list ticks) → void<a href="#handle_trade_ticksself-list-ticks--void-1" class="hash-link" aria-label="Direct link to handle_trade_ticks(self, list ticks) → void" title="Direct link to handle_trade_ticks(self, list ticks) → void">​</a></h4>
<p>Handle the given historical trade tick data by handling each tick individually.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>ticks</strong> (<em>list</em> <em>[</em><a href="../model/data/index.htm#nautilus_trader.model.data.TradeTick"><em>TradeTick</em></a> <em>]</em>) – The ticks received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-98">WARNING<a href="#warning-98" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="has_active_tasksself--bool-1">has_active_tasks(self) → bool<a href="#has_active_tasksself--bool-1" class="hash-link" aria-label="Direct link to has_active_tasks(self) → bool" title="Direct link to has_active_tasks(self) → bool">​</a></h4>
<p>Return a value indicating whether there are any active tasks.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="has_any_tasksself--bool-1">has_any_tasks(self) → bool<a href="#has_any_tasksself--bool-1" class="hash-link" aria-label="Direct link to has_any_tasks(self) → bool" title="Direct link to has_any_tasks(self) → bool">​</a></h4>
<p>Return a value indicating whether there are any queued OR active tasks.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="has_pending_requestsself--bool-1">has_pending_requests(self) → bool<a href="#has_pending_requestsself--bool-1" class="hash-link" aria-label="Direct link to has_pending_requests(self) → bool" title="Direct link to has_pending_requests(self) → bool">​</a></h4>
<p>Return whether the actor is pending processing for any requests.</p>
<ul>
<li><strong>Returns:</strong>
True if any requests are pending, else False.</li>
<li><strong>Return type:</strong>
bool</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="has_queued_tasksself--bool-1">has_queued_tasks(self) → bool<a href="#has_queued_tasksself--bool-1" class="hash-link" aria-label="Direct link to has_queued_tasks(self) → bool" title="Direct link to has_queued_tasks(self) → bool">​</a></h4>
<p>Return a value indicating whether there are any queued tasks.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="id-5">id<a href="#id-5" class="hash-link" aria-label="Direct link to id" title="Direct link to id">​</a></h4>
<p>The components ID.</p>
<ul>
<li><strong>Returns:</strong>
ComponentId</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="indicators_initializedself--bool-1">indicators_initialized(self) → bool<a href="#indicators_initializedself--bool-1" class="hash-link" aria-label="Direct link to indicators_initialized(self) → bool" title="Direct link to indicators_initialized(self) → bool">​</a></h4>
<p>Return a value indicating whether all indicators are initialized.</p>
<ul>
<li><strong>Returns:</strong>
True if all initialized, else False</li>
<li><strong>Return type:</strong>
bool</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_degraded-4">is_degraded<a href="#is_degraded-4" class="hash-link" aria-label="Direct link to is_degraded" title="Direct link to is_degraded">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>DEGRADED</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_degraded</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_disposed-4">is_disposed<a href="#is_disposed-4" class="hash-link" aria-label="Direct link to is_disposed" title="Direct link to is_disposed">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>DISPOSED</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_disposed</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_faulted-4">is_faulted<a href="#is_faulted-4" class="hash-link" aria-label="Direct link to is_faulted" title="Direct link to is_faulted">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>FAULTED</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_faulted</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_initialized-4">is_initialized<a href="#is_initialized-4" class="hash-link" aria-label="Direct link to is_initialized" title="Direct link to is_initialized">​</a></h4>
<p>bool</p>
<p>Return whether the component has been initialized (component.state &gt;= <code>INITIALIZED</code>).</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_initialized</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_pending_requestself-uuid4-request_id--bool-1">is_pending_request(self, UUID4 request_id) → bool<a href="#is_pending_requestself-uuid4-request_id--bool-1" class="hash-link" aria-label="Direct link to is_pending_request(self, UUID4 request_id) → bool" title="Direct link to is_pending_request(self, UUID4 request_id) → bool">​</a></h4>
<p>Return whether the request for the given identifier is pending processing.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>request_id</strong> (<a href="../core/index.htm#nautilus_trader.core.UUID4"><em>UUID4</em></a>) – The request ID to check.</li>
<li><strong>Returns:</strong>
True if request is pending, else False.</li>
<li><strong>Return type:</strong>
bool</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_running-4">is_running<a href="#is_running-4" class="hash-link" aria-label="Direct link to is_running" title="Direct link to is_running">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>RUNNING</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_running</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_stopped-4">is_stopped<a href="#is_stopped-4" class="hash-link" aria-label="Direct link to is_stopped" title="Direct link to is_stopped">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>STOPPED</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_stopped</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="loadself-dict-state--void-1">load(self, dict state) → void<a href="#loadself-dict-state--void-1" class="hash-link" aria-label="Direct link to load(self, dict state) → void" title="Direct link to load(self, dict state) → void">​</a></h4>
<p>Load the actor/strategy state from the give state dictionary.</p>
<p>Calls on_load and passes the state.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>state</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>bytes</em> <em>]</em>) – The strategy state to load.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-99">WARNING<a href="#warning-99" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Exceptions raised will be caught, logged, and reraised.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="log-1">log<a href="#log-1" class="hash-link" aria-label="Direct link to log" title="Direct link to log">​</a></h4>
<p>The actors logger.</p>
<ul>
<li><strong>Returns:</strong>
Logger</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="log_diagnosticsself-logger-logger--void-1">log_diagnostics(self, Logger logger) → void<a href="#log_diagnosticsself-logger-logger--void-1" class="hash-link" aria-label="Direct link to log_diagnostics(self, Logger logger) → void" title="Direct link to log_diagnostics(self, Logger logger) → void">​</a></h4>
<p>Abstract method (implement in subclass).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="msgbus-2">msgbus<a href="#msgbus-2" class="hash-link" aria-label="Direct link to msgbus" title="Direct link to msgbus">​</a></h4>
<p>The message bus for the actor (if registered).</p>
<ul>
<li><strong>Returns:</strong>
MessageBus or <code>None</code></li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_barself-bar-bar--void-1">on_bar(self, Bar bar) → void<a href="#on_barself-bar-bar--void-1" class="hash-link" aria-label="Direct link to on_bar(self, Bar bar) → void" title="Direct link to on_bar(self, Bar bar) → void">​</a></h4>
<p>Actions to be performed when running and receives a bar.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>bar</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.Bar"><em>Bar</em></a>) – The bar received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-100">WARNING<a href="#warning-100" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_dataself-data--void-1">on_data(self, data) → void<a href="#on_dataself-data--void-1" class="hash-link" aria-label="Direct link to on_data(self, data) → void" title="Direct link to on_data(self, data) → void">​</a></h4>
<p>Actions to be performed when running and receives data.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>data</strong> (<a href="../core/index.htm#nautilus_trader.core.Data"><em>Data</em></a>) – The data received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-101">WARNING<a href="#warning-101" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_degradeself--void-1">on_degrade(self) → void<a href="#on_degradeself--void-1" class="hash-link" aria-label="Direct link to on_degrade(self) → void" title="Direct link to on_degrade(self) → void">​</a></h4>
<p>Actions to be performed on degrade.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-102">WARNING<a href="#warning-102" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<p>Should be overridden in the actor implementation.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_disposeself--void-1">on_dispose(self) → void<a href="#on_disposeself--void-1" class="hash-link" aria-label="Direct link to on_dispose(self) → void" title="Direct link to on_dispose(self) → void">​</a></h4>
<p>Actions to be performed on dispose.</p>
<p>Cleanup/release any resources used here.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-103">WARNING<a href="#warning-103" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_eventself-event-event--void-1">on_event(self, Event event) → void<a href="#on_eventself-event-event--void-1" class="hash-link" aria-label="Direct link to on_event(self, Event event) → void" title="Direct link to on_event(self, Event event) → void">​</a></h4>
<p>Actions to be performed running and receives an event.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>event</strong> (<a href="../core/index.htm#nautilus_trader.core.Event"><em>Event</em></a>) – The event received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-104">WARNING<a href="#warning-104" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_faultself--void-1">on_fault(self) → void<a href="#on_faultself--void-1" class="hash-link" aria-label="Direct link to on_fault(self) → void" title="Direct link to on_fault(self) → void">​</a></h4>
<p>Actions to be performed on fault.</p>
<p>Cleanup any resources used by the actor here.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-105">WARNING<a href="#warning-105" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<p>Should be overridden in the actor implementation.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_historical_dataself-data--void-1">on_historical_data(self, data) → void<a href="#on_historical_dataself-data--void-1" class="hash-link" aria-label="Direct link to on_historical_data(self, data) → void" title="Direct link to on_historical_data(self, data) → void">​</a></h4>
<p>Actions to be performed when running and receives historical data.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>data</strong> (<a href="../core/index.htm#nautilus_trader.core.Data"><em>Data</em></a>) – The historical data received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-106">WARNING<a href="#warning-106" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_index_priceself-indexpriceupdate-index_price--void-1">on_index_price(self, IndexPriceUpdate index_price) → void<a href="#on_index_priceself-indexpriceupdate-index_price--void-1" class="hash-link" aria-label="Direct link to on_index_price(self, IndexPriceUpdate index_price) → void" title="Direct link to on_index_price(self, IndexPriceUpdate index_price) → void">​</a></h4>
<p>Actions to be performed when running and receives an index price update.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>index_price</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.IndexPriceUpdate"><em>IndexPriceUpdate</em></a>) – The index price update received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-107">WARNING<a href="#warning-107" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_instrumentself-instrument-instrument--void-1">on_instrument(self, Instrument instrument) → void<a href="#on_instrumentself-instrument-instrument--void-1" class="hash-link" aria-label="Direct link to on_instrument(self, Instrument instrument) → void" title="Direct link to on_instrument(self, Instrument instrument) → void">​</a></h4>
<p>Actions to be performed when running and receives an instrument.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>instrument</strong> (<a href="../model/instruments/index.htm#nautilus_trader.model.instruments.Instrument"><em>Instrument</em></a>) – The instrument received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-108">WARNING<a href="#warning-108" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_instrument_closeself-instrumentclose-update--void-1">on_instrument_close(self, InstrumentClose update) → void<a href="#on_instrument_closeself-instrumentclose-update--void-1" class="hash-link" aria-label="Direct link to on_instrument_close(self, InstrumentClose update) → void" title="Direct link to on_instrument_close(self, InstrumentClose update) → void">​</a></h4>
<p>Actions to be performed when running and receives an instrument close
update.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>update</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.InstrumentClose"><em>InstrumentClose</em></a>) – The instrument close received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-109">WARNING<a href="#warning-109" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_instrument_statusself-instrumentstatus-data--void-1">on_instrument_status(self, InstrumentStatus data) → void<a href="#on_instrument_statusself-instrumentstatus-data--void-1" class="hash-link" aria-label="Direct link to on_instrument_status(self, InstrumentStatus data) → void" title="Direct link to on_instrument_status(self, InstrumentStatus data) → void">​</a></h4>
<p>Actions to be performed when running and receives an instrument status
update.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>data</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.InstrumentStatus"><em>InstrumentStatus</em></a>) – The instrument status update received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-110">WARNING<a href="#warning-110" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_loadself-dict-state--void-1">on_load(self, dict state) → void<a href="#on_loadself-dict-state--void-1" class="hash-link" aria-label="Direct link to on_load(self, dict state) → void" title="Direct link to on_load(self, dict state) → void">​</a></h4>
<p>Actions to be performed when the actor state is loaded.</p>
<p>Saved state values will be contained in the give state dictionary.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>state</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>bytes</em> <em>]</em>) – The strategy state to load.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-111">WARNING<a href="#warning-111" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_mark_priceself-markpriceupdate-mark_price--void-1">on_mark_price(self, MarkPriceUpdate mark_price) → void<a href="#on_mark_priceself-markpriceupdate-mark_price--void-1" class="hash-link" aria-label="Direct link to on_mark_price(self, MarkPriceUpdate mark_price) → void" title="Direct link to on_mark_price(self, MarkPriceUpdate mark_price) → void">​</a></h4>
<p>Actions to be performed when running and receives a mark price update.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>mark_price</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.MarkPriceUpdate"><em>MarkPriceUpdate</em></a>) – The mark price update received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-112">WARNING<a href="#warning-112" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_order_bookself-orderbook-order_book--void-1">on_order_book(self, OrderBook order_book) → void<a href="#on_order_bookself-orderbook-order_book--void-1" class="hash-link" aria-label="Direct link to on_order_book(self, OrderBook order_book) → void" title="Direct link to on_order_book(self, OrderBook order_book) → void">​</a></h4>
<p>Actions to be performed when running and receives an order book.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>order_book</strong> (<a href="../model/book/index.htm#nautilus_trader.model.book.OrderBook"><em>OrderBook</em></a>) – The order book received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-113">WARNING<a href="#warning-113" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_order_book_deltasself-deltas--void-1">on_order_book_deltas(self, deltas) → void<a href="#on_order_book_deltasself-deltas--void-1" class="hash-link" aria-label="Direct link to on_order_book_deltas(self, deltas) → void" title="Direct link to on_order_book_deltas(self, deltas) → void">​</a></h4>
<p>Actions to be performed when running and receives order book deltas.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>deltas</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.OrderBookDeltas"><em>OrderBookDeltas</em></a> <em>or</em> <em>nautilus_pyo3.OrderBookDeltas</em>) – The order book deltas received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-114">WARNING<a href="#warning-114" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_order_book_depthself-depth--void-1">on_order_book_depth(self, depth) → void<a href="#on_order_book_depthself-depth--void-1" class="hash-link" aria-label="Direct link to on_order_book_depth(self, depth) → void" title="Direct link to on_order_book_depth(self, depth) → void">​</a></h4>
<p>Actions to be performed when running and receives an order book depth.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>depth</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.OrderBookDepth10"><em>OrderBookDepth10</em></a>) – The order book depth received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-115">WARNING<a href="#warning-115" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_quote_tickself-quotetick-tick--void-1">on_quote_tick(self, QuoteTick tick) → void<a href="#on_quote_tickself-quotetick-tick--void-1" class="hash-link" aria-label="Direct link to on_quote_tick(self, QuoteTick tick) → void" title="Direct link to on_quote_tick(self, QuoteTick tick) → void">​</a></h4>
<p>Actions to be performed when running and receives a quote tick.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>tick</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.QuoteTick"><em>QuoteTick</em></a>) – The tick received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-116">WARNING<a href="#warning-116" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_resetself--void-1">on_reset(self) → void<a href="#on_resetself--void-1" class="hash-link" aria-label="Direct link to on_reset(self) → void" title="Direct link to on_reset(self) → void">​</a></h4>
<p>Actions to be performed on reset.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-117">WARNING<a href="#warning-117" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<p>Should be overridden in a user implementation.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_resumeself--void-1">on_resume(self) → void<a href="#on_resumeself--void-1" class="hash-link" aria-label="Direct link to on_resume(self) → void" title="Direct link to on_resume(self) → void">​</a></h4>
<p>Actions to be performed on resume.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-118">WARNING<a href="#warning-118" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_saveself--dict-1">on_save(self) → dict<a href="#on_saveself--dict-1" class="hash-link" aria-label="Direct link to on_save(self) → dict" title="Direct link to on_save(self) → dict">​</a></h4>
<p>Actions to be performed when the actor state is saved.</p>
<p>Create and return a state dictionary of values to be saved.</p>
<ul>
<li><strong>Returns:</strong>
The strategy state to save.</li>
<li><strong>Return type:</strong>
dict[str, bytes]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-119">WARNING<a href="#warning-119" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_signalself-signal--void-1">on_signal(self, signal) → void<a href="#on_signalself-signal--void-1" class="hash-link" aria-label="Direct link to on_signal(self, signal) → void" title="Direct link to on_signal(self, signal) → void">​</a></h4>
<p>Actions to be performed when running and receives signal data.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>signal</strong> (<a href="../core/index.htm#nautilus_trader.core.Data"><em>Data</em></a>) – The signal received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-120">WARNING<a href="#warning-120" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_startself--void-1">on_start(self) → void<a href="#on_startself--void-1" class="hash-link" aria-label="Direct link to on_start(self) → void" title="Direct link to on_start(self) → void">​</a></h4>
<p>Actions to be performed on start.</p>
<p>The intent is that this method is called once per trading ‘run’, when
initially starting.</p>
<p>It is recommended to subscribe/request for data here.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-121">WARNING<a href="#warning-121" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<p>Should be overridden in a user implementation.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_stopself--void-1">on_stop(self) → void<a href="#on_stopself--void-1" class="hash-link" aria-label="Direct link to on_stop(self) → void" title="Direct link to on_stop(self) → void">​</a></h4>
<p>Actions to be performed on stop.</p>
<p>The intent is that this method is called to pause, or when done for day.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-122">WARNING<a href="#warning-122" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<p>Should be overridden in a user implementation.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_trade_tickself-tradetick-tick--void-1">on_trade_tick(self, TradeTick tick) → void<a href="#on_trade_tickself-tradetick-tick--void-1" class="hash-link" aria-label="Direct link to on_trade_tick(self, TradeTick tick) → void" title="Direct link to on_trade_tick(self, TradeTick tick) → void">​</a></h4>
<p>Actions to be performed when running and receives a trade tick.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>tick</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.TradeTick"><em>TradeTick</em></a>) – The tick received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-123">WARNING<a href="#warning-123" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="pending_requestsself--set-1">pending_requests(self) → set<a href="#pending_requestsself--set-1" class="hash-link" aria-label="Direct link to pending_requests(self) → set" title="Direct link to pending_requests(self) → set">​</a></h4>
<p>Return the request IDs which are currently pending processing.</p>
<ul>
<li><strong>Return type:</strong>
set[<a href="../core/index.htm#nautilus_trader.core.UUID4">UUID4</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="portfolio-2">portfolio<a href="#portfolio-2" class="hash-link" aria-label="Direct link to portfolio" title="Direct link to portfolio">​</a></h4>
<p>The read-only portfolio for the actor.</p>
<ul>
<li><strong>Returns:</strong>
PortfolioFacade</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="pre_processself-data-data--void-1">pre_process(self, Data data) → void<a href="#pre_processself-data-data--void-1" class="hash-link" aria-label="Direct link to pre_process(self, Data data) → void" title="Direct link to pre_process(self, Data data) → void">​</a></h4>
<p>Abstract method pre_process (implement in subclass).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="processself-uint64_t-ts_now--void-2">process(self, uint64_t ts_now) → void<a href="#processself-uint64_t-ts_now--void-2" class="hash-link" aria-label="Direct link to process(self, uint64_t ts_now) → void" title="Direct link to process(self, uint64_t ts_now) → void">​</a></h4>
<p>Abstract method (implement in subclass).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="publish_dataself-datatype-data_type-data-data--void-1">publish_data(self, DataType data_type, Data data) → void<a href="#publish_dataself-datatype-data_type-data-data--void-1" class="hash-link" aria-label="Direct link to publish_data(self, DataType data_type, Data data) → void" title="Direct link to publish_data(self, DataType data_type, Data data) → void">​</a></h4>
<p>Publish the given data to the message bus.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>data_type</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.DataType"><em>DataType</em></a>) – The data type being published.</li>
<li><strong>data</strong> (<a href="../core/index.htm#nautilus_trader.core.Data"><em>Data</em></a>) – The data to publish.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="publish_signalself-str-name-value-uint64_t-ts_event0--void-1">publish_signal(self, str name, value, uint64_t ts_event=0) → void<a href="#publish_signalself-str-name-value-uint64_t-ts_event0--void-1" class="hash-link" aria-label="Direct link to publish_signal(self, str name, value, uint64_t ts_event=0) → void" title="Direct link to publish_signal(self, str name, value, uint64_t ts_event=0) → void">​</a></h4>
<p>Publish the given value as a signal to the message bus.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>name</strong> (<em>str</em>) – The name of the signal being published.
The signal name will be converted to title case, with each word capitalized
(e.g., ‘example’ becomes ‘SignalExample’).</li>
<li><strong>value</strong> (<em>object</em>) – The signal data to publish.</li>
<li><strong>ts_event</strong> (<em>uint64_t</em> <em>,</em> <em>optional</em>) – UNIX timestamp (nanoseconds) when the signal event occurred.
If <code>None</code> then will timestamp current time.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="queue_for_executorself-func-callable-any-tuple-argsnone-dict-kwargsnone-1">queue_for_executor(self, func: Callable[..., Any], tuple args=None, dict kwargs=None)<a href="#queue_for_executorself-func-callable-any-tuple-argsnone-dict-kwargsnone-1" class="hash-link" aria-label="Direct link to queue_for_executor(self, func: Callable[..., Any], tuple args=None, dict kwargs=None)" title="Direct link to queue_for_executor(self, func: Callable[..., Any], tuple args=None, dict kwargs=None)">​</a></h4>
<p>Queues the callable func to be executed as fn(*args, **kwargs) sequentially.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>func</strong> (<em>Callable</em>) – The function to be executed.</li>
<li><strong>args</strong> (<em>positional arguments</em>) – The positional arguments for the call to func.</li>
<li><strong>kwargs</strong> (<em>arbitrary keyword arguments</em>) – The keyword arguments for the call to func.</li>
</ul>
</li>
<li><strong>Raises:</strong>
<strong>TypeError</strong> – If func is not of type Callable.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="queued_task_idsself--list-1">queued_task_ids(self) → list<a href="#queued_task_idsself--list-1" class="hash-link" aria-label="Direct link to queued_task_ids(self) → list" title="Direct link to queued_task_ids(self) → list">​</a></h4>
<p>Return the queued task identifiers.</p>
<ul>
<li><strong>Return type:</strong>
list[<a href="../common/index.htm#nautilus_trader.common.executor.TaskId">TaskId</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="register_baseself-portfoliofacade-portfolio-messagebus-msgbus-cachefacade-cache-clock-clock--void-1">register_base(self, PortfolioFacade portfolio, MessageBus msgbus, CacheFacade cache, Clock clock) → void<a href="#register_baseself-portfoliofacade-portfolio-messagebus-msgbus-cachefacade-cache-clock-clock--void-1" class="hash-link" aria-label="Direct link to register_base(self, PortfolioFacade portfolio, MessageBus msgbus, CacheFacade cache, Clock clock) → void" title="Direct link to register_base(self, PortfolioFacade portfolio, MessageBus msgbus, CacheFacade cache, Clock clock) → void">​</a></h4>
<p>Register with a trader.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>portfolio</strong> (<a href="../portfolio/index.htm#nautilus_trader.portfolio.PortfolioFacade"><em>PortfolioFacade</em></a>) – The read-only portfolio for the actor.</li>
<li><strong>msgbus</strong> (<a href="../common/index.htm#nautilus_trader.common.component.MessageBus"><em>MessageBus</em></a>) – The message bus for the actor.</li>
<li><strong>cache</strong> (<a href="../cache/index.htm#nautilus_trader.cache.base.CacheFacade"><em>CacheFacade</em></a>) – The read-only cache for the actor.</li>
<li><strong>clock</strong> (<a href="../common/index.htm#nautilus_trader.common.component.Clock"><em>Clock</em></a>) – The clock for the actor.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-124">WARNING<a href="#warning-124" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="register_executorself-loop-asyncioabstracteventloop-executor-executor--void-1">register_executor(self, loop: asyncio.AbstractEventLoop, executor: Executor) → void<a href="#register_executorself-loop-asyncioabstracteventloop-executor-executor--void-1" class="hash-link" aria-label="Direct link to register_executor(self, loop: asyncio.AbstractEventLoop, executor: Executor) → void" title="Direct link to register_executor(self, loop: asyncio.AbstractEventLoop, executor: Executor) → void">​</a></h4>
<p>Register the given Executor for the actor.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>loop</strong> (<em>asyncio.AbstractEventLoop</em>) – The event loop of the application.</li>
<li><strong>executor</strong> (<em>concurrent.futures.Executor</em>) – The executor to register.</li>
</ul>
</li>
<li><strong>Raises:</strong>
<strong>TypeError</strong> – If executor is not of type concurrent.futures.Executor</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="register_indicator_for_barsself-bartype-bar_type-indicator-indicator--void-1">register_indicator_for_bars(self, BarType bar_type, Indicator indicator) → void<a href="#register_indicator_for_barsself-bartype-bar_type-indicator-indicator--void-1" class="hash-link" aria-label="Direct link to register_indicator_for_bars(self, BarType bar_type, Indicator indicator) → void" title="Direct link to register_indicator_for_bars(self, BarType bar_type, Indicator indicator) → void">​</a></h4>
<p>Register the given indicator with the actor/strategy to receive bar data for the
given bar type.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>bar_type</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.BarType"><em>BarType</em></a>) – The bar type for bar updates.</li>
<li><strong>indicator</strong> (<a href="../indicators/index.htm#nautilus_trader.indicators.base.indicator.Indicator"><em>Indicator</em></a>) – The indicator to register.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="register_indicator_for_quote_ticksself-instrumentid-instrument_id-indicator-indicator--void-1">register_indicator_for_quote_ticks(self, InstrumentId instrument_id, Indicator indicator) → void<a href="#register_indicator_for_quote_ticksself-instrumentid-instrument_id-indicator-indicator--void-1" class="hash-link" aria-label="Direct link to register_indicator_for_quote_ticks(self, InstrumentId instrument_id, Indicator indicator) → void" title="Direct link to register_indicator_for_quote_ticks(self, InstrumentId instrument_id, Indicator indicator) → void">​</a></h4>
<p>Register the given indicator with the actor/strategy to receive quote tick
data for the given instrument ID.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument ID for tick updates.</li>
<li><strong>indicator</strong> (<a href="../indicators/index.htm#nautilus_trader.indicators.base.indicator.Indicator"><em>Indicator</em></a>) – The indicator to register.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="register_indicator_for_trade_ticksself-instrumentid-instrument_id-indicator-indicator--void-1">register_indicator_for_trade_ticks(self, InstrumentId instrument_id, Indicator indicator) → void<a href="#register_indicator_for_trade_ticksself-instrumentid-instrument_id-indicator-indicator--void-1" class="hash-link" aria-label="Direct link to register_indicator_for_trade_ticks(self, InstrumentId instrument_id, Indicator indicator) → void" title="Direct link to register_indicator_for_trade_ticks(self, InstrumentId instrument_id, Indicator indicator) → void">​</a></h4>
<p>Register the given indicator with the actor/strategy to receive trade tick
data for the given instrument ID.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument ID for tick updates.</li>
<li><strong>indicator</strong> (<em>indicator</em>) – The indicator to register.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="register_venueself-simulatedexchange-exchange--void-1">register_venue(self, SimulatedExchange exchange) → void<a href="#register_venueself-simulatedexchange-exchange--void-1" class="hash-link" aria-label="Direct link to register_venue(self, SimulatedExchange exchange) → void" title="Direct link to register_venue(self, SimulatedExchange exchange) → void">​</a></h4>
<p>Register the given simulated exchange with the module.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>exchange</strong> (<a href="#nautilus_trader.backtest.exchange.SimulatedExchange"><em>SimulatedExchange</em></a>) – The exchange to register.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="register_warning_eventself-type-event--void-1">register_warning_event(self, type event) → void<a href="#register_warning_eventself-type-event--void-1" class="hash-link" aria-label="Direct link to register_warning_event(self, type event) → void" title="Direct link to register_warning_event(self, type event) → void">​</a></h4>
<p>Register the given event type for warning log levels.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>event</strong> (<em>type</em>) – The event class to register.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="registered_indicators-1">registered_indicators<a href="#registered_indicators-1" class="hash-link" aria-label="Direct link to registered_indicators" title="Direct link to registered_indicators">​</a></h4>
<p>Return the registered indicators for the strategy.</p>
<ul>
<li><strong>Return type:</strong>
list[<a href="../indicators/index.htm#nautilus_trader.indicators.base.indicator.Indicator">Indicator</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="request_aggregated_barsself-list-bar_types-datetime-startnone-datetime-endnone-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-bool-include_external_datafalse-bool-update_subscriptionsfalse-update_catalog-bool--false-dict-paramsnone--uuid4-1">request_aggregated_bars(self, list bar_types, datetime start=None, datetime end=None, int limit=0, ClientId client_id=None, callback: Callable[[UUID4], None] | None = None, bool include_external_data=False, bool update_subscriptions=False, update_catalog: bool = False, dict params=None) → <a href="../core/index.htm#nautilus_trader.core.UUID4">UUID4</a><a href="#request_aggregated_barsself-list-bar_types-datetime-startnone-datetime-endnone-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-bool-include_external_datafalse-bool-update_subscriptionsfalse-update_catalog-bool--false-dict-paramsnone--uuid4-1" class="hash-link" aria-label="Direct link to request_aggregated_barsself-list-bar_types-datetime-startnone-datetime-endnone-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-bool-include_external_datafalse-bool-update_subscriptionsfalse-update_catalog-bool--false-dict-paramsnone--uuid4-1" title="Direct link to request_aggregated_barsself-list-bar_types-datetime-startnone-datetime-endnone-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-bool-include_external_datafalse-bool-update_subscriptionsfalse-update_catalog-bool--false-dict-paramsnone--uuid4-1">​</a></h4>
<p>Request historical aggregated Bar data for multiple bar types.
The first bar is used to determine which market data type will be queried.
This can either be quotes, trades or bars. If bars are queried,
the first bar type needs to have a composite bar that is external (i.e. not internal/aggregated).
This external bar type will be queried.</p>
<p>If end is <code>None</code> then will request up to the most recent data.</p>
<p>Once the response is received, the bar data is forwarded from the message bus
to the on_historical_data handler. Any tick data used for aggregation is also
forwarded to the on_historical_data handler.</p>
<p>If the request fails, then an error is logged.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>bar_types</strong> (<em>list</em> <em>[</em><a href="../model/data/index.htm#nautilus_trader.model.data.BarType"><em>BarType</em></a> <em>]</em>) – The list of bar types for the request. Composite bars can also be used and need to
figure in the list after a BarType on which it depends.</li>
<li><strong>start</strong> (<em>datetime</em> <em>,</em> <em>optional</em>) – The start datetime (UTC) of request time range.
The inclusiveness depends on individual data client implementation.</li>
<li><strong>end</strong> (<em>datetime</em> <em>,</em> <em>optional</em>) – The end datetime (UTC) of request time range.
The inclusiveness depends on individual data client implementation.</li>
<li><strong>limit</strong> (<em>int</em> <em>,</em> <em>optional</em>) – The limit on the amount of data received (quote ticks, trade ticks or bars).</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>callback</strong> (<em>Callable</em> <em>[</em> <em>[</em><a href="../core/index.htm#nautilus_trader.core.UUID4"><em>UUID4</em></a> <em>]</em> <em>,</em> <em>None</em> <em>]</em> <em>,</em> <em>optional</em>) – The registered callback, to be called with the request ID when the response has
completed processing.</li>
<li><strong>include_external_data</strong> (<em>bool</em> <em>,</em> <em>default False</em>) – If True, includes the queried external data in the response.</li>
<li><strong>update_subscriptions</strong> (<em>bool</em> <em>,</em> <em>default False</em>) – If True, updates the aggregators of any existing or future subscription with the queried external data.</li>
<li><strong>update_catalog</strong> (<em>bool</em> <em>,</em> <em>optional</em>) – Whether to update a catalog with the received data.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
<li><strong>Returns:</strong>
The request_id for the request.</li>
<li><strong>Return type:</strong>
<a href="../core/index.htm#nautilus_trader.core.UUID4">UUID4</a></li>
<li><strong>Raises:</strong>
<ul>
<li><strong>ValueError</strong> – If start is not None and &gt; current timestamp (now).</li>
<li><strong>ValueError</strong> – If end is not None and &gt; current timestamp (now).</li>
<li><strong>ValueError</strong> – If start and end are not None and start is &gt;= end.</li>
<li><strong>ValueError</strong> – If bar_types is empty.</li>
<li><strong>TypeError</strong> – If callback is not None and not of type Callable.</li>
<li><strong>TypeError</strong> – If bar_types is empty or contains elements not of type BarType.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="request_barsself-bartype-bar_type-datetime-startnone-datetime-endnone-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4-1">request_bars(self, BarType bar_type, datetime start=None, datetime end=None, int limit=0, ClientId client_id=None, callback: Callable[[UUID4], None] | None = None, update_catalog: bool = False, dict params=None) → <a href="../core/index.htm#nautilus_trader.core.UUID4">UUID4</a><a href="#request_barsself-bartype-bar_type-datetime-startnone-datetime-endnone-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4-1" class="hash-link" aria-label="Direct link to request_barsself-bartype-bar_type-datetime-startnone-datetime-endnone-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4-1" title="Direct link to request_barsself-bartype-bar_type-datetime-startnone-datetime-endnone-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4-1">​</a></h4>
<p>Request historical Bar data.</p>
<p>If end is <code>None</code> then will request up to the most recent data.</p>
<p>Once the response is received, the bar data is forwarded from the message bus
to the on_historical_data handler.</p>
<p>If the request fails, then an error is logged.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>bar_type</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.BarType"><em>BarType</em></a>) – The bar type for the request.</li>
<li><strong>start</strong> (<em>datetime</em> <em>,</em> <em>optional</em>) – The start datetime (UTC) of request time range.
The inclusiveness depends on individual data client implementation.</li>
<li><strong>end</strong> (<em>datetime</em> <em>,</em> <em>optional</em>) – The end datetime (UTC) of request time range.
The inclusiveness depends on individual data client implementation.</li>
<li><strong>limit</strong> (<em>int</em> <em>,</em> <em>optional</em>) – The limit on the amount of bars received.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>callback</strong> (<em>Callable</em> <em>[</em> <em>[</em><a href="../core/index.htm#nautilus_trader.core.UUID4"><em>UUID4</em></a> <em>]</em> <em>,</em> <em>None</em> <em>]</em> <em>,</em> <em>optional</em>) – The registered callback, to be called with the request ID when the response has
completed processing.</li>
<li><strong>update_catalog</strong> (<em>bool</em> <em>,</em> <em>optional</em>) – Whether to update a catalog with the received data.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
<li><strong>Returns:</strong>
The request_id for the request.</li>
<li><strong>Return type:</strong>
<a href="../core/index.htm#nautilus_trader.core.UUID4">UUID4</a></li>
<li><strong>Raises:</strong>
<ul>
<li><strong>ValueError</strong> – If start is not None and &gt; current timestamp (now).</li>
<li><strong>ValueError</strong> – If end is not None and &gt; current timestamp (now).</li>
<li><strong>ValueError</strong> – If start and end are not None and start is &gt;= end.</li>
<li><strong>TypeError</strong> – If callback is not None and not of type Callable.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="request_dataself-datatype-data_type-clientid-client_id-instrumentid-instrument_idnone-datetime-startnone-datetime-endnone-int-limit0-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4-1">request_data(self, DataType data_type, ClientId client_id, InstrumentId instrument_id=None, datetime start=None, datetime end=None, int limit=0, callback: Callable[[UUID4], None] | None = None, update_catalog: bool = False, dict params=None) → <a href="../core/index.htm#nautilus_trader.core.UUID4">UUID4</a><a href="#request_dataself-datatype-data_type-clientid-client_id-instrumentid-instrument_idnone-datetime-startnone-datetime-endnone-int-limit0-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4-1" class="hash-link" aria-label="Direct link to request_dataself-datatype-data_type-clientid-client_id-instrumentid-instrument_idnone-datetime-startnone-datetime-endnone-int-limit0-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4-1" title="Direct link to request_dataself-datatype-data_type-clientid-client_id-instrumentid-instrument_idnone-datetime-startnone-datetime-endnone-int-limit0-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4-1">​</a></h4>
<p>Request custom data for the given data type from the given data client.</p>
<p>Once the response is received, the data is forwarded from the message bus
to the on_historical_data handler.</p>
<p>If the request fails, then an error is logged.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>data_type</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.DataType"><em>DataType</em></a>) – The data type for the request.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a>) – The data client ID.</li>
<li><strong>start</strong> (<em>datetime</em> <em>,</em> <em>optional</em>) – The start datetime (UTC) of request time range.
The inclusiveness depends on individual data client implementation.</li>
<li><strong>end</strong> (<em>datetime</em> <em>,</em> <em>optional</em>) – The end datetime (UTC) of request time range.
The inclusiveness depends on individual data client implementation.</li>
<li><strong>limit</strong> (<em>int</em> <em>,</em> <em>optional</em>) – The limit on the amount of data points received.</li>
<li><strong>callback</strong> (<em>Callable</em> <em>[</em> <em>[</em><a href="../core/index.htm#nautilus_trader.core.UUID4"><em>UUID4</em></a> <em>]</em> <em>,</em> <em>None</em> <em>]</em> <em>,</em> <em>optional</em>) – The registered callback, to be called with the request ID when the response has
completed processing.</li>
<li><strong>update_catalog</strong> (<em>bool</em> <em>,</em> <em>optional</em>) – Whether to update a catalog with the received data.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
<li><strong>Returns:</strong>
The request_id for the request.</li>
<li><strong>Return type:</strong>
<a href="../core/index.htm#nautilus_trader.core.UUID4">UUID4</a></li>
<li><strong>Raises:</strong>
<strong>TypeError</strong> – If callback is not None and not of type Callable.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="request_instrumentself-instrumentid-instrument_id-datetime-startnone-datetime-endnone-clientid-client_idnone-callback-callableuuid4-noane--none--none-update_catalog-bool--false-dict-paramsnone--uuid4-1">request_instrument(self, InstrumentId instrument_id, datetime start=None, datetime end=None, ClientId client_id=None, callback: Callable[[UUID4], Noane] | None = None, update_catalog: bool = False, dict params=None) → <a href="../core/index.htm#nautilus_trader.core.UUID4">UUID4</a><a href="#request_instrumentself-instrumentid-instrument_id-datetime-startnone-datetime-endnone-clientid-client_idnone-callback-callableuuid4-noane--none--none-update_catalog-bool--false-dict-paramsnone--uuid4-1" class="hash-link" aria-label="Direct link to request_instrumentself-instrumentid-instrument_id-datetime-startnone-datetime-endnone-clientid-client_idnone-callback-callableuuid4-noane--none--none-update_catalog-bool--false-dict-paramsnone--uuid4-1" title="Direct link to request_instrumentself-instrumentid-instrument_id-datetime-startnone-datetime-endnone-clientid-client_idnone-callback-callableuuid4-noane--none--none-update_catalog-bool--false-dict-paramsnone--uuid4-1">​</a></h4>
<p>Request Instrument data for the given instrument ID.</p>
<p>If end is <code>None</code> then will request up to the most recent data.</p>
<p>Once the response is received, the instrument data is forwarded from the message bus
to the on_instrument handler.</p>
<p>If the request fails, then an error is logged.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument ID for the request.</li>
<li><strong>start</strong> (<em>datetime</em> <em>,</em> <em>optional</em>) – The start datetime (UTC) of request time range.
The inclusiveness depends on individual data client implementation.</li>
<li><strong>end</strong> (<em>datetime</em> <em>,</em> <em>optional</em>) – The end datetime (UTC) of request time range.
The inclusiveness depends on individual data client implementation.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>callback</strong> (<em>Callable</em> <em>[</em> <em>[</em><a href="../core/index.htm#nautilus_trader.core.UUID4"><em>UUID4</em></a> <em>]</em> <em>,</em> <em>None</em> <em>]</em> <em>,</em> <em>optional</em>) – The registered callback, to be called with the request ID when the response has
completed processing.</li>
<li><strong>update_catalog</strong> (<em>bool</em> <em>,</em> <em>optional</em>) – Whether to update a catalog with the received data.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
<li><strong>Returns:</strong>
The request_id for the request.</li>
<li><strong>Return type:</strong>
<a href="../core/index.htm#nautilus_trader.core.UUID4">UUID4</a></li>
<li><strong>Raises:</strong>
<ul>
<li><strong>ValueError</strong> – If start is not None and &gt; current timestamp (now).</li>
<li><strong>ValueError</strong> – If end is not None and &gt; current timestamp (now).</li>
<li><strong>ValueError</strong> – If start and end are not None and start is &gt;= end.</li>
<li><strong>TypeError</strong> – If callback is not None and not of type Callable.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="request_instrumentsself-venue-venue-datetime-startnone-datetime-endnone-clientid-client_idnone-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4-1">request_instruments(self, Venue venue, datetime start=None, datetime end=None, ClientId client_id=None, callback: Callable[[UUID4], None] | None = None, update_catalog: bool = False, dict params=None) → <a href="../core/index.htm#nautilus_trader.core.UUID4">UUID4</a><a href="#request_instrumentsself-venue-venue-datetime-startnone-datetime-endnone-clientid-client_idnone-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4-1" class="hash-link" aria-label="Direct link to request_instrumentsself-venue-venue-datetime-startnone-datetime-endnone-clientid-client_idnone-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4-1" title="Direct link to request_instrumentsself-venue-venue-datetime-startnone-datetime-endnone-clientid-client_idnone-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4-1">​</a></h4>
<p>Request all Instrument data for the given venue.</p>
<p>If end is <code>None</code> then will request up to the most recent data.</p>
<p>Once the response is received, the instrument data is forwarded from the message bus
to the on_instrument handler.</p>
<p>If the request fails, then an error is logged.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>venue</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.Venue"><em>Venue</em></a>) – The venue for the request.</li>
<li><strong>start</strong> (<em>datetime</em> <em>,</em> <em>optional</em>) – The start datetime (UTC) of request time range.
The inclusiveness depends on individual data client implementation.</li>
<li><strong>end</strong> (<em>datetime</em> <em>,</em> <em>optional</em>) – The end datetime (UTC) of request time range.
The inclusiveness depends on individual data client implementation.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>callback</strong> (<em>Callable</em> <em>[</em> <em>[</em><a href="../core/index.htm#nautilus_trader.core.UUID4"><em>UUID4</em></a> <em>]</em> <em>,</em> <em>None</em> <em>]</em> <em>,</em> <em>optional</em>) – The registered callback, to be called with the request ID when the response has
completed processing.</li>
<li><strong>update_catalog</strong> (<em>bool</em> <em>,</em> <em>optional</em>) – Whether to update a catalog with the received data.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
<li><strong>Returns:</strong>
The request_id for the request.</li>
<li><strong>Return type:</strong>
<a href="../core/index.htm#nautilus_trader.core.UUID4">UUID4</a></li>
<li><strong>Raises:</strong>
<ul>
<li><strong>ValueError</strong> – If start is not None and &gt; current timestamp (now).</li>
<li><strong>ValueError</strong> – If end is not None and &gt; current timestamp (now).</li>
<li><strong>ValueError</strong> – If start and end are not None and start is &gt;= end.</li>
<li><strong>TypeError</strong> – If callback is not None and not of type Callable.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="request_order_book_snapshotself-instrumentid-instrument_id-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-dict-paramsnone--uuid4-1">request_order_book_snapshot(self, InstrumentId instrument_id, int limit=0, ClientId client_id=None, callback: Callable[[UUID4], None] | None = None, dict params=None) → <a href="../core/index.htm#nautilus_trader.core.UUID4">UUID4</a><a href="#request_order_book_snapshotself-instrumentid-instrument_id-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-dict-paramsnone--uuid4-1" class="hash-link" aria-label="Direct link to request_order_book_snapshotself-instrumentid-instrument_id-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-dict-paramsnone--uuid4-1" title="Direct link to request_order_book_snapshotself-instrumentid-instrument_id-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-dict-paramsnone--uuid4-1">​</a></h4>
<p>Request an order book snapshot.</p>
<p>Once the response is received, the order book data is forwarded from the message bus
to the on_historical_data handler.</p>
<p>If the request fails, then an error is logged.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument ID for the order book snapshot request.</li>
<li><strong>limit</strong> (<em>int</em> <em>,</em> <em>optional</em>) – The limit on the depth of the order book snapshot.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If None, it will be inferred from the venue in the instrument ID.</li>
<li><strong>callback</strong> (<em>Callable</em> <em>[</em> <em>[</em><a href="../core/index.htm#nautilus_trader.core.UUID4"><em>UUID4</em></a> <em>]</em> <em>,</em> <em>None</em> <em>]</em> <em>,</em> <em>optional</em>) – The registered callback, to be called with the request ID when the response has completed processing.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
<li><strong>Returns:</strong>
The request_id for the request.</li>
<li><strong>Return type:</strong>
<a href="../core/index.htm#nautilus_trader.core.UUID4">UUID4</a></li>
<li><strong>Raises:</strong>
<ul>
<li><strong>ValueError</strong> – If the instrument_id is None.</li>
<li><strong>TypeError</strong> – If callback is not None and not of type Callable.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="request_quote_ticksself-instrumentid-instrument_id-datetime-startnone-datetime-endnone-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4-1">request_quote_ticks(self, InstrumentId instrument_id, datetime start=None, datetime end=None, int limit=0, ClientId client_id=None, callback: Callable[[UUID4], None] | None = None, update_catalog: bool = False, dict params=None) → <a href="../core/index.htm#nautilus_trader.core.UUID4">UUID4</a><a href="#request_quote_ticksself-instrumentid-instrument_id-datetime-startnone-datetime-endnone-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4-1" class="hash-link" aria-label="Direct link to request_quote_ticksself-instrumentid-instrument_id-datetime-startnone-datetime-endnone-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4-1" title="Direct link to request_quote_ticksself-instrumentid-instrument_id-datetime-startnone-datetime-endnone-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4-1">​</a></h4>
<p>Request historical QuoteTick data.</p>
<p>If end is <code>None</code> then will request up to the most recent data.</p>
<p>Once the response is received, the quote tick data is forwarded from the message bus
to the on_historical_data handler.</p>
<p>If the request fails, then an error is logged.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The tick instrument ID for the request.</li>
<li><strong>start</strong> (<em>datetime</em> <em>,</em> <em>optional</em>) – The start datetime (UTC) of request time range.
The inclusiveness depends on individual data client implementation.</li>
<li><strong>end</strong> (<em>datetime</em> <em>,</em> <em>optional</em>) – The end datetime (UTC) of request time range.
The inclusiveness depends on individual data client implementation.</li>
<li><strong>limit</strong> (<em>int</em> <em>,</em> <em>optional</em>) – The limit on the amount of quote ticks received.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>callback</strong> (<em>Callable</em> <em>[</em> <em>[</em><a href="../core/index.htm#nautilus_trader.core.UUID4"><em>UUID4</em></a> <em>]</em> <em>,</em> <em>None</em> <em>]</em> <em>,</em> <em>optional</em>) – The registered callback, to be called with the request ID when the response has
completed processing.</li>
<li><strong>update_catalog</strong> (<em>bool</em> <em>,</em> <em>optional</em>) – Whether to update a catalog with the received data.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
<li><strong>Returns:</strong>
The request_id for the request.</li>
<li><strong>Return type:</strong>
<a href="../core/index.htm#nautilus_trader.core.UUID4">UUID4</a></li>
<li><strong>Raises:</strong>
<ul>
<li><strong>ValueError</strong> – If start is not None and &gt; current timestamp (now).</li>
<li><strong>ValueError</strong> – If end is not None and &gt; current timestamp (now).</li>
<li><strong>ValueError</strong> – If start and end are not None and start is &gt;= end.</li>
<li><strong>TypeError</strong> – If callback is not None and not of type Callable.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="request_trade_ticksself-instrumentid-instrument_id-datetime-startnone-datetime-endnone-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4-1">request_trade_ticks(self, InstrumentId instrument_id, datetime start=None, datetime end=None, int limit=0, ClientId client_id=None, callback: Callable[[UUID4], None] | None = None, update_catalog: bool = False, dict params=None) → <a href="../core/index.htm#nautilus_trader.core.UUID4">UUID4</a><a href="#request_trade_ticksself-instrumentid-instrument_id-datetime-startnone-datetime-endnone-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4-1" class="hash-link" aria-label="Direct link to request_trade_ticksself-instrumentid-instrument_id-datetime-startnone-datetime-endnone-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4-1" title="Direct link to request_trade_ticksself-instrumentid-instrument_id-datetime-startnone-datetime-endnone-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4-1">​</a></h4>
<p>Request historical TradeTick data.</p>
<p>If end is <code>None</code> then will request up to the most recent data.</p>
<p>Once the response is received, the trade tick data is forwarded from the message bus
to the on_historical_data handler.</p>
<p>If the request fails, then an error is logged.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The tick instrument ID for the request.</li>
<li><strong>start</strong> (<em>datetime</em> <em>,</em> <em>optional</em>) – The start datetime (UTC) of request time range.
The inclusiveness depends on individual data client implementation.</li>
<li><strong>end</strong> (<em>datetime</em> <em>,</em> <em>optional</em>) – The end datetime (UTC) of request time range.
The inclusiveness depends on individual data client implementation.</li>
<li><strong>limit</strong> (<em>int</em> <em>,</em> <em>optional</em>) – The limit on the amount of trade ticks received.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>callback</strong> (<em>Callable</em> <em>[</em> <em>[</em><a href="../core/index.htm#nautilus_trader.core.UUID4"><em>UUID4</em></a> <em>]</em> <em>,</em> <em>None</em> <em>]</em> <em>,</em> <em>optional</em>) – The registered callback, to be called with the request ID when the response has
completed processing.</li>
<li><strong>update_catalog</strong> (<em>bool</em> <em>,</em> <em>optional</em>) – Whether to update a catalog with the received data.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
<li><strong>Returns:</strong>
The request_id for the request.</li>
<li><strong>Return type:</strong>
<a href="../core/index.htm#nautilus_trader.core.UUID4">UUID4</a></li>
<li><strong>Raises:</strong>
<ul>
<li><strong>ValueError</strong> – If start is not None and &gt; current timestamp (now).</li>
<li><strong>ValueError</strong> – If end is not None and &gt; current timestamp (now).</li>
<li><strong>ValueError</strong> – If start and end are not None and start is &gt;= end.</li>
<li><strong>TypeError</strong> – If callback is not None and not of type Callable.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="resetself--void-6">reset(self) → void<a href="#resetself--void-6" class="hash-link" aria-label="Direct link to reset(self) → void" title="Direct link to reset(self) → void">​</a></h4>
<p>Abstract method (implement in subclass).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="resumeself--void-4">resume(self) → void<a href="#resumeself--void-4" class="hash-link" aria-label="Direct link to resume(self) → void" title="Direct link to resume(self) → void">​</a></h4>
<p>Resume the component.</p>
<p>While executing on_resume() any exception will be logged and reraised, then the component
will remain in a <code>RESUMING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-125">WARNING<a href="#warning-125" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="run_in_executorself-func-callable-any-tuple-argsnone-dict-kwargsnone-1">run_in_executor(self, func: Callable[..., Any], tuple args=None, dict kwargs=None)<a href="#run_in_executorself-func-callable-any-tuple-argsnone-dict-kwargsnone-1" class="hash-link" aria-label="Direct link to run_in_executor(self, func: Callable[..., Any], tuple args=None, dict kwargs=None)" title="Direct link to run_in_executor(self, func: Callable[..., Any], tuple args=None, dict kwargs=None)">​</a></h4>
<p>Schedules the callable func to be executed as fn(*args, **kwargs).</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>func</strong> (<em>Callable</em>) – The function to be executed.</li>
<li><strong>args</strong> (<em>positional arguments</em>) – The positional arguments for the call to func.</li>
<li><strong>kwargs</strong> (<em>arbitrary keyword arguments</em>) – The keyword arguments for the call to func.</li>
</ul>
</li>
<li><strong>Returns:</strong>
The unique task identifier for the execution.
This also corresponds to any future objects memory address.</li>
<li><strong>Return type:</strong>
<a href="../common/index.htm#nautilus_trader.common.executor.TaskId">TaskId</a></li>
<li><strong>Raises:</strong>
<strong>TypeError</strong> – If func is not of type Callable.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="saveself--dict-1">save(self) → dict<a href="#saveself--dict-1" class="hash-link" aria-label="Direct link to save(self) → dict" title="Direct link to save(self) → dict">​</a></h4>
<p>Return the actor/strategy state dictionary to be saved.</p>
<p>Calls on_save.</p>
<ul>
<li><strong>Returns:</strong>
The strategy state to save.</li>
<li><strong>Return type:</strong>
dict[str, bytes]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-126">WARNING<a href="#warning-126" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Exceptions raised will be caught, logged, and reraised.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="shutdown_systemself-str-reasonnone--void-4">shutdown_system(self, str reason=None) → void<a href="#shutdown_systemself-str-reasonnone--void-4" class="hash-link" aria-label="Direct link to shutdown_system(self, str reason=None) → void" title="Direct link to shutdown_system(self, str reason=None) → void">​</a></h4>
<p>Initiate a system-wide shutdown by generating and publishing a ShutdownSystem command.</p>
<p>The command is handled by the system’s NautilusKernel, which will invoke either stop (synchronously)
or stop_async (asynchronously) depending on the execution context and the presence of an active event loop.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>reason</strong> (<em>str</em> <em>,</em> <em>optional</em>) – The reason for issuing the shutdown command.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="startself--void-4">start(self) → void<a href="#startself--void-4" class="hash-link" aria-label="Direct link to start(self) → void" title="Direct link to start(self) → void">​</a></h4>
<p>Start the component.</p>
<p>While executing on_start() any exception will be logged and reraised, then the component
will remain in a <code>STARTING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-127">WARNING<a href="#warning-127" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="state-4">state<a href="#state-4" class="hash-link" aria-label="Direct link to state" title="Direct link to state">​</a></h4>
<p>ComponentState</p>
<p>Return the components current state.</p>
<ul>
<li><strong>Return type:</strong>
ComponentState</li>
<li><strong>Type:</strong>
Component.state</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="stopself--void-4">stop(self) → void<a href="#stopself--void-4" class="hash-link" aria-label="Direct link to stop(self) → void" title="Direct link to stop(self) → void">​</a></h4>
<p>Stop the component.</p>
<p>While executing on_stop() any exception will be logged and reraised, then the component
will remain in a <code>STOPPING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-128">WARNING<a href="#warning-128" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_barsself-bartype-bar_type-clientid-client_idnone-bool-await_partialfalse-bool-update_catalogfalse-dict-paramsnone--void-1">subscribe_bars(self, BarType bar_type, ClientId client_id=None, bool await_partial=False, bool update_catalog=False, dict params=None) → void<a href="#subscribe_barsself-bartype-bar_type-clientid-client_idnone-bool-await_partialfalse-bool-update_catalogfalse-dict-paramsnone--void-1" class="hash-link" aria-label="Direct link to subscribe_bars(self, BarType bar_type, ClientId client_id=None, bool await_partial=False, bool update_catalog=False, dict params=None) → void" title="Direct link to subscribe_bars(self, BarType bar_type, ClientId client_id=None, bool await_partial=False, bool update_catalog=False, dict params=None) → void">​</a></h4>
<p>Subscribe to streaming Bar data for the given bar type.</p>
<p>Once subscribed, any matching bar data published on the message bus is forwarded
to the on_bar handler.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>bar_type</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.BarType"><em>BarType</em></a>) – The bar type to subscribe to.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>await_partial</strong> (<em>bool</em> <em>,</em> <em>default False</em>) – If the bar aggregator should await the arrival of a historical partial bar prior
to actively aggregating new bars.</li>
<li><strong>update_catalog</strong> (<em>bool</em> <em>,</em> <em>optional</em>) – Whether to update a catalog with the received data.
Only useful when downloading data during a backtest.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_dataself-datatype-data_type-clientid-client_idnone-instrumentid-instrument_idnone-bool-update_catalogfalse-dict-paramsnone--void-1">subscribe_data(self, DataType data_type, ClientId client_id=None, InstrumentId instrument_id=None, bool update_catalog=False, dict params=None) → void<a href="#subscribe_dataself-datatype-data_type-clientid-client_idnone-instrumentid-instrument_idnone-bool-update_catalogfalse-dict-paramsnone--void-1" class="hash-link" aria-label="Direct link to subscribe_data(self, DataType data_type, ClientId client_id=None, InstrumentId instrument_id=None, bool update_catalog=False, dict params=None) → void" title="Direct link to subscribe_data(self, DataType data_type, ClientId client_id=None, InstrumentId instrument_id=None, bool update_catalog=False, dict params=None) → void">​</a></h4>
<p>Subscribe to data of the given data type.</p>
<p>Once subscribed, any matching data published on the message bus is forwarded
to the on_data handler.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>data_type</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.DataType"><em>DataType</em></a>) – The data type to subscribe to.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The data client ID. If supplied then a Subscribe command will be
sent to the corresponding data client.</li>
<li><strong>update_catalog</strong> (<em>bool</em> <em>,</em> <em>optional</em>) – Whether to update a catalog with the received data.
Only useful when downloading data during a backtest.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_index_pricesself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void-1">subscribe_index_prices(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void<a href="#subscribe_index_pricesself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void-1" class="hash-link" aria-label="Direct link to subscribe_index_prices(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void" title="Direct link to subscribe_index_prices(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Subscribe to streaming IndexPriceUpdate data for the given instrument ID.</p>
<p>Once subscribed, any matching index price updates published on the message bus are forwarded
to the on_index_price handler.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument to subscribe to.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_instrumentself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void-1">subscribe_instrument(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void<a href="#subscribe_instrumentself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void-1" class="hash-link" aria-label="Direct link to subscribe_instrument(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void" title="Direct link to subscribe_instrument(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Subscribe to update Instrument data for the given instrument ID.</p>
<p>Once subscribed, any matching instrument data published on the message bus is forwarded
to the on_instrument handler.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument ID for the subscription.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_instrument_closeself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void-1">subscribe_instrument_close(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void<a href="#subscribe_instrument_closeself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void-1" class="hash-link" aria-label="Direct link to subscribe_instrument_close(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void" title="Direct link to subscribe_instrument_close(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Subscribe to close updates for the given instrument ID.</p>
<p>Once subscribed, any matching instrument close data published on the message bus is forwarded
to the on_instrument_close handler.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument to subscribe to status updates for.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_instrument_statusself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void-1">subscribe_instrument_status(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void<a href="#subscribe_instrument_statusself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void-1" class="hash-link" aria-label="Direct link to subscribe_instrument_status(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void" title="Direct link to subscribe_instrument_status(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Subscribe to status updates for the given instrument ID.</p>
<p>Once subscribed, any matching instrument status data published on the message bus is forwarded
to the on_instrument_status handler.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument to subscribe to status updates for.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_instrumentsself-venue-venue-clientid-client_idnone-dict-paramsnone--void-1">subscribe_instruments(self, Venue venue, ClientId client_id=None, dict params=None) → void<a href="#subscribe_instrumentsself-venue-venue-clientid-client_idnone-dict-paramsnone--void-1" class="hash-link" aria-label="Direct link to subscribe_instruments(self, Venue venue, ClientId client_id=None, dict params=None) → void" title="Direct link to subscribe_instruments(self, Venue venue, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Subscribe to update Instrument data for the given venue.</p>
<p>Once subscribed, any matching instrument data published on the message bus is forwarded
the on_instrument handler.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>venue</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.Venue"><em>Venue</em></a>) – The venue for the subscription.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_mark_pricesself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void-1">subscribe_mark_prices(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void<a href="#subscribe_mark_pricesself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void-1" class="hash-link" aria-label="Direct link to subscribe_mark_prices(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void" title="Direct link to subscribe_mark_prices(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Subscribe to streaming MarkPriceUpdate data for the given instrument ID.</p>
<p>Once subscribed, any matching mark price updates published on the message bus are forwarded
to the on_mark_price handler.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument to subscribe to.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_order_book_at_intervalself-instrumentid-instrument_id-booktype-book_typebooktypel2_mbp-int-depth0-int-interval_ms1000-clientid-client_idnone-bool-managedtrue-dict-paramsnone--void-1">subscribe_order_book_at_interval(self, InstrumentId instrument_id, BookType book_type=BookType.L2_MBP, int depth=0, int interval_ms=1000, ClientId client_id=None, bool managed=True, dict params=None) → void<a href="#subscribe_order_book_at_intervalself-instrumentid-instrument_id-booktype-book_typebooktypel2_mbp-int-depth0-int-interval_ms1000-clientid-client_idnone-bool-managedtrue-dict-paramsnone--void-1" class="hash-link" aria-label="Direct link to subscribe_order_book_at_interval(self, InstrumentId instrument_id, BookType book_type=BookType.L2_MBP, int depth=0, int interval_ms=1000, ClientId client_id=None, bool managed=True, dict params=None) → void" title="Direct link to subscribe_order_book_at_interval(self, InstrumentId instrument_id, BookType book_type=BookType.L2_MBP, int depth=0, int interval_ms=1000, ClientId client_id=None, bool managed=True, dict params=None) → void">​</a></h4>
<p>Subscribe to an OrderBook at a specified interval for the given instrument ID.</p>
<p>Once subscribed, any matching order book updates published on the message bus are forwarded
to the on_order_book handler.</p>
<p>The DataEngine will only maintain one order book for each instrument.
Because of this - the level, depth and params for the stream will be set
as per the last subscription request (this will also affect all subscribers).</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The order book instrument ID to subscribe to.</li>
<li><strong>book_type</strong> (BookType {<code>L1_MBP</code>, <code>L2_MBP</code>, <code>L3_MBO</code>}) – The order book type.</li>
<li><strong>depth</strong> (<em>int</em> <em>,</em> <em>optional</em>) – The maximum depth for the order book. A depth of 0 is maximum depth.</li>
<li><strong>interval_ms</strong> (<em>int</em> <em>,</em> <em>default 1000</em>) – The order book snapshot interval (milliseconds).</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>managed</strong> (<em>bool</em> <em>,</em> <em>default True</em>) – If an order book should be managed by the data engine based on the subscribed feed.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
<li><strong>Raises:</strong>
<ul>
<li><strong>ValueError</strong> – If depth is negative (&lt; 0).</li>
<li><strong>ValueError</strong> – If interval_ms is not positive (&gt; 0).</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-129">WARNING<a href="#warning-129" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Consider subscribing to order book deltas if you need intervals less than 100 milliseconds.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_order_book_deltasself-instrumentid-instrument_id-booktype-book_typebooktypel2_mbp-int-depth0-clientid-client_idnone-bool-managedtrue-bool-pyo3_conversionfalse-dict-paramsnone--void-1">subscribe_order_book_deltas(self, InstrumentId instrument_id, BookType book_type=BookType.L2_MBP, int depth=0, ClientId client_id=None, bool managed=True, bool pyo3_conversion=False, dict params=None) → void<a href="#subscribe_order_book_deltasself-instrumentid-instrument_id-booktype-book_typebooktypel2_mbp-int-depth0-clientid-client_idnone-bool-managedtrue-bool-pyo3_conversionfalse-dict-paramsnone--void-1" class="hash-link" aria-label="Direct link to subscribe_order_book_deltas(self, InstrumentId instrument_id, BookType book_type=BookType.L2_MBP, int depth=0, ClientId client_id=None, bool managed=True, bool pyo3_conversion=False, dict params=None) → void" title="Direct link to subscribe_order_book_deltas(self, InstrumentId instrument_id, BookType book_type=BookType.L2_MBP, int depth=0, ClientId client_id=None, bool managed=True, bool pyo3_conversion=False, dict params=None) → void">​</a></h4>
<p>Subscribe to the order book data stream, being a snapshot then deltas
for the given instrument ID.</p>
<p>Once subscribed, any matching order book data published on the message bus is forwarded
to the on_order_book_deltas handler.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The order book instrument ID to subscribe to.</li>
<li><strong>book_type</strong> (BookType {<code>L1_MBP</code>, <code>L2_MBP</code>, <code>L3_MBO</code>}) – The order book type.</li>
<li><strong>depth</strong> (<em>int</em> <em>,</em> <em>optional</em>) – The maximum depth for the order book. A depth of 0 is maximum depth.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>managed</strong> (<em>bool</em> <em>,</em> <em>default True</em>) – If an order book should be managed by the data engine based on the subscribed feed.</li>
<li><strong>pyo3_conversion</strong> (<em>bool</em> <em>,</em> <em>default False</em>) – If received deltas should be converted to nautilus_pyo3.OrderBookDeltas
prior to being passed to the on_order_book_deltas handler.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_order_book_depthself-instrumentid-instrument_id-booktype-book_typebooktypel2_mbp-int-depth0-clientid-client_idnone-bool-managedtrue-bool-pyo3_conversionfalse-dict-paramsnone--void-1">subscribe_order_book_depth(self, InstrumentId instrument_id, BookType book_type=BookType.L2_MBP, int depth=0, ClientId client_id=None, bool managed=True, bool pyo3_conversion=False, dict params=None) → void<a href="#subscribe_order_book_depthself-instrumentid-instrument_id-booktype-book_typebooktypel2_mbp-int-depth0-clientid-client_idnone-bool-managedtrue-bool-pyo3_conversionfalse-dict-paramsnone--void-1" class="hash-link" aria-label="Direct link to subscribe_order_book_depth(self, InstrumentId instrument_id, BookType book_type=BookType.L2_MBP, int depth=0, ClientId client_id=None, bool managed=True, bool pyo3_conversion=False, dict params=None) → void" title="Direct link to subscribe_order_book_depth(self, InstrumentId instrument_id, BookType book_type=BookType.L2_MBP, int depth=0, ClientId client_id=None, bool managed=True, bool pyo3_conversion=False, dict params=None) → void">​</a></h4>
<p>Subscribe to the order book depth stream for the given instrument ID.</p>
<p>Once subscribed, any matching order book data published on the message bus is forwarded
to the on_order_book_depth handler.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The order book instrument ID to subscribe to.</li>
<li><strong>book_type</strong> (BookType {<code>L1_MBP</code>, <code>L2_MBP</code>, <code>L3_MBO</code>}) – The order book type.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>managed</strong> (<em>bool</em> <em>,</em> <em>default True</em>) – If an order book should be managed by the data engine based on the subscribed feed.</li>
<li><strong>pyo3_conversion</strong> (<em>bool</em> <em>,</em> <em>default False</em>) – If received deltas should be converted to nautilus_pyo3.OrderBookDepth
prior to being passed to the on_order_book_depth handler.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_quote_ticksself-instrumentid-instrument_id-clientid-client_idnone-bool-update_catalogfalse-dict-paramsnone--void-1">subscribe_quote_ticks(self, InstrumentId instrument_id, ClientId client_id=None, bool update_catalog=False, dict params=None) → void<a href="#subscribe_quote_ticksself-instrumentid-instrument_id-clientid-client_idnone-bool-update_catalogfalse-dict-paramsnone--void-1" class="hash-link" aria-label="Direct link to subscribe_quote_ticks(self, InstrumentId instrument_id, ClientId client_id=None, bool update_catalog=False, dict params=None) → void" title="Direct link to subscribe_quote_ticks(self, InstrumentId instrument_id, ClientId client_id=None, bool update_catalog=False, dict params=None) → void">​</a></h4>
<p>Subscribe to streaming QuoteTick data for the given instrument ID.</p>
<p>Once subscribed, any matching quote tick data published on the message bus is forwarded
to the on_quote_tick handler.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The tick instrument to subscribe to.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>update_catalog</strong> (<em>bool</em> <em>,</em> <em>optional</em>) – Whether to update a catalog with the received data.
Only useful when downloading data during a backtest.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_signalself-str-name--void-1">subscribe_signal(self, str name=&#x27;&#x27;) → void<a href="#subscribe_signalself-str-name--void-1" class="hash-link" aria-label="Direct link to subscribe_signal(self, str name=&#x27;&#x27;) → void" title="Direct link to subscribe_signal(self, str name=&#x27;&#x27;) → void">​</a></h4>
<p>Subscribe to a specific signal by name, or to all signals if no name is provided.</p>
<p>Once subscribed, any matching signal data published on the message bus is forwarded
to the on_signal handler.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>name</strong> (<em>str</em> <em>,</em> <em>optional</em>) – The name of the signal to subscribe to. If not provided or an empty
string is passed, the subscription will include all signals.
The signal name is case-insensitive and will be capitalized
(e.g., ‘example’ becomes ‘SignalExample*’).</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_trade_ticksself-instrumentid-instrument_id-clientid-client_idnone-bool-update_catalogfalse-dict-paramsnone--void-1">subscribe_trade_ticks(self, InstrumentId instrument_id, ClientId client_id=None, bool update_catalog=False, dict params=None) → void<a href="#subscribe_trade_ticksself-instrumentid-instrument_id-clientid-client_idnone-bool-update_catalogfalse-dict-paramsnone--void-1" class="hash-link" aria-label="Direct link to subscribe_trade_ticks(self, InstrumentId instrument_id, ClientId client_id=None, bool update_catalog=False, dict params=None) → void" title="Direct link to subscribe_trade_ticks(self, InstrumentId instrument_id, ClientId client_id=None, bool update_catalog=False, dict params=None) → void">​</a></h4>
<p>Subscribe to streaming TradeTick data for the given instrument ID.</p>
<p>Once subscribed, any matching trade tick data published on the message bus is forwarded
to the on_trade_tick handler.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The tick instrument to subscribe to.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>update_catalog</strong> (<em>bool</em> <em>,</em> <em>optional</em>) – Whether to update a catalog with the received data.
Only useful when downloading data during a backtest.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="to_importable_configself--importableactorconfig-1">to_importable_config(self) → <a href="../config/index.htm#nautilus_trader.common.config.ImportableActorConfig">ImportableActorConfig</a><a href="#to_importable_configself--importableactorconfig-1" class="hash-link" aria-label="Direct link to to_importable_configself--importableactorconfig-1" title="Direct link to to_importable_configself--importableactorconfig-1">​</a></h4>
<p>Returns an importable configuration for this actor.</p>
<ul>
<li><strong>Return type:</strong>
<a href="../config/index.htm#nautilus_trader.common.config.ImportableActorConfig">ImportableActorConfig</a></li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="trader_id-5">trader_id<a href="#trader_id-5" class="hash-link" aria-label="Direct link to trader_id" title="Direct link to trader_id">​</a></h4>
<p>The trader ID associated with the component.</p>
<ul>
<li><strong>Returns:</strong>
TraderId</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="type-4">type<a href="#type-4" class="hash-link" aria-label="Direct link to type" title="Direct link to type">​</a></h4>
<p>The components type.</p>
<ul>
<li><strong>Returns:</strong>
type</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_barsself-bartype-bar_type-clientid-client_idnone-dict-paramsnone--void-1">unsubscribe_bars(self, BarType bar_type, ClientId client_id=None, dict params=None) → void<a href="#unsubscribe_barsself-bartype-bar_type-clientid-client_idnone-dict-paramsnone--void-1" class="hash-link" aria-label="Direct link to unsubscribe_bars(self, BarType bar_type, ClientId client_id=None, dict params=None) → void" title="Direct link to unsubscribe_bars(self, BarType bar_type, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Unsubscribe from streaming Bar data for the given bar type.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>bar_type</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.BarType"><em>BarType</em></a>) – The bar type to unsubscribe from.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_dataself-datatype-data_type-clientid-client_idnone-instrumentid-instrument_idnone-dict-paramsnone--void-1">unsubscribe_data(self, DataType data_type, ClientId client_id=None, InstrumentId instrument_id=None, dict params=None) → void<a href="#unsubscribe_dataself-datatype-data_type-clientid-client_idnone-instrumentid-instrument_idnone-dict-paramsnone--void-1" class="hash-link" aria-label="Direct link to unsubscribe_data(self, DataType data_type, ClientId client_id=None, InstrumentId instrument_id=None, dict params=None) → void" title="Direct link to unsubscribe_data(self, DataType data_type, ClientId client_id=None, InstrumentId instrument_id=None, dict params=None) → void">​</a></h4>
<p>Unsubscribe from data of the given data type.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>data_type</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.DataType"><em>DataType</em></a>) – The data type to unsubscribe from.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The data client ID. If supplied then an Unsubscribe command will
be sent to the data client.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_index_pricesself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void-1">unsubscribe_index_prices(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void<a href="#unsubscribe_index_pricesself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void-1" class="hash-link" aria-label="Direct link to unsubscribe_index_prices(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void" title="Direct link to unsubscribe_index_prices(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Unsubscribe from streaming IndexPriceUpdate data for the given instrument ID.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument to subscribe to.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_instrumentself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void-1">unsubscribe_instrument(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void<a href="#unsubscribe_instrumentself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void-1" class="hash-link" aria-label="Direct link to unsubscribe_instrument(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void" title="Direct link to unsubscribe_instrument(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Unsubscribe from update Instrument data for the given instrument ID.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument to unsubscribe from.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_instrument_statusself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void-1">unsubscribe_instrument_status(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void<a href="#unsubscribe_instrument_statusself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void-1" class="hash-link" aria-label="Direct link to unsubscribe_instrument_status(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void" title="Direct link to unsubscribe_instrument_status(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Unsubscribe to status updates of the given venue.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument to unsubscribe to status updates for.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_instrumentsself-venue-venue-clientid-client_idnone-dict-paramsnone--void-1">unsubscribe_instruments(self, Venue venue, ClientId client_id=None, dict params=None) → void<a href="#unsubscribe_instrumentsself-venue-venue-clientid-client_idnone-dict-paramsnone--void-1" class="hash-link" aria-label="Direct link to unsubscribe_instruments(self, Venue venue, ClientId client_id=None, dict params=None) → void" title="Direct link to unsubscribe_instruments(self, Venue venue, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Unsubscribe from update Instrument data for the given venue.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>venue</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.Venue"><em>Venue</em></a>) – The venue for the subscription.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_mark_pricesself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void-1">unsubscribe_mark_prices(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void<a href="#unsubscribe_mark_pricesself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void-1" class="hash-link" aria-label="Direct link to unsubscribe_mark_prices(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void" title="Direct link to unsubscribe_mark_prices(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Unsubscribe from streaming MarkPriceUpdate data for the given instrument ID.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument to subscribe to.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_order_book_at_intervalself-instrumentid-instrument_id-int-interval_ms1000-clientid-client_idnone-dict-paramsnone--void-1">unsubscribe_order_book_at_interval(self, InstrumentId instrument_id, int interval_ms=1000, ClientId client_id=None, dict params=None) → void<a href="#unsubscribe_order_book_at_intervalself-instrumentid-instrument_id-int-interval_ms1000-clientid-client_idnone-dict-paramsnone--void-1" class="hash-link" aria-label="Direct link to unsubscribe_order_book_at_interval(self, InstrumentId instrument_id, int interval_ms=1000, ClientId client_id=None, dict params=None) → void" title="Direct link to unsubscribe_order_book_at_interval(self, InstrumentId instrument_id, int interval_ms=1000, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Unsubscribe from an OrderBook at a specified interval for the given instrument ID.</p>
<p>The interval must match the previously subscribed interval.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The order book instrument to subscribe to.</li>
<li><strong>interval_ms</strong> (<em>int</em> <em>,</em> <em>default 1000</em>) – The order book snapshot interval (milliseconds).</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_order_book_deltasself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void-1">unsubscribe_order_book_deltas(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void<a href="#unsubscribe_order_book_deltasself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void-1" class="hash-link" aria-label="Direct link to unsubscribe_order_book_deltas(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void" title="Direct link to unsubscribe_order_book_deltas(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Unsubscribe the order book deltas stream for the given instrument ID.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The order book instrument to subscribe to.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_order_book_depthself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void-1">unsubscribe_order_book_depth(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void<a href="#unsubscribe_order_book_depthself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void-1" class="hash-link" aria-label="Direct link to unsubscribe_order_book_depth(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void" title="Direct link to unsubscribe_order_book_depth(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Unsubscribe the order book depth stream for the given instrument ID.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The order book instrument to subscribe to.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_quote_ticksself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void-1">unsubscribe_quote_ticks(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void<a href="#unsubscribe_quote_ticksself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void-1" class="hash-link" aria-label="Direct link to unsubscribe_quote_ticks(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void" title="Direct link to unsubscribe_quote_ticks(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Unsubscribe from streaming QuoteTick data for the given instrument ID.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The tick instrument to unsubscribe from.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_trade_ticksself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void-1">unsubscribe_trade_ticks(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void<a href="#unsubscribe_trade_ticksself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void-1" class="hash-link" aria-label="Direct link to unsubscribe_trade_ticks(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void" title="Direct link to unsubscribe_trade_ticks(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Unsubscribe from streaming TradeTick data for the given instrument ID.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The tick instrument ID to unsubscribe from.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="update_syntheticself-syntheticinstrument-synthetic--void-1">update_synthetic(self, SyntheticInstrument synthetic) → void<a href="#update_syntheticself-syntheticinstrument-synthetic--void-1" class="hash-link" aria-label="Direct link to update_synthetic(self, SyntheticInstrument synthetic) → void" title="Direct link to update_synthetic(self, SyntheticInstrument synthetic) → void">​</a></h4>
<p>Update the synthetic instrument in the cache.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>synthetic</strong> (<a href="../model/instruments/index.htm#nautilus_trader.model.instruments.SyntheticInstrument"><em>SyntheticInstrument</em></a>) – The synthetic instrument to update in the cache.</li>
<li><strong>Raises:</strong>
<strong>KeyError</strong> – If synthetic does not already exist in the cache.</li>
</ul>
<p><a id="module-nautilus_trader.backtest.node"></a></p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="class-backtestnode"><em>class</em> BacktestNode<a href="#class-backtestnode" class="hash-link" aria-label="Direct link to class-backtestnode" title="Direct link to class-backtestnode">​</a></h3>
<p>Bases: <code>object</code></p>
<p>Provides a node for orchestrating groups of backtest runs.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>configs</strong> (<em>list</em> <em>[</em><a href="../config/index.htm#nautilus_trader.backtest.config.BacktestRunConfig"><em>BacktestRunConfig</em></a> <em>]</em>) – The backtest run configurations.</li>
<li><strong>Raises:</strong>
<ul>
<li><strong>ValueError</strong> – If configs is <code>None</code> or empty.</li>
<li><strong>ValueError</strong> – If configs contains a type other than BacktestRunConfig.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="property-configs--listbacktestrunconfig"><em>property</em> configs <em>: list[<a href="../config/index.htm#nautilus_trader.backtest.config.BacktestRunConfig">BacktestRunConfig</a>]</em><a href="#property-configs--listbacktestrunconfig" class="hash-link" aria-label="Direct link to property-configs--listbacktestrunconfig" title="Direct link to property-configs--listbacktestrunconfig">​</a></h4>
<p>Return the loaded backtest run configs for the node.</p>
<ul>
<li><strong>Return type:</strong>
list[<a href="../config/index.htm#nautilus_trader.backtest.config.BacktestRunConfig">BacktestRunConfig</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="get_log_guard--logguard--logguard--none">get_log_guard() → LogGuard | <a href="../common/index.htm#nautilus_trader.common.component.LogGuard">LogGuard</a> | None<a href="#get_log_guard--logguard--logguard--none" class="hash-link" aria-label="Direct link to get_log_guard--logguard--logguard--none" title="Direct link to get_log_guard--logguard--logguard--none">​</a></h4>
<p>Return the global logging subsystems log guard.</p>
<p>May return <code>None</code> if no internal engines are initialized yet.</p>
<ul>
<li><strong>Return type:</strong>
nautilus_pyo3.LogGuard | <a href="../common/index.htm#nautilus_trader.common.component.LogGuard">LogGuard</a> | None</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="get_enginerun_config_id-str--backtestengine--none">get_engine(run_config_id: str) → <a href="#nautilus_trader.backtest.engine.BacktestEngine">BacktestEngine</a> | None<a href="#get_enginerun_config_id-str--backtestengine--none" class="hash-link" aria-label="Direct link to get_enginerun_config_id-str--backtestengine--none" title="Direct link to get_enginerun_config_id-str--backtestengine--none">​</a></h4>
<p>Return the backtest engine associated with the given run config ID (if found).</p>
<ul>
<li><strong>Parameters:</strong>
<strong>run_config_id</strong> (<em>str</em>) – The run configuration ID for the created engine.</li>
<li><strong>Return type:</strong>
BacktestEngine or <code>None</code></li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="get_engines--listbacktestengine">get_engines() → list[<a href="#nautilus_trader.backtest.engine.BacktestEngine">BacktestEngine</a>]<a href="#get_engines--listbacktestengine" class="hash-link" aria-label="Direct link to get_engines--listbacktestengine" title="Direct link to get_engines--listbacktestengine">​</a></h4>
<p>Return all backtest engines created by the node.</p>
<ul>
<li><strong>Return type:</strong>
list[<a href="#nautilus_trader.backtest.engine.BacktestEngine">BacktestEngine</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="dispose">dispose()<a href="#dispose" class="hash-link" aria-label="Direct link to dispose()" title="Direct link to dispose()">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="add_data_client_factoryname-str-factory-typelivedataclientfactory--none">add_data_client_factory(name: str, factory: type[LiveDataClientFactory]) → None<a href="#add_data_client_factoryname-str-factory-typelivedataclientfactory--none" class="hash-link" aria-label="Direct link to add_data_client_factory(name: str, factory: type[LiveDataClientFactory]) → None" title="Direct link to add_data_client_factory(name: str, factory: type[LiveDataClientFactory]) → None">​</a></h4>
<p>Add the given data client factory to the node.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>name</strong> (<em>str</em>) – The name of the client factory.</li>
<li><strong>factory</strong> (<em>type</em> *[*<em>LiveDataClientFactory</em> <em>]</em>) – The factory class to add.</li>
</ul>
</li>
<li><strong>Raises:</strong>
<ul>
<li><strong>ValueError</strong> – If name is not a valid string.</li>
<li><strong>KeyError</strong> – If name has already been added.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="build--none">build() → None<a href="#build--none" class="hash-link" aria-label="Direct link to build() → None" title="Direct link to build() → None">​</a></h4>
<p>Can be optionally run before a backtest to build backtest engines for all
configured backtest runs.</p>
<p>This can be useful to subscribe to a topic before running a backtest to collect
any type of information.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="setup_download_enginecatalog_config-datacatalogconfig-data_clients-dictstr-typelivedataclientconfig--none">setup_download_engine(catalog_config: <a href="../config/index.htm#nautilus_trader.persistence.config.DataCatalogConfig">DataCatalogConfig</a>, data_clients: dict[str, type[<a href="../config/index.htm#nautilus_trader.live.config.LiveDataClientConfig">LiveDataClientConfig</a>]]) → None<a href="#setup_download_enginecatalog_config-datacatalogconfig-data_clients-dictstr-typelivedataclientconfig--none" class="hash-link" aria-label="Direct link to setup_download_enginecatalog_config-datacatalogconfig-data_clients-dictstr-typelivedataclientconfig--none" title="Direct link to setup_download_enginecatalog_config-datacatalogconfig-data_clients-dictstr-typelivedataclientconfig--none">​</a></h4>
<p>Set up a backtest engine for downloading data.</p>
<p>Creates a dedicated backtest engine with an actor for data downloading purposes.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>catalog_config</strong> (<a href="../config/index.htm#nautilus_trader.persistence.config.DataCatalogConfig"><em>DataCatalogConfig</em></a>) – The configuration for the data catalog.</li>
<li><strong>data_clients</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <a href="../config/index.htm#nautilus_trader.live.config.LiveDataClientConfig"><em>LiveDataClientConfig</em></a> <em>]</em>) – The data client configurations.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="download_datarequest_function-str-kwargs--none">download_data(request_function: str, **kwargs) → None<a href="#download_datarequest_function-str-kwargs--none" class="hash-link" aria-label="Direct link to download_data(request_function: str, **kwargs) → None" title="Direct link to download_data(request_function: str, **kwargs) → None">​</a></h4>
<p>Download data using the specified request function.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>request_function</strong> (<em>str</em>) – The name of the request function to use. Must be one of:
“request_instrument”, “request_data”, “request_bars”,
“request_quote_ticks”, or “request_trade_ticks”.</li>
<li><strong>**kwargs</strong> – Additional keyword arguments to pass to the request function.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="run--listbacktestresult">run() → list[<a href="#nautilus_trader.backtest.results.BacktestResult">BacktestResult</a>]<a href="#run--listbacktestresult" class="hash-link" aria-label="Direct link to run--listbacktestresult" title="Direct link to run--listbacktestresult">​</a></h4>
<p>Run the backtest node which will synchronously execute the list of loaded
backtest run configs.</p>
<ul>
<li><strong>Returns:</strong>
The results of the backtest runs.</li>
<li><strong>Return type:</strong>
list[<a href="#nautilus_trader.backtest.results.BacktestResult">BacktestResult</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="classmethod-load_data_configconfig-backtestdataconfig-start-str--int--none--none-end-str--int--none--none--catalogdataresult"><em>classmethod</em> load_data_config(config: <a href="../config/index.htm#nautilus_trader.backtest.config.BacktestDataConfig">BacktestDataConfig</a>, start: str | int | None = None, end: str | int | None = None) → CatalogDataResult<a href="#classmethod-load_data_configconfig-backtestdataconfig-start-str--int--none--none-end-str--int--none--none--catalogdataresult" class="hash-link" aria-label="Direct link to classmethod-load_data_configconfig-backtestdataconfig-start-str--int--none--none-end-str--int--none--none--catalogdataresult" title="Direct link to classmethod-load_data_configconfig-backtestdataconfig-start-str--int--none--none-end-str--int--none--none--catalogdataresult">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="classmethod-load_catalogconfig-backtestdataconfig--parquetdatacatalog"><em>classmethod</em> load_catalog(config: <a href="../config/index.htm#nautilus_trader.backtest.config.BacktestDataConfig">BacktestDataConfig</a>) → <a href="../persistence/index.htm#nautilus_trader.persistence.catalog.parquet.ParquetDataCatalog">ParquetDataCatalog</a><a href="#classmethod-load_catalogconfig-backtestdataconfig--parquetdatacatalog" class="hash-link" aria-label="Direct link to classmethod-load_catalogconfig-backtestdataconfig--parquetdatacatalog" title="Direct link to classmethod-load_catalogconfig-backtestdataconfig--parquetdatacatalog">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="log_backtest_exceptione-exception-config-backtestrunconfig--none">log_backtest_exception(e: Exception, config: <a href="../config/index.htm#nautilus_trader.backtest.config.BacktestRunConfig">BacktestRunConfig</a>) → None<a href="#log_backtest_exceptione-exception-config-backtestrunconfig--none" class="hash-link" aria-label="Direct link to log_backtest_exceptione-exception-config-backtestrunconfig--none" title="Direct link to log_backtest_exceptione-exception-config-backtestrunconfig--none">​</a></h4>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="get_instrument_idsconfig-backtestdataconfig--listinstrumentid">get_instrument_ids(config: <a href="../config/index.htm#nautilus_trader.backtest.config.BacktestDataConfig">BacktestDataConfig</a>) → list[<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId">InstrumentId</a>]<a href="#get_instrument_idsconfig-backtestdataconfig--listinstrumentid" class="hash-link" aria-label="Direct link to get_instrument_idsconfig-backtestdataconfig--listinstrumentid" title="Direct link to get_instrument_idsconfig-backtestdataconfig--listinstrumentid">​</a></h3>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="get_starting_balancesconfig-backtestvenueconfig--listmoney">get_starting_balances(config: <a href="../config/index.htm#nautilus_trader.backtest.config.BacktestVenueConfig">BacktestVenueConfig</a>) → list[<a href="../model/objects/index.htm#nautilus_trader.model.objects.Money">Money</a>]<a href="#get_starting_balancesconfig-backtestvenueconfig--listmoney" class="hash-link" aria-label="Direct link to get_starting_balancesconfig-backtestvenueconfig--listmoney" title="Direct link to get_starting_balancesconfig-backtestvenueconfig--listmoney">​</a></h3>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="get_base_currencyconfig-backtestvenueconfig--currency--none">get_base_currency(config: <a href="../config/index.htm#nautilus_trader.backtest.config.BacktestVenueConfig">BacktestVenueConfig</a>) → <a href="../model/objects/index.htm#nautilus_trader.model.objects.Currency">Currency</a> | None<a href="#get_base_currencyconfig-backtestvenueconfig--currency--none" class="hash-link" aria-label="Direct link to get_base_currencyconfig-backtestvenueconfig--currency--none" title="Direct link to get_base_currencyconfig-backtestvenueconfig--currency--none">​</a></h3>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="get_leveragesconfig-backtestvenueconfig--dictinstrumentid-decimal">get_leverages(config: <a href="../config/index.htm#nautilus_trader.backtest.config.BacktestVenueConfig">BacktestVenueConfig</a>) → dict[<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId">InstrumentId</a>, Decimal]<a href="#get_leveragesconfig-backtestvenueconfig--dictinstrumentid-decimal" class="hash-link" aria-label="Direct link to get_leveragesconfig-backtestvenueconfig--dictinstrumentid-decimal" title="Direct link to get_leveragesconfig-backtestvenueconfig--dictinstrumentid-decimal">​</a></h3>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="get_fill_modelconfig-backtestvenueconfig--fillmodel--none">get_fill_model(config: <a href="../config/index.htm#nautilus_trader.backtest.config.BacktestVenueConfig">BacktestVenueConfig</a>) → <a href="#nautilus_trader.backtest.models.FillModel">FillModel</a> | None<a href="#get_fill_modelconfig-backtestvenueconfig--fillmodel--none" class="hash-link" aria-label="Direct link to get_fill_modelconfig-backtestvenueconfig--fillmodel--none" title="Direct link to get_fill_modelconfig-backtestvenueconfig--fillmodel--none">​</a></h3>
<p>Create a FillModel from an ImportableFillModelConfig.</p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="get_latency_modelconfig-backtestvenueconfig--latencymodel--none">get_latency_model(config: <a href="../config/index.htm#nautilus_trader.backtest.config.BacktestVenueConfig">BacktestVenueConfig</a>) → <a href="#nautilus_trader.backtest.models.LatencyModel">LatencyModel</a> | None<a href="#get_latency_modelconfig-backtestvenueconfig--latencymodel--none" class="hash-link" aria-label="Direct link to get_latency_modelconfig-backtestvenueconfig--latencymodel--none" title="Direct link to get_latency_modelconfig-backtestvenueconfig--latencymodel--none">​</a></h3>
<p>Create a LatencyModel from an ImportableLatencyModelConfig.</p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="get_fee_modelconfig-backtestvenueconfig--feemodel--none">get_fee_model(config: <a href="../config/index.htm#nautilus_trader.backtest.config.BacktestVenueConfig">BacktestVenueConfig</a>) → <a href="#nautilus_trader.backtest.models.FeeModel">FeeModel</a> | None<a href="#get_fee_modelconfig-backtestvenueconfig--feemodel--none" class="hash-link" aria-label="Direct link to get_fee_modelconfig-backtestvenueconfig--feemodel--none" title="Direct link to get_fee_modelconfig-backtestvenueconfig--feemodel--none">​</a></h3>
<p>Create a FeeModel from an ImportableFeeModelConfig.</p>
<p><a id="module-nautilus_trader.backtest.results"></a></p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="class-backtestresult"><em>class</em> BacktestResult<a href="#class-backtestresult" class="hash-link" aria-label="Direct link to class-backtestresult" title="Direct link to class-backtestresult">​</a></h3>
<p>Bases: <code>object</code></p>
<p>Represents the results of a single complete backtest run.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="trader_id--str">trader_id <em>: str</em><a href="#trader_id--str" class="hash-link" aria-label="Direct link to trader_id--str" title="Direct link to trader_id--str">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="machine_id--str">machine_id <em>: str</em><a href="#machine_id--str" class="hash-link" aria-label="Direct link to machine_id--str" title="Direct link to machine_id--str">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="run_config_id--str--none">run_config_id <em>: str | None</em><a href="#run_config_id--str--none" class="hash-link" aria-label="Direct link to run_config_id--str--none" title="Direct link to run_config_id--str--none">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="instance_id--str">instance_id <em>: str</em><a href="#instance_id--str" class="hash-link" aria-label="Direct link to instance_id--str" title="Direct link to instance_id--str">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="run_id--str">run_id <em>: str</em><a href="#run_id--str" class="hash-link" aria-label="Direct link to run_id--str" title="Direct link to run_id--str">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="run_started--int--none">run_started <em>: int | None</em><a href="#run_started--int--none" class="hash-link" aria-label="Direct link to run_started--int--none" title="Direct link to run_started--int--none">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="run_finished--int--none">run_finished <em>: int | None</em><a href="#run_finished--int--none" class="hash-link" aria-label="Direct link to run_finished--int--none" title="Direct link to run_finished--int--none">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="backtest_start--int--none">backtest_start <em>: int | None</em><a href="#backtest_start--int--none" class="hash-link" aria-label="Direct link to backtest_start--int--none" title="Direct link to backtest_start--int--none">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="backtest_end--int--none">backtest_end <em>: int | None</em><a href="#backtest_end--int--none" class="hash-link" aria-label="Direct link to backtest_end--int--none" title="Direct link to backtest_end--int--none">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="elapsed_time--float">elapsed_time <em>: float</em><a href="#elapsed_time--float" class="hash-link" aria-label="Direct link to elapsed_time--float" title="Direct link to elapsed_time--float">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="iterations--int">iterations <em>: int</em><a href="#iterations--int" class="hash-link" aria-label="Direct link to iterations--int" title="Direct link to iterations--int">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="total_events--int">total_events <em>: int</em><a href="#total_events--int" class="hash-link" aria-label="Direct link to total_events--int" title="Direct link to total_events--int">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="total_orders--int">total_orders <em>: int</em><a href="#total_orders--int" class="hash-link" aria-label="Direct link to total_orders--int" title="Direct link to total_orders--int">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="total_positions--int">total_positions <em>: int</em><a href="#total_positions--int" class="hash-link" aria-label="Direct link to total_positions--int" title="Direct link to total_positions--int">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="stats_pnls--dictstr-dictstr-float">stats_pnls <em>: dict[str, dict[str, float]]</em><a href="#stats_pnls--dictstr-dictstr-float" class="hash-link" aria-label="Direct link to stats_pnls--dictstr-dictstr-float" title="Direct link to stats_pnls--dictstr-dictstr-float">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="stats_returns--dictstr-float">stats_returns <em>: dict[str, float]</em><a href="#stats_returns--dictstr-float" class="hash-link" aria-label="Direct link to stats_returns--dictstr-float" title="Direct link to stats_returns--dictstr-float">​</a></h4>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="ensure_plottingfunc">ensure_plotting(func)<a href="#ensure_plottingfunc" class="hash-link" aria-label="Direct link to ensure_plotting(func)" title="Direct link to ensure_plotting(func)">​</a></h3>
<p>Decorate a function that require a plotting library.</p>
<p>Ensures library is installed and providers a better error about how to install if
not found.</p></div></article><nav class="docusaurus-mt-lg pagination-nav" aria-label="Docs pages"><a class="pagination-nav__link pagination-nav__link--prev" href="../analysis/index.htm"><div class="pagination-nav__sublabel">Previous</div><div class="pagination-nav__label">Analysis</div></a><a class="pagination-nav__link pagination-nav__link--next" href="../cache/index.htm"><div class="pagination-nav__sublabel">Next</div><div class="pagination-nav__label">Cache</div></a></nav></div></div><div class="col col--3"><div class="tableOfContents_bqdL thin-scrollbar theme-doc-toc-desktop"><ul class="table-of-contents table-of-contents__left-border"><li><a href="#class-backtestdataclient" class="table-of-contents__link toc-highlight"><em>class</em> BacktestDataClient</a></li><li><a href="#class-backtestmarketdataclient" class="table-of-contents__link toc-highlight"><em>class</em> BacktestMarketDataClient</a></li><li><a href="#class-backtestdataiterator" class="table-of-contents__link toc-highlight"><em>class</em> BacktestDataIterator</a></li><li><a href="#class-backtestengine" class="table-of-contents__link toc-highlight"><em>class</em> BacktestEngine</a></li><li><a href="#class-simulatedexchange" class="table-of-contents__link toc-highlight"><em>class</em> SimulatedExchange</a></li><li><a href="#class-backtestexecclient" class="table-of-contents__link toc-highlight"><em>class</em> BacktestExecClient</a></li><li><a href="#class-feemodel" class="table-of-contents__link toc-highlight"><em>class</em> FeeModel</a></li><li><a href="#class-fillmodel" class="table-of-contents__link toc-highlight"><em>class</em> FillModel</a></li><li><a href="#class-fixedfeemodel" class="table-of-contents__link toc-highlight"><em>class</em> FixedFeeModel</a></li><li><a href="#class-latencymodel" class="table-of-contents__link toc-highlight"><em>class</em> LatencyModel</a></li><li><a href="#class-makertakerfeemodel" class="table-of-contents__link toc-highlight"><em>class</em> MakerTakerFeeModel</a></li><li><a href="#class-percontractfeemodel" class="table-of-contents__link toc-highlight"><em>class</em> PerContractFeeModel</a></li><li><a href="#class-fxrolloverinterestmodule" class="table-of-contents__link toc-highlight"><em>class</em> FXRolloverInterestModule</a></li><li><a href="#class-simulationmodule" class="table-of-contents__link toc-highlight"><em>class</em> SimulationModule</a></li><li><a href="#class-backtestnode" class="table-of-contents__link toc-highlight"><em>class</em> BacktestNode</a></li><li><a href="#get_instrument_idsconfig-backtestdataconfig--listinstrumentid" class="table-of-contents__link toc-highlight">get_instrument_ids(config: BacktestDataConfig) → list[InstrumentId]</a></li><li><a href="#get_starting_balancesconfig-backtestvenueconfig--listmoney" class="table-of-contents__link toc-highlight">get_starting_balances(config: BacktestVenueConfig) → list[Money]</a></li><li><a href="#get_base_currencyconfig-backtestvenueconfig--currency--none" class="table-of-contents__link toc-highlight">get_base_currency(config: BacktestVenueConfig) → Currency | None</a></li><li><a href="#get_leveragesconfig-backtestvenueconfig--dictinstrumentid-decimal" class="table-of-contents__link toc-highlight">get_leverages(config: BacktestVenueConfig) → dict[InstrumentId, Decimal]</a></li><li><a href="#get_fill_modelconfig-backtestvenueconfig--fillmodel--none" class="table-of-contents__link toc-highlight">get_fill_model(config: BacktestVenueConfig) → FillModel | None</a></li><li><a href="#get_latency_modelconfig-backtestvenueconfig--latencymodel--none" class="table-of-contents__link toc-highlight">get_latency_model(config: BacktestVenueConfig) → LatencyModel | None</a></li><li><a href="#get_fee_modelconfig-backtestvenueconfig--feemodel--none" class="table-of-contents__link toc-highlight">get_fee_model(config: BacktestVenueConfig) → FeeModel | None</a></li><li><a href="#class-backtestresult" class="table-of-contents__link toc-highlight"><em>class</em> BacktestResult</a></li><li><a href="#ensure_plottingfunc" class="table-of-contents__link toc-highlight">ensure_plotting(func)</a></li></ul></div></div></div><div class="footer-wrapper MuiBox-root css-0"><div class="social-footer-box MuiBox-root css-0"><style data-emotion="css 17rjyz3">.css-17rjyz3{-webkit-text-decoration:underline;text-decoration:underline;text-decoration-color:rgba(25, 118, 210, 0.4);padding:12px;margin-right:10px;}.css-17rjyz3:hover{text-decoration-color:inherit;}</style><style data-emotion="css jl1bw5">.css-jl1bw5{margin:0;font:inherit;color:#1976d2;-webkit-text-decoration:underline;text-decoration:underline;text-decoration-color:rgba(25, 118, 210, 0.4);padding:12px;margin-right:10px;}.css-jl1bw5:hover{text-decoration-color:inherit;}</style><a class="MuiTypography-root MuiTypography-inherit MuiLink-root MuiLink-underlineAlways github-footer css-jl1bw5" href="https://github.com/nautechsystems/nautilus_trader" target="_blank"></a><a class="MuiTypography-root MuiTypography-inherit MuiLink-root MuiLink-underlineAlways discord-footer css-jl1bw5" href="https://discord.gg/NautilusTrader" target="_blank"></a><a class="MuiTypography-root MuiTypography-inherit MuiLink-root MuiLink-underlineAlways linkedin-footer css-jl1bw5" href="https://www.linkedin.com/company/nautechsystems/" target="_blank"></a><a class="MuiTypography-root MuiTypography-inherit MuiLink-root MuiLink-underlineAlways x-footer css-jl1bw5" href="https://twitter.com/NautilusTrader" target="_blank"></a></div><div class="footer-copyright">© 2025 Nautech Systems Pty Ltd. All rights reserved.</div></div></div></div></main></div></div></div></div>
</body>
</html>