<!doctype html>
<html lang="en" dir="ltr" class="docs-wrapper plugin-docs plugin-id-default docs-version-nightly docs-doc-page docs-doc-id-api_reference/trading" data-has-hydrated="false">
<head>
<meta charset="UTF-8">
<meta name="generator" content="Docusaurus v3.8.1">
<title data-rh="true">Trading | PoseiTrader Documentation</title><meta data-rh="true" name="viewport" content="width=device-width,initial-scale=1"><meta data-rh="true" name="twitter:card" content="summary_large_image"><meta data-rh="true" property="og:image" content="docs/latestimg/docusaurus-social-card.jpg"><meta data-rh="true" name="twitter:image" content="docs/latestimg/docusaurus-social-card.jpg"><meta data-rh="true" property="og:url" content="docs/latestnightly/api_reference/trading"><meta data-rh="true" property="og:locale" content="en"><meta data-rh="true" name="docusaurus_locale" content="en"><meta data-rh="true" name="docsearch:language" content="en"><meta data-rh="true" name="keywords" content="Open-source trading platform, Algorithmic trading software, Event-driven backtesting, Live trading with no code changes, Trade any asset class, Low-latency trading execution, Python API for trading strategies, Custom market data integration, Futures and options trading, Crypto spot and derivatives trading, Equities trading simulation, FX spot trading, Sports betting markets trading, Fast backtesting strategies, Advanced trading orders, Rust-based trading platform, High-performance trading system, Nanosecond resolution market simulation, Trading across multiple venues, Trading platform for hedge funds, Seamless data integration, Customizable trading strategies, AI and ML trading strategies, Posei trading platform, Multi-venue trading, Unlimited backtesting strategies, Fast trading execution solutions, Realistic market simulations, Seamless trading API integration, PoseiTrader Documentation, Docs, PoseiTrader Docs"><meta data-rh="true" name="title" content="PoseiTrader Documentation"><meta data-rh="true" name="og:title" content="PoseiTrader Documentation"><meta data-rh="true" name="og:description" content="PoseiTrader is a high-performance platform for automating trading strategies, built on the powerful Posei framework for backtesting and real-time trading."><meta data-rh="true" name="og:image" content="img/preview.png"><meta data-rh="true" name="og:url" content="/docs/latest"><meta data-rh="true" name="docusaurus_version" content="nightly"><meta data-rh="true" name="docusaurus_tag" content="docs-default-nightly"><meta data-rh="true" name="docsearch:version" content="nightly"><meta data-rh="true" name="docsearch:docusaurus_tag" content="docs-default-nightly"><meta data-rh="true" property="og:title" content="Trading | PoseiTrader Documentation"><meta data-rh="true" name="description" content="The trading subpackage groups all trading domain specific components and tooling."><meta data-rh="true" property="og:description" content="The trading subpackage groups all trading domain specific components and tooling."><link data-rh="true" rel="icon" href="../../../img/shell.ico"><link data-rh="true" rel="canonical" href="index.htm"><link data-rh="true" rel="alternate" href="index.htm" hreflang="en"><link data-rh="true" rel="alternate" href="index.htm" hreflang="x-default"><link data-rh="true" rel="preconnect" href="https://CWRKEEL01M-dsn.algolia.net" crossorigin="anonymous"><script data-rh="true" type="application/ld+json">{"@context":"https://schema.org","@type":"BreadcrumbList","itemListElement":[{"@type":"ListItem","position":1,"name":"Python API","item":"docs/latestnightly/api_reference/"},{"@type":"ListItem","position":2,"name":"Trading","item":"docs/latestnightly/api_reference/trading"}]}</script><link rel="search" type="application/opensearchdescription+xml" title="PoseiTrader Documentation" href="../../../opensearch.xml">
<script>!function(){var t=window.location.pathname;if(t.startsWith("/docs")&&!t.startsWith("/docs/latest")&&!t.startsWith("/docs/nightly")){var s=t.replace("/docs","/docs/latest");window.location.href=s}}()</script>
<link rel="preconnect" href="https://www.google-analytics.com">
<link rel="preconnect" href="https://www.googletagmanager.com">
<script async src="https://www.googletagmanager.com/gtag/js?id=G-TR4XK597XK"></script>
<script>function gtag(){dataLayer.push(arguments)}window.dataLayer=window.dataLayer||[],gtag("js",new Date),gtag("config","G-TR4XK597XK",{anonymize_ip:!0})</script><link rel="stylesheet" href="../../../assets/css/styles.0f0f692e.css">
<script src="../../../assets/js/runtime~main.92b727d5.js" defer="defer"></script>
<script src="../../../assets/js/main.1cd42d85.js" defer="defer"></script>
</head>
<body class="navigation-with-keyboard">
<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><defs>
<symbol id="theme-svg-external-link" viewbox="0 0 24 24"><path fill="currentColor" d="M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z"></path></symbol>
</defs></svg>
<script>!function(){var t="dark";var e=function(){try{return new URLSearchParams(window.location.search).get("docusaurus-theme")}catch(t){}}()||function(){try{return window.localStorage.getItem("theme")}catch(t){}}();document.documentElement.setAttribute("data-theme",e||t),document.documentElement.setAttribute("data-theme-choice",e||t)}(),function(){try{const c=new URLSearchParams(window.location.search).entries();for(var[t,e]of c)if(t.startsWith("docusaurus-data-")){var a=t.replace("docusaurus-data-","data-");document.documentElement.setAttribute(a,e)}}catch(t){}}()</script><div id="__docusaurus"><div role="region" aria-label="Skip to main content"><a class="skipToContent_fXgn" href="#__docusaurus_skipToContent_fallback">Skip to main content</a></div><nav aria-label="Main" class="theme-layout-navbar navbar navbar--fixed-top navbarHideable_m1mJ"><div class="navbar__inner"><div class="theme-layout-navbar-left navbar__items"><button aria-label="Toggle navigation bar" aria-expanded="false" class="navbar__toggle clean-btn" type="button"><svg width="30" height="30" viewbox="0 0 30 30" aria-hidden="true"><path stroke="currentColor" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" d="M4 7h22M4 15h22M4 23h22"></path></svg></button><a href="../../../../index.htm" target="_blank" rel="noopener noreferrer" class="navbar__brand"><div class="navbar__logo"><img src="../../../img/nt-black-large.webp" alt="PoseiTrader Logo" class="themedComponent_mlkZ themedComponent--light_NVdE"><img src="../../../img/nt-white-large.webp" alt="PoseiTrader Logo" class="themedComponent_mlkZ themedComponent--dark_xIcU"></div><b class="navbar__title text--truncate"></b></a><div class="navbar__item dropdown dropdown--hoverable"><a href="#" aria-haspopup="true" aria-expanded="false" role="button" class="navbar__link">Version</a><ul class="dropdown__menu"><li><a class="dropdown__link" href="../../../latest/index.htm">latest</a></li><li><a aria-current="page" class="dropdown__link dropdown__link--active" href="../../index.htm">nightly</a></li></ul></div><div class="navbarSearchContainer_Bca1"><button type="button" class="DocSearch DocSearch-Button" aria-label="Search (Command+K)"><span class="DocSearch-Button-Container"><svg width="20" height="20" class="DocSearch-Search-Icon" viewbox="0 0 20 20" aria-hidden="true"><path d="M14.386 14.386l4.0877 4.0877-4.0877-4.0877c-2.9418 2.9419-7.7115 2.9419-10.6533 0-2.9419-2.9418-2.9419-7.7115 0-10.6533 2.9418-2.9419 7.7115-2.9419 10.6533 0 2.9419 2.9418 2.9419 7.7115 0 10.6533z" stroke="currentColor" fill="none" fill-rule="evenodd" stroke-linecap="round" stroke-linejoin="round"></path></svg><span class="DocSearch-Button-Placeholder">Search</span></span><span class="DocSearch-Button-Keys"></span></button></div></div><div class="theme-layout-navbar-right navbar__items navbar__items--right"><a href="https://github.com/poseitrader/posei_trader" target="_blank" rel="noopener noreferrer" class="navbar__item navbar__link header-github-link common-social" aria-label="GitHub repository"></a> <a href="https://twitter.com/PoseiTrader" target="_blank" rel="noopener noreferrer" class="navbar__item navbar__link header-x-link common-social" aria-label="X"></a><div class="toggleContainer_T22x colorModeToggle_DEke"><button class="clean-btn toggleButton_yw5v toggleButtonDisabled_BJd7" type="button" disabled="" title="Switch between dark and light mode (currently light mode)" aria-label="Switch between dark and light mode (currently light mode)" aria-live="polite"><div class="switch_Ms1n"><span class="iconWrapper_FHql"><style data-emotion="css lp52so">.css-lp52so{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;width:1em;height:1em;display:inline-block;fill:currentColor;-webkit-flex-shrink:0;-ms-flex-negative:0;flex-shrink:0;-webkit-transition:fill 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;transition:fill 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;font-size:1.5rem;color:black;font-size:14px;}</style><svg class="MuiSvgIcon-root MuiSvgIcon-fontSizeMedium lightToggleIcon_SFTY css-lp52so" focusable="false" aria-hidden="true" viewbox="0 0 24 24" data-testid="LightModeIcon"><path d="M12 7c-2.76 0-5 2.24-5 5s2.24 5 5 5 5-2.24 5-5-2.24-5-5-5M2 13h2c.55 0 1-.45 1-1s-.45-1-1-1H2c-.55 0-1 .45-1 1s.45 1 1 1m18 0h2c.55 0 1-.45 1-1s-.45-1-1-1h-2c-.55 0-1 .45-1 1s.45 1 1 1M11 2v2c0 .55.45 1 1 1s1-.45 1-1V2c0-.55-.45-1-1-1s-1 .45-1 1m0 18v2c0 .55.45 1 1 1s1-.45 1-1v-2c0-.55-.45-1-1-1s-1 .45-1 1M5.99 4.58c-.39-.39-1.03-.39-1.41 0-.39.39-.39 1.03 0 1.41l1.06 1.06c.39.39 1.03.39 1.41 0s.39-1.03 0-1.41zm12.37 12.37c-.39-.39-1.03-.39-1.41 0-.39.39-.39 1.03 0 1.41l1.06 1.06c.39.39 1.03.39 1.41 0 .39-.39.39-1.03 0-1.41zm1.06-10.96c.39-.39.39-1.03 0-1.41-.39-.39-1.03-.39-1.41 0l-1.06 1.06c-.39.39-.39 1.03 0 1.41s1.03.39 1.41 0zM7.05 18.36c.39-.39.39-1.03 0-1.41-.39-.39-1.03-.39-1.41 0l-1.06 1.06c-.39.39-.39 1.03 0 1.41s1.03.39 1.41 0z"></path></svg><style data-emotion="css 13m6tje">.css-13m6tje{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;width:1em;height:1em;display:inline-block;fill:currentColor;-webkit-flex-shrink:0;-ms-flex-negative:0;flex-shrink:0;-webkit-transition:fill 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;transition:fill 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;font-size:1.5rem;color:white;font-size:14px;}</style><svg class="MuiSvgIcon-root MuiSvgIcon-fontSizeMedium darkToggleIcon_ekgs css-13m6tje" focusable="false" aria-hidden="true" viewbox="0 0 24 24" data-testid="DarkModeIcon"><path d="M12 3c-4.97 0-9 4.03-9 9s4.03 9 9 9 9-4.03 9-9c0-.46-.04-.92-.1-1.36-.98 1.37-2.58 2.26-4.4 2.26-2.98 0-5.4-2.42-5.4-5.4 0-1.81.89-3.42 2.26-4.4-.44-.06-.9-.1-1.36-.1"></path></svg></span></div></button></div></div></div><div role="presentation" class="navbar-sidebar__backdrop"></div></nav><div id="__docusaurus_skipToContent_fallback" class="theme-layout-main main-wrapper mainWrapper_z2l0"><div class="docsWrapper_hBAB"><button aria-label="Scroll back to top" class="clean-btn theme-back-to-top-button backToTopButton_sjWU" type="button"></button><div class="docRoot_UBD9"><aside class="theme-doc-sidebar-container docSidebarContainer_YfHR"><div class="sidebarViewport_aRkj"><div class="sidebar_njMd sidebarWithHideableNavbar_wUlq"><a href="../../../../index.htm" target="_blank" rel="noopener noreferrer" tabindex="-1" class="sidebarLogo_isFc"><img src="../../../img/nt-black-large.webp" alt="PoseiTrader Logo" class="themedComponent_mlkZ themedComponent--light_NVdE"><img src="../../../img/nt-white-large.webp" alt="PoseiTrader Logo" class="themedComponent_mlkZ themedComponent--dark_xIcU"><b></b></a><nav aria-label="Docs sidebar" class="menu thin-scrollbar menu_SIkG"><ul class="theme-doc-sidebar-menu menu__list"><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-1 menu__list-item"><a class="menu__link" href="../../index.htm">PoseiTrader Documentation</a></li><li class="theme-doc-sidebar-item-category theme-doc-sidebar-item-category-level-1 menu__list-item menu__list-item--collapsed"><div class="menu__list-item-collapsible"><a class="menu__link menu__link--sublist" href="../../getting_started/index.htm">Getting Started</a><button aria-label="Expand sidebar category &#x27;Getting Started&#x27;" aria-expanded="false" type="button" class="clean-btn menu__caret"></button></div></li><li class="theme-doc-sidebar-item-category theme-doc-sidebar-item-category-level-1 menu__list-item menu__list-item--collapsed"><div class="menu__list-item-collapsible"><a class="menu__link menu__link--sublist" href="../../concepts/index.htm">Concepts</a><button aria-label="Expand sidebar category &#x27;Concepts&#x27;" aria-expanded="false" type="button" class="clean-btn menu__caret"></button></div></li><li class="theme-doc-sidebar-item-category theme-doc-sidebar-item-category-level-1 menu__list-item menu__list-item--collapsed"><div class="menu__list-item-collapsible"><a class="menu__link menu__link--sublist" href="../../tutorials/index.htm">Tutorials</a><button aria-label="Expand sidebar category &#x27;Tutorials&#x27;" aria-expanded="false" type="button" class="clean-btn menu__caret"></button></div></li><li class="theme-doc-sidebar-item-category theme-doc-sidebar-item-category-level-1 menu__list-item menu__list-item--collapsed"><div class="menu__list-item-collapsible"><a class="menu__link menu__link--sublist" href="../../integrations/index.htm">Integrations</a><button aria-label="Expand sidebar category &#x27;Integrations&#x27;" aria-expanded="false" type="button" class="clean-btn menu__caret"></button></div></li><li class="theme-doc-sidebar-item-category theme-doc-sidebar-item-category-level-1 menu__list-item"><div class="menu__list-item-collapsible"><a class="menu__link menu__link--sublist menu__link--active" href="../index.htm">Python API</a><button aria-label="Collapse sidebar category &#x27;Python API&#x27;" aria-expanded="true" type="button" class="clean-btn menu__caret"></button></div><ul class="menu__list"><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-2 menu__list-item"><a class="menu__link" tabindex="0" href="../accounting/index.htm">Accounting</a></li><li class="theme-doc-sidebar-item-category theme-doc-sidebar-item-category-level-2 menu__list-item menu__list-item--collapsed"><div class="menu__list-item-collapsible"><a class="menu__link menu__link--sublist" tabindex="0" href="../adapters/index.htm">Adapters</a><button aria-label="Expand sidebar category &#x27;Adapters&#x27;" aria-expanded="false" type="button" class="clean-btn menu__caret"></button></div></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-2 menu__list-item"><a class="menu__link" tabindex="0" href="../analysis/index.htm">Analysis</a></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-2 menu__list-item"><a class="menu__link" tabindex="0" href="../backtest/index.htm">Backtest</a></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-2 menu__list-item"><a class="menu__link" tabindex="0" href="../cache/index.htm">Cache</a></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-2 menu__list-item"><a class="menu__link" tabindex="0" href="../common/index.htm">Common</a></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-2 menu__list-item"><a class="menu__link" tabindex="0" href="../config/index.htm">Config</a></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-2 menu__list-item"><a class="menu__link" tabindex="0" href="../core/index.htm">Core</a></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-2 menu__list-item"><a class="menu__link" tabindex="0" href="../data/index.htm">Data</a></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-2 menu__list-item"><a class="menu__link" tabindex="0" href="../execution/index.htm">Execution</a></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-2 menu__list-item"><a class="menu__link" tabindex="0" href="../indicators/index.htm">Indicators</a></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-2 menu__list-item"><a class="menu__link" tabindex="0" href="../live/index.htm">Live</a></li><li class="theme-doc-sidebar-item-category theme-doc-sidebar-item-category-level-2 menu__list-item menu__list-item--collapsed"><div class="menu__list-item-collapsible"><a class="menu__link menu__link--sublist" tabindex="0" href="../model/index.htm">Model</a><button aria-label="Expand sidebar category &#x27;Model&#x27;" aria-expanded="false" type="button" class="clean-btn menu__caret"></button></div></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-2 menu__list-item"><a class="menu__link" tabindex="0" href="../persistence/index.htm">Persistence</a></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-2 menu__list-item"><a class="menu__link" tabindex="0" href="../portfolio/index.htm">Portfolio</a></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-2 menu__list-item"><a class="menu__link" tabindex="0" href="../risk/index.htm">Risk</a></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-2 menu__list-item"><a class="menu__link" tabindex="0" href="../serialization/index.htm">Serialization</a></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-2 menu__list-item"><a class="menu__link" tabindex="0" href="../system/index.htm">System</a></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-2 menu__list-item"><a class="menu__link menu__link--active" aria-current="page" tabindex="0" href="index.htm">Trading</a></li></ul></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-1 menu__list-item"><a href="../../../core-nightly/index.htm" target="_blank" rel="noopener noreferrer" class="menu__link menuExternalLink_NmtK">Rust API<svg width="13.5" height="13.5" aria-hidden="true" class="iconExternalLink_nPIU"><use href="#theme-svg-external-link"></use></svg></a></li><li class="theme-doc-sidebar-item-category theme-doc-sidebar-item-category-level-1 menu__list-item menu__list-item--collapsed"><div class="menu__list-item-collapsible"><a class="menu__link menu__link--sublist" href="../../developer_guide/index.htm">Developer Guide</a><button aria-label="Expand sidebar category &#x27;Developer Guide&#x27;" aria-expanded="false" type="button" class="clean-btn menu__caret"></button></div></li></ul></nav></div></div></aside><main class="docMainContainer_TBSr"><div class="container padding-top--md padding-bottom--lg"><div><div class="row"><div class="col docItemCol_VOVn"><div class="docItemContainer_Djhp"><article><nav class="theme-doc-breadcrumbs breadcrumbsContainer_Z_bl" aria-label="Breadcrumbs"><ul class="breadcrumbs"><li class="breadcrumbs__item"><a class="breadcrumbs__link" href="../index.htm"><span>Python API</span></a></li><li class="breadcrumbs__item breadcrumbs__item--active"><span class="breadcrumbs__link">Trading</span></li></ul></nav><span class="theme-doc-version-badge badge badge--secondary">Version: nightly</span><div class="tocCollapsible_ETCw theme-doc-toc-mobile tocMobile_ITEo"><button type="button" class="clean-btn tocCollapsibleButton_TO0P">On this page</button></div><div class="theme-doc-markdown markdown"><header><h1>Trading</h1></header>
<p>The trading subpackage groups all trading domain specific components and tooling.</p>
<p>This is a top-level package where the majority of users will interface with the
framework. Custom trading strategies can be implemented by inheriting from the
Strategy base class.</p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="class-controller"><em>class</em> Controller<a href="#class-controller" class="hash-link" aria-label="Direct link to class-controller" title="Direct link to class-controller">​</a></h3>
<p>Bases: <a href="../common/index.htm#posei_trader.common.actor.Actor"><code>Actor</code></a></p>
<p>The base class for all trader controllers.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>trader</strong> (<a href="#posei_trader.trading.Trader"><em>Trader</em></a>) – The reference to the trader instance to control.</li>
<li><strong>config</strong> (<a href="../config/index.htm#posei_trader.common.config.ActorConfig"><em>ActorConfig</em></a> <em>,</em> <em>optional</em>) – The configuration for the controller</li>
</ul>
</li>
<li><strong>Raises:</strong>
<strong>TypeError</strong> – If config is not of type ActorConfig.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="create_actoractor-actor-start-bool--true--none">create_actor(actor: <a href="../common/index.htm#posei_trader.common.actor.Actor">Actor</a>, start: bool = True) → None<a href="#create_actoractor-actor-start-bool--true--none" class="hash-link" aria-label="Direct link to create_actoractor-actor-start-bool--true--none" title="Direct link to create_actoractor-actor-start-bool--true--none">​</a></h4>
<p>Add the given actor to the controlled trader.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>actor</strong> (<a href="../common/index.htm#posei_trader.common.actor.Actor"><em>Actor</em></a>) – The actor to add.</li>
<li><strong>start</strong> (<em>bool</em> <em>,</em> <em>default True</em>) – If the actor should be started immediately.</li>
</ul>
</li>
<li><strong>Raises:</strong>
<ul>
<li><strong>ValueError</strong> – If actor.state is <code>RUNNING</code> or <code>DISPOSED</code>.</li>
<li><strong>RuntimeError</strong> – If actor is already registered with the trader.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="create_actor_from_configactor_config-importableactorconfig-start-bool--true--none">create_actor_from_config(actor_config: <a href="../config/index.htm#posei_trader.common.config.ImportableActorConfig">ImportableActorConfig</a>, start: bool = True) → None<a href="#create_actor_from_configactor_config-importableactorconfig-start-bool--true--none" class="hash-link" aria-label="Direct link to create_actor_from_configactor_config-importableactorconfig-start-bool--true--none" title="Direct link to create_actor_from_configactor_config-importableactorconfig-start-bool--true--none">​</a></h4>
<p>Create the actor corresponding to actor_config.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>actor_config</strong> (<a href="../config/index.htm#posei_trader.common.config.ImportableActorConfig"><em>ImportableActorConfig</em></a>) – The actor config of the actor to add.</li>
<li><strong>start</strong> (<em>bool</em> <em>,</em> <em>default True</em>) – If the actor should be started immediately.</li>
</ul>
</li>
<li><strong>Raises:</strong>
<ul>
<li><strong>ValueError</strong> – If actor.state is <code>RUNNING</code> or <code>DISPOSED</code>.</li>
<li><strong>RuntimeError</strong> – If actor is already registered with the trader.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="create_strategystrategy-strategy-start-bool--true--none">create_strategy(strategy: <a href="#posei_trader.trading.strategy.Strategy">Strategy</a>, start: bool = True) → None<a href="#create_strategystrategy-strategy-start-bool--true--none" class="hash-link" aria-label="Direct link to create_strategystrategy-strategy-start-bool--true--none" title="Direct link to create_strategystrategy-strategy-start-bool--true--none">​</a></h4>
<p>Add the given strategy to the controlled trader.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>strategy</strong> (<a href="#posei_trader.trading.Strategy"><em>Strategy</em></a>) – The strategy to add.</li>
<li><strong>start</strong> (<em>bool</em> <em>,</em> <em>default True</em>) – If the strategy should be started immediately.</li>
</ul>
</li>
<li><strong>Raises:</strong>
<ul>
<li><strong>ValueError</strong> – If strategy.state is <code>RUNNING</code> or <code>DISPOSED</code>.</li>
<li><strong>RuntimeError</strong> – If strategy is already registered with the trader.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="create_strategy_from_configstrategy_config-importablestrategyconfig-start-bool--true--none">create_strategy_from_config(strategy_config: <a href="../config/index.htm#posei_trader.trading.config.ImportableStrategyConfig">ImportableStrategyConfig</a>, start: bool = True) → None<a href="#create_strategy_from_configstrategy_config-importablestrategyconfig-start-bool--true--none" class="hash-link" aria-label="Direct link to create_strategy_from_configstrategy_config-importablestrategyconfig-start-bool--true--none" title="Direct link to create_strategy_from_configstrategy_config-importablestrategyconfig-start-bool--true--none">​</a></h4>
<p>Create the strategy corresponding to strategy_config.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>strategy_config</strong> (<a href="../config/index.htm#posei_trader.trading.config.ImportableStrategyConfig"><em>ImportableStrategyConfig</em></a>) – The strategy config of the strategy to add.</li>
<li><strong>start</strong> (<em>bool</em> <em>,</em> <em>default True</em>) – If the strategy should be started immediately.</li>
</ul>
</li>
<li><strong>Raises:</strong>
<ul>
<li><strong>ValueError</strong> – If strategy.state is <code>RUNNING</code> or <code>DISPOSED</code>.</li>
<li><strong>RuntimeError</strong> – If strategy is already registered with the trader.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="executecommand-command--none">execute(command: <a href="../core/index.htm#posei_trader.core.message.Command">Command</a>) → None<a href="#executecommand-command--none" class="hash-link" aria-label="Direct link to executecommand-command--none" title="Direct link to executecommand-command--none">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="register_baseself-portfoliofacade-portfolio-messagebus-msgbus-cachefacade-cache-clock-clock--void">register_base(self, PortfolioFacade portfolio, MessageBus msgbus, CacheFacade cache, Clock clock) → void<a href="#register_baseself-portfoliofacade-portfolio-messagebus-msgbus-cachefacade-cache-clock-clock--void" class="hash-link" aria-label="Direct link to register_base(self, PortfolioFacade portfolio, MessageBus msgbus, CacheFacade cache, Clock clock) → void" title="Direct link to register_base(self, PortfolioFacade portfolio, MessageBus msgbus, CacheFacade cache, Clock clock) → void">​</a></h4>
<p>Register with a trader.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>portfolio</strong> (<a href="../portfolio/index.htm#posei_trader.portfolio.PortfolioFacade"><em>PortfolioFacade</em></a>) – The read-only portfolio for the actor.</li>
<li><strong>msgbus</strong> (<a href="../common/index.htm#posei_trader.common.component.MessageBus"><em>MessageBus</em></a>) – The message bus for the actor.</li>
<li><strong>cache</strong> (<a href="../cache/index.htm#posei_trader.cache.base.CacheFacade"><em>CacheFacade</em></a>) – The read-only cache for the actor.</li>
<li><strong>clock</strong> (<a href="../common/index.htm#posei_trader.common.component.Clock"><em>Clock</em></a>) – The clock for the actor.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning">WARNING<a href="#warning" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="remove_actoractor-actor--none">remove_actor(actor: <a href="../common/index.htm#posei_trader.common.actor.Actor">Actor</a>) → None<a href="#remove_actoractor-actor--none" class="hash-link" aria-label="Direct link to remove_actoractor-actor--none" title="Direct link to remove_actoractor-actor--none">​</a></h4>
<p>Remove the given actor.</p>
<p>Will stop the actor first if state is <code>RUNNING</code>.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>actor</strong> (<a href="../common/index.htm#posei_trader.common.actor.Actor"><em>Actor</em></a>) – The actor to remove.</li>
<li><strong>Raises:</strong>
<strong>ValueError</strong> – If actor is not already registered with the trader.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="remove_actor_from_idactor_id-componentid--none">remove_actor_from_id(actor_id: <a href="../model/identifiers/index.htm#posei_trader.model.identifiers.ComponentId">ComponentId</a>) → None<a href="#remove_actor_from_idactor_id-componentid--none" class="hash-link" aria-label="Direct link to remove_actor_from_idactor_id-componentid--none" title="Direct link to remove_actor_from_idactor_id-componentid--none">​</a></h4>
<p>Remove the actor corresponding to actor_id.</p>
<p>Will stop the actor first if state is <code>RUNNING</code>.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>actor_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.ComponentId"><em>ComponentId</em></a>) – The ID of the actor to remove.</li>
<li><strong>Raises:</strong>
<strong>ValueError</strong> – If actor is not already registered with the trader.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="remove_strategystrategy-strategy--none">remove_strategy(strategy: <a href="#posei_trader.trading.strategy.Strategy">Strategy</a>) → None<a href="#remove_strategystrategy-strategy--none" class="hash-link" aria-label="Direct link to remove_strategystrategy-strategy--none" title="Direct link to remove_strategystrategy-strategy--none">​</a></h4>
<p>Remove the given strategy.</p>
<p>Will stop the strategy first if state is <code>RUNNING</code>.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>strategy</strong> (<a href="#posei_trader.trading.Strategy"><em>Strategy</em></a>) – The strategy to remove.</li>
<li><strong>Raises:</strong>
<strong>ValueError</strong> – If strategy is not already registered with the trader.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="remove_strategy_from_idstrategy_id-strategyid--none">remove_strategy_from_id(strategy_id: <a href="../model/identifiers/index.htm#posei_trader.model.identifiers.StrategyId">StrategyId</a>) → None<a href="#remove_strategy_from_idstrategy_id-strategyid--none" class="hash-link" aria-label="Direct link to remove_strategy_from_idstrategy_id-strategyid--none" title="Direct link to remove_strategy_from_idstrategy_id-strategyid--none">​</a></h4>
<p>Remove the strategy corresponding to strategy_id.</p>
<p>Will stop the strategy first if state is <code>RUNNING</code>.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>strategy_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.StrategyId"><em>StrategyId</em></a>) – The ID of the strategy to remove.</li>
<li><strong>Raises:</strong>
<strong>ValueError</strong> – If strategy is not already registered with the trader.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="start_actoractor-actor--none">start_actor(actor: <a href="../common/index.htm#posei_trader.common.actor.Actor">Actor</a>) → None<a href="#start_actoractor-actor--none" class="hash-link" aria-label="Direct link to start_actoractor-actor--none" title="Direct link to start_actoractor-actor--none">​</a></h4>
<p>Start the given actor.</p>
<p>Will log a warning if the actor is already <code>RUNNING</code>.</p>
<ul>
<li><strong>Raises:</strong>
<strong>ValueError</strong> – If actor is not already registered with the trader.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="start_actor_from_idactor_id-componentid--none">start_actor_from_id(actor_id: <a href="../model/identifiers/index.htm#posei_trader.model.identifiers.ComponentId">ComponentId</a>) → None<a href="#start_actor_from_idactor_id-componentid--none" class="hash-link" aria-label="Direct link to start_actor_from_idactor_id-componentid--none" title="Direct link to start_actor_from_idactor_id-componentid--none">​</a></h4>
<p>Start the actor corresponding to actor_id.</p>
<p>Will log a warning if the actor is already <code>RUNNING</code>.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>actor_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.ComponentId"><em>ComponentId</em></a>) – The ID of the actor to start.</li>
<li><strong>Raises:</strong>
<strong>ValueError</strong> – If actor is not already registered with the trader.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="start_strategystrategy-strategy--none">start_strategy(strategy: <a href="#posei_trader.trading.strategy.Strategy">Strategy</a>) → None<a href="#start_strategystrategy-strategy--none" class="hash-link" aria-label="Direct link to start_strategystrategy-strategy--none" title="Direct link to start_strategystrategy-strategy--none">​</a></h4>
<p>Start the given strategy.</p>
<p>Will log a warning if the strategy is already <code>RUNNING</code>.</p>
<ul>
<li><strong>Raises:</strong>
<strong>ValueError</strong> – If strategy is not already registered with the trader.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="start_strategy_from_idstrategy_id-strategyid--none">start_strategy_from_id(strategy_id: <a href="../model/identifiers/index.htm#posei_trader.model.identifiers.StrategyId">StrategyId</a>) → None<a href="#start_strategy_from_idstrategy_id-strategyid--none" class="hash-link" aria-label="Direct link to start_strategy_from_idstrategy_id-strategyid--none" title="Direct link to start_strategy_from_idstrategy_id-strategyid--none">​</a></h4>
<p>Start the strategy corresponding to strategy_id.</p>
<p>Will log a warning if the strategy is already <code>RUNNING</code>.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>strategy_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.StrategyId"><em>StrategyId</em></a>) – The ID of the strategy to start.</li>
<li><strong>Raises:</strong>
<strong>ValueError</strong> – If strategy is not already registered with the trader.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="stop_actoractor-actor--none">stop_actor(actor: <a href="../common/index.htm#posei_trader.common.actor.Actor">Actor</a>) → None<a href="#stop_actoractor-actor--none" class="hash-link" aria-label="Direct link to stop_actoractor-actor--none" title="Direct link to stop_actoractor-actor--none">​</a></h4>
<p>Stop the given actor.</p>
<p>Will log a warning if the actor is not <code>RUNNING</code>.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>actor</strong> (<a href="../common/index.htm#posei_trader.common.actor.Actor"><em>Actor</em></a>) – The actor to stop.</li>
<li><strong>Raises:</strong>
<strong>ValueError</strong> – If actor is not already registered with the trader.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="stop_actor_from_idactor_id-componentid--none">stop_actor_from_id(actor_id: <a href="../model/identifiers/index.htm#posei_trader.model.identifiers.ComponentId">ComponentId</a>) → None<a href="#stop_actor_from_idactor_id-componentid--none" class="hash-link" aria-label="Direct link to stop_actor_from_idactor_id-componentid--none" title="Direct link to stop_actor_from_idactor_id-componentid--none">​</a></h4>
<p>Stop the actor corresponding to actor_id.</p>
<p>Will log a warning if the actor is not <code>RUNNING</code>.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>actor_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.ComponentId"><em>ComponentId</em></a>) – The ID of the actor to stop.</li>
<li><strong>Raises:</strong>
<strong>ValueError</strong> – If actor is not already registered with the trader.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="stop_strategystrategy-strategy--none">stop_strategy(strategy: <a href="#posei_trader.trading.strategy.Strategy">Strategy</a>) → None<a href="#stop_strategystrategy-strategy--none" class="hash-link" aria-label="Direct link to stop_strategystrategy-strategy--none" title="Direct link to stop_strategystrategy-strategy--none">​</a></h4>
<p>Stop the given strategy.</p>
<p>Will log a warning if the strategy is not <code>RUNNING</code>.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>strategy</strong> (<a href="#posei_trader.trading.Strategy"><em>Strategy</em></a>) – The strategy to stop.</li>
<li><strong>Raises:</strong>
<strong>ValueError</strong> – If strategy is not already registered with the trader.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="stop_strategy_from_idstrategy_id-strategyid--none">stop_strategy_from_id(strategy_id: <a href="../model/identifiers/index.htm#posei_trader.model.identifiers.StrategyId">StrategyId</a>) → None<a href="#stop_strategy_from_idstrategy_id-strategyid--none" class="hash-link" aria-label="Direct link to stop_strategy_from_idstrategy_id-strategyid--none" title="Direct link to stop_strategy_from_idstrategy_id-strategyid--none">​</a></h4>
<p>Stop the strategy corresponding to strategy_id.</p>
<p>Will log a warning if the strategy is not <code>RUNNING</code>.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>strategy_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.StrategyId"><em>StrategyId</em></a>) – The ID of the strategy to stop.</li>
<li><strong>Raises:</strong>
<strong>ValueError</strong> – If strategy is not already registered with the trader.</li>
</ul>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="class-strategy"><em>class</em> Strategy<a href="#class-strategy" class="hash-link" aria-label="Direct link to class-strategy" title="Direct link to class-strategy">​</a></h3>
<p>Bases: <a href="../common/index.htm#posei_trader.common.actor.Actor"><code>Actor</code></a></p>
<p>Strategy(config: StrategyConfig | None = None)</p>
<p>The base class for all trading strategies.</p>
<p>This class allows traders to implement their own customized trading strategies.
A trading strategy can configure its own order management system type, which
determines how positions are handled by the ExecutionEngine.</p>
<p>Strategy OMS (Order Management System) types:
: - <code>UNSPECIFIED</code>: No specific type has been configured, will therefore
default to the native OMS type for each venue.</p>
<ul>
<li><code>HEDGING</code>: A position ID will be assigned for each new position which
is opened per instrument.</li>
<li><code>NETTING</code>: There will only be a single position for the strategy per
instrument. The position ID naming convention is {instrument_id}-{strategy_id}.</li>
</ul>
<ul>
<li><strong>Parameters:</strong>
<strong>config</strong> (<a href="../config/index.htm#posei_trader.trading.config.StrategyConfig"><em>StrategyConfig</em></a> <em>,</em> <em>optional</em>) – The trading strategy configuration.</li>
<li><strong>Raises:</strong>
<strong>TypeError</strong> – If config is not of type StrategyConfig.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-1">WARNING<a href="#warning-1" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<ul>
<li>This class should not be used directly, but through a concrete subclass.</li>
<li>Do not call components such as clock and logger in the __init__ prior to registration.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="cancel_all_ordersself-instrumentid-instrument_id-orderside-order_sideordersideno_order_side-clientid-client_idnone-dict-paramsnone--void">cancel_all_orders(self, InstrumentId instrument_id, OrderSide order_side=OrderSide.NO_ORDER_SIDE, ClientId client_id=None, dict params=None) → void<a href="#cancel_all_ordersself-instrumentid-instrument_id-orderside-order_sideordersideno_order_side-clientid-client_idnone-dict-paramsnone--void" class="hash-link" aria-label="Direct link to cancel_all_orders(self, InstrumentId instrument_id, OrderSide order_side=OrderSide.NO_ORDER_SIDE, ClientId client_id=None, dict params=None) → void" title="Direct link to cancel_all_orders(self, InstrumentId instrument_id, OrderSide order_side=OrderSide.NO_ORDER_SIDE, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Cancel all orders for this strategy for the given instrument ID.</p>
<p>A CancelAllOrders command will be created and then sent to <strong>both</strong> the
OrderEmulator and the ExecutionEngine.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument for the orders to cancel.</li>
<li><strong>order_side</strong> (OrderSide, default <code>NO_ORDER_SIDE</code> (both sides)) – The side of the orders to cancel.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="cancel_gtd_expiryself-order-order--void">cancel_gtd_expiry(self, Order order) → void<a href="#cancel_gtd_expiryself-order-order--void" class="hash-link" aria-label="Direct link to cancel_gtd_expiry(self, Order order) → void" title="Direct link to cancel_gtd_expiry(self, Order order) → void">​</a></h4>
<p>Cancel the managed GTD expiry for the given order.</p>
<p>If there is no current GTD expiry timer, then an error will be logged.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>order</strong> (<a href="../model/orders/index.htm#posei_trader.model.orders.Order"><em>Order</em></a>) – The order to cancel the GTD expiry for.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="cancel_orderself-order-order-clientid-client_idnone-dict-paramsnone--void">cancel_order(self, Order order, ClientId client_id=None, dict params=None) → void<a href="#cancel_orderself-order-order-clientid-client_idnone-dict-paramsnone--void" class="hash-link" aria-label="Direct link to cancel_order(self, Order order, ClientId client_id=None, dict params=None) → void" title="Direct link to cancel_order(self, Order order, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Cancel the given order with optional routing instructions.</p>
<p>A CancelOrder command will be created and then sent to <strong>either</strong> the
OrderEmulator or the ExecutionEngine (depending on whether the order is emulated).</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>order</strong> (<a href="../model/orders/index.htm#posei_trader.model.orders.Order"><em>Order</em></a>) – The order to cancel.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="cancel_ordersself-list-orders-clientid-client_idnone-dict-paramsnone--void">cancel_orders(self, list orders, ClientId client_id=None, dict params=None) → void<a href="#cancel_ordersself-list-orders-clientid-client_idnone-dict-paramsnone--void" class="hash-link" aria-label="Direct link to cancel_orders(self, list orders, ClientId client_id=None, dict params=None) → void" title="Direct link to cancel_orders(self, list orders, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Batch cancel the given list of orders with optional routing instructions.</p>
<p>For each order in the list, a CancelOrder command will be created and added to a
BatchCancelOrders command. This command is then sent to the ExecutionEngine.</p>
<p>Logs an error if the orders list contains local/emulated orders.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>orders</strong> (<em>list</em> <em>[</em><a href="../model/orders/index.htm#posei_trader.model.orders.Order"><em>Order</em></a> <em>]</em>) – The orders to cancel.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
<li><strong>Raises:</strong>
<ul>
<li><strong>ValueError</strong> – If orders is empty.</li>
<li><strong>TypeError</strong> – If orders contains a type other than Order.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="change_idself-strategyid-strategy_id--void">change_id(self, StrategyId strategy_id) → void<a href="#change_idself-strategyid-strategy_id--void" class="hash-link" aria-label="Direct link to change_id(self, StrategyId strategy_id) → void" title="Direct link to change_id(self, StrategyId strategy_id) → void">​</a></h4>
<p>Change the strategies identifier to the given strategy_id.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>strategy_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.StrategyId"><em>StrategyId</em></a>) – The new strategy ID to change to.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="change_order_id_tagself-str-order_id_tag--void">change_order_id_tag(self, str order_id_tag) → void<a href="#change_order_id_tagself-str-order_id_tag--void" class="hash-link" aria-label="Direct link to change_order_id_tag(self, str order_id_tag) → void" title="Direct link to change_order_id_tag(self, str order_id_tag) → void">​</a></h4>
<p>Change the order identifier tag to the given order_id_tag.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>order_id_tag</strong> (<em>str</em>) – The new order ID tag to change to.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="close_all_positionsself-instrumentid-instrument_id-positionside-position_sidepositionsideno_position_side-clientid-client_idnone-list-tagsnone-timeinforce-time_in_forcetimeinforcegtc-bool-reduce_onlytrue-dict-paramsnone--void">close_all_positions(self, InstrumentId instrument_id, PositionSide position_side=PositionSide.NO_POSITION_SIDE, ClientId client_id=None, list tags=None, TimeInForce time_in_force=TimeInForce.GTC, bool reduce_only=True, dict params=None) → void<a href="#close_all_positionsself-instrumentid-instrument_id-positionside-position_sidepositionsideno_position_side-clientid-client_idnone-list-tagsnone-timeinforce-time_in_forcetimeinforcegtc-bool-reduce_onlytrue-dict-paramsnone--void" class="hash-link" aria-label="Direct link to close_all_positions(self, InstrumentId instrument_id, PositionSide position_side=PositionSide.NO_POSITION_SIDE, ClientId client_id=None, list tags=None, TimeInForce time_in_force=TimeInForce.GTC, bool reduce_only=True, dict params=None) → void" title="Direct link to close_all_positions(self, InstrumentId instrument_id, PositionSide position_side=PositionSide.NO_POSITION_SIDE, ClientId client_id=None, list tags=None, TimeInForce time_in_force=TimeInForce.GTC, bool reduce_only=True, dict params=None) → void">​</a></h4>
<p>Close all positions for the given instrument ID for this strategy.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument for the positions to close.</li>
<li><strong>position_side</strong> (PositionSide, default <code>NO_POSITION_SIDE</code> (both sides)) – The side of the positions to close.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>tags</strong> (<em>list</em> *[*<em>str</em> <em>]</em> <em>,</em> <em>optional</em>) – The tags for the market orders closing the positions.</li>
<li><strong>time_in_force</strong> (TimeInForce, default <code>GTC</code>) – The time in force for the market orders closing the positions.</li>
<li><strong>reduce_only</strong> (<em>bool</em> <em>,</em> <em>default True</em>) – If the market orders to close positions should carry the ‘reduce-only’ execution instruction.
Optional, as not all venues support this feature.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="close_positionself-position-position-clientid-client_idnone-list-tagsnone-timeinforce-time_in_forcetimeinforcegtc-bool-reduce_onlytrue-dict-paramsnone--void">close_position(self, Position position, ClientId client_id=None, list tags=None, TimeInForce time_in_force=TimeInForce.GTC, bool reduce_only=True, dict params=None) → void<a href="#close_positionself-position-position-clientid-client_idnone-list-tagsnone-timeinforce-time_in_forcetimeinforcegtc-bool-reduce_onlytrue-dict-paramsnone--void" class="hash-link" aria-label="Direct link to close_position(self, Position position, ClientId client_id=None, list tags=None, TimeInForce time_in_force=TimeInForce.GTC, bool reduce_only=True, dict params=None) → void" title="Direct link to close_position(self, Position position, ClientId client_id=None, list tags=None, TimeInForce time_in_force=TimeInForce.GTC, bool reduce_only=True, dict params=None) → void">​</a></h4>
<p>Close the given position.</p>
<p>A closing MarketOrder for the position will be created, and then sent
to the ExecutionEngine via a SubmitOrder command.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>position</strong> (<a href="../model/index.htm#posei_trader.model.Position"><em>Position</em></a>) – The position to close.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>tags</strong> (<em>list</em> *[*<em>str</em> <em>]</em> <em>,</em> <em>optional</em>) – The tags for the market order closing the position.</li>
<li><strong>time_in_force</strong> (TimeInForce, default <code>GTC</code>) – The time in force for the market order closing the position.</li>
<li><strong>reduce_only</strong> (<em>bool</em> <em>,</em> <em>default True</em>) – If the market order to close the position should carry the ‘reduce-only’ execution instruction.
Optional, as not all venues support this feature.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="external_order_claims">external_order_claims<a href="#external_order_claims" class="hash-link" aria-label="Direct link to external_order_claims" title="Direct link to external_order_claims">​</a></h4>
<p>The external order claims instrument IDs for the strategy.</p>
<ul>
<li><strong>Returns:</strong>
list[InstrumentId]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_eventself-event-event--void">handle_event(self, Event event) → void<a href="#handle_eventself-event-event--void" class="hash-link" aria-label="Direct link to handle_event(self, Event event) → void" title="Direct link to handle_event(self, Event event) → void">​</a></h4>
<p>Handle the given event.</p>
<p>If state is <code>RUNNING</code> then passes to on_event.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>event</strong> (<a href="../core/index.htm#posei_trader.core.Event"><em>Event</em></a>) – The event received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-2">WARNING<a href="#warning-2" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="manage_contingent_orders">manage_contingent_orders<a href="#manage_contingent_orders" class="hash-link" aria-label="Direct link to manage_contingent_orders" title="Direct link to manage_contingent_orders">​</a></h4>
<p>If contingent orders should be managed automatically by the strategy.</p>
<ul>
<li><strong>Returns:</strong>
bool</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="manage_gtd_expiry">manage_gtd_expiry<a href="#manage_gtd_expiry" class="hash-link" aria-label="Direct link to manage_gtd_expiry" title="Direct link to manage_gtd_expiry">​</a></h4>
<p>If all order GTD time in force expirations should be managed automatically by the strategy.</p>
<ul>
<li><strong>Returns:</strong>
bool</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="modify_orderself-order-order-quantity-quantitynone-price-pricenone-price-trigger_pricenone-clientid-client_idnone-dict-paramsnone--void">modify_order(self, Order order, Quantity quantity=None, Price price=None, Price trigger_price=None, ClientId client_id=None, dict params=None) → void<a href="#modify_orderself-order-order-quantity-quantitynone-price-pricenone-price-trigger_pricenone-clientid-client_idnone-dict-paramsnone--void" class="hash-link" aria-label="Direct link to modify_order(self, Order order, Quantity quantity=None, Price price=None, Price trigger_price=None, ClientId client_id=None, dict params=None) → void" title="Direct link to modify_order(self, Order order, Quantity quantity=None, Price price=None, Price trigger_price=None, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Modify the given order with optional parameters and routing instructions.</p>
<p>An ModifyOrder command will be created and then sent to <strong>either</strong> the
OrderEmulator or the RiskEngine (depending on whether the order is emulated).</p>
<p>At least one value must differ from the original order for the command to be valid.</p>
<p>Will use an Order Cancel/Replace Request (a.k.a Order Modification)
for FIX protocols, otherwise if order update is not available for
the API, then will cancel and replace with a new order using the
original ClientOrderId.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>order</strong> (<a href="../model/orders/index.htm#posei_trader.model.orders.Order"><em>Order</em></a>) – The order to update.</li>
<li><strong>quantity</strong> (<a href="../model/index.htm#posei_trader.model.Quantity"><em>Quantity</em></a> <em>,</em> <em>optional</em>) – The updated quantity for the given order.</li>
<li><strong>price</strong> (<a href="../model/index.htm#posei_trader.model.Price"><em>Price</em></a> <em>,</em> <em>optional</em>) – The updated price for the given order (if applicable).</li>
<li><strong>trigger_price</strong> (<a href="../model/index.htm#posei_trader.model.Price"><em>Price</em></a> <em>,</em> <em>optional</em>) – The updated trigger price for the given order (if applicable).</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
<li><strong>Raises:</strong>
<ul>
<li><strong>ValueError</strong> – If price is not <code>None</code> and order does not have a price.</li>
<li><strong>ValueError</strong> – If trigger is not <code>None</code> and order does not have a trigger_price.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-3">WARNING<a href="#warning-3" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>If the order is already closed or at PENDING_CANCEL status
then the command will not be generated, and a warning will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="oms_type">oms_type<a href="#oms_type" class="hash-link" aria-label="Direct link to oms_type" title="Direct link to oms_type">​</a></h4>
<p>The order management system for the strategy.</p>
<ul>
<li><strong>Returns:</strong>
OmsType</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_order_acceptedself-orderaccepted-event--void">on_order_accepted(self, OrderAccepted event) → void<a href="#on_order_acceptedself-orderaccepted-event--void" class="hash-link" aria-label="Direct link to on_order_accepted(self, OrderAccepted event) → void" title="Direct link to on_order_accepted(self, OrderAccepted event) → void">​</a></h4>
<p>Actions to be performed when running and receives an order accepted event.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>event</strong> (<a href="../model/events/index.htm#posei_trader.model.events.OrderAccepted"><em>OrderAccepted</em></a>) – The event received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-4">WARNING<a href="#warning-4" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_order_cancel_rejectedself-ordercancelrejected-event--void">on_order_cancel_rejected(self, OrderCancelRejected event) → void<a href="#on_order_cancel_rejectedself-ordercancelrejected-event--void" class="hash-link" aria-label="Direct link to on_order_cancel_rejected(self, OrderCancelRejected event) → void" title="Direct link to on_order_cancel_rejected(self, OrderCancelRejected event) → void">​</a></h4>
<p>Actions to be performed when running and receives an order cancel rejected event.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>event</strong> (<a href="../model/events/index.htm#posei_trader.model.events.OrderCancelRejected"><em>OrderCancelRejected</em></a>) – The event received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-5">WARNING<a href="#warning-5" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_order_canceledself-ordercanceled-event--void">on_order_canceled(self, OrderCanceled event) → void<a href="#on_order_canceledself-ordercanceled-event--void" class="hash-link" aria-label="Direct link to on_order_canceled(self, OrderCanceled event) → void" title="Direct link to on_order_canceled(self, OrderCanceled event) → void">​</a></h4>
<p>Actions to be performed when running and receives an order canceled event.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>event</strong> (<a href="../model/events/index.htm#posei_trader.model.events.OrderCanceled"><em>OrderCanceled</em></a>) – The event received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-6">WARNING<a href="#warning-6" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_order_deniedself-orderdenied-event--void">on_order_denied(self, OrderDenied event) → void<a href="#on_order_deniedself-orderdenied-event--void" class="hash-link" aria-label="Direct link to on_order_denied(self, OrderDenied event) → void" title="Direct link to on_order_denied(self, OrderDenied event) → void">​</a></h4>
<p>Actions to be performed when running and receives an order denied event.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>event</strong> (<a href="../model/events/index.htm#posei_trader.model.events.OrderDenied"><em>OrderDenied</em></a>) – The event received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-7">WARNING<a href="#warning-7" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_order_emulatedself-orderemulated-event--void">on_order_emulated(self, OrderEmulated event) → void<a href="#on_order_emulatedself-orderemulated-event--void" class="hash-link" aria-label="Direct link to on_order_emulated(self, OrderEmulated event) → void" title="Direct link to on_order_emulated(self, OrderEmulated event) → void">​</a></h4>
<p>Actions to be performed when running and receives an order emulated event.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>event</strong> (<a href="../model/events/index.htm#posei_trader.model.events.OrderEmulated"><em>OrderEmulated</em></a>) – The event received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-8">WARNING<a href="#warning-8" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_order_eventself-orderevent-event--void">on_order_event(self, OrderEvent event) → void<a href="#on_order_eventself-orderevent-event--void" class="hash-link" aria-label="Direct link to on_order_event(self, OrderEvent event) → void" title="Direct link to on_order_event(self, OrderEvent event) → void">​</a></h4>
<p>Actions to be performed when running and receives an order event.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>event</strong> (<a href="../model/events/index.htm#posei_trader.model.events.OrderEvent"><em>OrderEvent</em></a>) – The event received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-9">WARNING<a href="#warning-9" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_order_expiredself-orderexpired-event--void">on_order_expired(self, OrderExpired event) → void<a href="#on_order_expiredself-orderexpired-event--void" class="hash-link" aria-label="Direct link to on_order_expired(self, OrderExpired event) → void" title="Direct link to on_order_expired(self, OrderExpired event) → void">​</a></h4>
<p>Actions to be performed when running and receives an order expired event.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>event</strong> (<a href="../model/events/index.htm#posei_trader.model.events.OrderExpired"><em>OrderExpired</em></a>) – The event received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-10">WARNING<a href="#warning-10" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_order_filledself-orderfilled-event--void">on_order_filled(self, OrderFilled event) → void<a href="#on_order_filledself-orderfilled-event--void" class="hash-link" aria-label="Direct link to on_order_filled(self, OrderFilled event) → void" title="Direct link to on_order_filled(self, OrderFilled event) → void">​</a></h4>
<p>Actions to be performed when running and receives an order filled event.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>event</strong> (<a href="../model/events/index.htm#posei_trader.model.events.OrderFilled"><em>OrderFilled</em></a>) – The event received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-11">WARNING<a href="#warning-11" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_order_initializedself-orderinitialized-event--void">on_order_initialized(self, OrderInitialized event) → void<a href="#on_order_initializedself-orderinitialized-event--void" class="hash-link" aria-label="Direct link to on_order_initialized(self, OrderInitialized event) → void" title="Direct link to on_order_initialized(self, OrderInitialized event) → void">​</a></h4>
<p>Actions to be performed when running and receives an order initialized event.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>event</strong> (<a href="../model/events/index.htm#posei_trader.model.events.OrderInitialized"><em>OrderInitialized</em></a>) – The event received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-12">WARNING<a href="#warning-12" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_order_modify_rejectedself-ordermodifyrejected-event--void">on_order_modify_rejected(self, OrderModifyRejected event) → void<a href="#on_order_modify_rejectedself-ordermodifyrejected-event--void" class="hash-link" aria-label="Direct link to on_order_modify_rejected(self, OrderModifyRejected event) → void" title="Direct link to on_order_modify_rejected(self, OrderModifyRejected event) → void">​</a></h4>
<p>Actions to be performed when running and receives an order modify rejected event.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>event</strong> (<a href="../model/events/index.htm#posei_trader.model.events.OrderModifyRejected"><em>OrderModifyRejected</em></a>) – The event received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-13">WARNING<a href="#warning-13" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_order_pending_cancelself-orderpendingcancel-event--void">on_order_pending_cancel(self, OrderPendingCancel event) → void<a href="#on_order_pending_cancelself-orderpendingcancel-event--void" class="hash-link" aria-label="Direct link to on_order_pending_cancel(self, OrderPendingCancel event) → void" title="Direct link to on_order_pending_cancel(self, OrderPendingCancel event) → void">​</a></h4>
<p>Actions to be performed when running and receives an order pending cancel event.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>event</strong> (<a href="../model/events/index.htm#posei_trader.model.events.OrderPendingCancel"><em>OrderPendingCancel</em></a>) – The event received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-14">WARNING<a href="#warning-14" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_order_pending_updateself-orderpendingupdate-event--void">on_order_pending_update(self, OrderPendingUpdate event) → void<a href="#on_order_pending_updateself-orderpendingupdate-event--void" class="hash-link" aria-label="Direct link to on_order_pending_update(self, OrderPendingUpdate event) → void" title="Direct link to on_order_pending_update(self, OrderPendingUpdate event) → void">​</a></h4>
<p>Actions to be performed when running and receives an order pending update event.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>event</strong> (<a href="../model/events/index.htm#posei_trader.model.events.OrderPendingUpdate"><em>OrderPendingUpdate</em></a>) – The event received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-15">WARNING<a href="#warning-15" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_order_rejectedself-orderrejected-event--void">on_order_rejected(self, OrderRejected event) → void<a href="#on_order_rejectedself-orderrejected-event--void" class="hash-link" aria-label="Direct link to on_order_rejected(self, OrderRejected event) → void" title="Direct link to on_order_rejected(self, OrderRejected event) → void">​</a></h4>
<p>Actions to be performed when running and receives an order rejected event.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>event</strong> (<a href="../model/events/index.htm#posei_trader.model.events.OrderRejected"><em>OrderRejected</em></a>) – The event received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-16">WARNING<a href="#warning-16" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_order_releasedself-orderreleased-event--void">on_order_released(self, OrderReleased event) → void<a href="#on_order_releasedself-orderreleased-event--void" class="hash-link" aria-label="Direct link to on_order_released(self, OrderReleased event) → void" title="Direct link to on_order_released(self, OrderReleased event) → void">​</a></h4>
<p>Actions to be performed when running and receives an order released event.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>event</strong> (<a href="../model/events/index.htm#posei_trader.model.events.OrderReleased"><em>OrderReleased</em></a>) – The event received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-17">WARNING<a href="#warning-17" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_order_submittedself-ordersubmitted-event--void">on_order_submitted(self, OrderSubmitted event) → void<a href="#on_order_submittedself-ordersubmitted-event--void" class="hash-link" aria-label="Direct link to on_order_submitted(self, OrderSubmitted event) → void" title="Direct link to on_order_submitted(self, OrderSubmitted event) → void">​</a></h4>
<p>Actions to be performed when running and receives an order submitted event.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>event</strong> (<a href="../model/events/index.htm#posei_trader.model.events.OrderSubmitted"><em>OrderSubmitted</em></a>) – The event received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-18">WARNING<a href="#warning-18" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_order_triggeredself-ordertriggered-event--void">on_order_triggered(self, OrderTriggered event) → void<a href="#on_order_triggeredself-ordertriggered-event--void" class="hash-link" aria-label="Direct link to on_order_triggered(self, OrderTriggered event) → void" title="Direct link to on_order_triggered(self, OrderTriggered event) → void">​</a></h4>
<p>Actions to be performed when running and receives an order triggered event.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>event</strong> (<a href="../model/events/index.htm#posei_trader.model.events.OrderTriggered"><em>OrderTriggered</em></a>) – The event received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-19">WARNING<a href="#warning-19" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_order_updatedself-orderupdated-event--void">on_order_updated(self, OrderUpdated event) → void<a href="#on_order_updatedself-orderupdated-event--void" class="hash-link" aria-label="Direct link to on_order_updated(self, OrderUpdated event) → void" title="Direct link to on_order_updated(self, OrderUpdated event) → void">​</a></h4>
<p>Actions to be performed when running and receives an order updated event.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>event</strong> (<a href="../model/events/index.htm#posei_trader.model.events.OrderUpdated"><em>OrderUpdated</em></a>) – The event received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-20">WARNING<a href="#warning-20" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_position_changedself-positionchanged-event--void">on_position_changed(self, PositionChanged event) → void<a href="#on_position_changedself-positionchanged-event--void" class="hash-link" aria-label="Direct link to on_position_changed(self, PositionChanged event) → void" title="Direct link to on_position_changed(self, PositionChanged event) → void">​</a></h4>
<p>Actions to be performed when running and receives a position changed event.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>event</strong> (<a href="../model/events/index.htm#posei_trader.model.events.PositionChanged"><em>PositionChanged</em></a>) – The event received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-21">WARNING<a href="#warning-21" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_position_closedself-positionclosed-event--void">on_position_closed(self, PositionClosed event) → void<a href="#on_position_closedself-positionclosed-event--void" class="hash-link" aria-label="Direct link to on_position_closed(self, PositionClosed event) → void" title="Direct link to on_position_closed(self, PositionClosed event) → void">​</a></h4>
<p>Actions to be performed when running and receives a position closed event.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>event</strong> (<a href="../model/events/index.htm#posei_trader.model.events.PositionClosed"><em>PositionClosed</em></a>) – The event received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-22">WARNING<a href="#warning-22" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_position_eventself-positionevent-event--void">on_position_event(self, PositionEvent event) → void<a href="#on_position_eventself-positionevent-event--void" class="hash-link" aria-label="Direct link to on_position_event(self, PositionEvent event) → void" title="Direct link to on_position_event(self, PositionEvent event) → void">​</a></h4>
<p>Actions to be performed when running and receives a position event.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>event</strong> (<a href="../model/events/index.htm#posei_trader.model.events.PositionEvent"><em>PositionEvent</em></a>) – The event received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-23">WARNING<a href="#warning-23" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_position_openedself-positionopened-event--void">on_position_opened(self, PositionOpened event) → void<a href="#on_position_openedself-positionopened-event--void" class="hash-link" aria-label="Direct link to on_position_opened(self, PositionOpened event) → void" title="Direct link to on_position_opened(self, PositionOpened event) → void">​</a></h4>
<p>Actions to be performed when running and receives a position opened event.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>event</strong> (<a href="../model/events/index.htm#posei_trader.model.events.PositionOpened"><em>PositionOpened</em></a>) – The event received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-24">WARNING<a href="#warning-24" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_resetself--void">on_reset(self) → void<a href="#on_resetself--void" class="hash-link" aria-label="Direct link to on_reset(self) → void" title="Direct link to on_reset(self) → void">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_resumeself--void">on_resume(self) → void<a href="#on_resumeself--void" class="hash-link" aria-label="Direct link to on_resume(self) → void" title="Direct link to on_resume(self) → void">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_startself--void">on_start(self) → void<a href="#on_startself--void" class="hash-link" aria-label="Direct link to on_start(self) → void" title="Direct link to on_start(self) → void">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_stopself--void">on_stop(self) → void<a href="#on_stopself--void" class="hash-link" aria-label="Direct link to on_stop(self) → void" title="Direct link to on_stop(self) → void">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="order_factory">order_factory<a href="#order_factory" class="hash-link" aria-label="Direct link to order_factory" title="Direct link to order_factory">​</a></h4>
<p>The order factory for the strategy.</p>
<ul>
<li><strong>Returns:</strong>
OrderFactory</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="order_id_tag">order_id_tag<a href="#order_id_tag" class="hash-link" aria-label="Direct link to order_id_tag" title="Direct link to order_id_tag">​</a></h4>
<p>The order ID tag for the strategy.</p>
<ul>
<li><strong>Returns:</strong>
str</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="query_orderself-order-order-clientid-client_idnone-dict-paramsnone--void">query_order(self, Order order, ClientId client_id=None, dict params=None) → void<a href="#query_orderself-order-order-clientid-client_idnone-dict-paramsnone--void" class="hash-link" aria-label="Direct link to query_order(self, Order order, ClientId client_id=None, dict params=None) → void" title="Direct link to query_order(self, Order order, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Query the given order with optional routing instructions.</p>
<p>A QueryOrder command will be created and then sent to the
ExecutionEngine.</p>
<p>Logs an error if no VenueOrderId has been assigned to the order.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>order</strong> (<a href="../model/orders/index.htm#posei_trader.model.orders.Order"><em>Order</em></a>) – The order to query.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="registerself-traderid-trader_id-portfoliofacade-portfolio-messagebus-msgbus-cachefacade-cache-clock-clock--void">register(self, TraderId trader_id, PortfolioFacade portfolio, MessageBus msgbus, CacheFacade cache, Clock clock) → void<a href="#registerself-traderid-trader_id-portfoliofacade-portfolio-messagebus-msgbus-cachefacade-cache-clock-clock--void" class="hash-link" aria-label="Direct link to register(self, TraderId trader_id, PortfolioFacade portfolio, MessageBus msgbus, CacheFacade cache, Clock clock) → void" title="Direct link to register(self, TraderId trader_id, PortfolioFacade portfolio, MessageBus msgbus, CacheFacade cache, Clock clock) → void">​</a></h4>
<p>Register the strategy with a trader.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>trader_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.TraderId"><em>TraderId</em></a>) – The trader ID for the strategy.</li>
<li><strong>portfolio</strong> (<a href="../portfolio/index.htm#posei_trader.portfolio.PortfolioFacade"><em>PortfolioFacade</em></a>) – The read-only portfolio for the strategy.</li>
<li><strong>msgbus</strong> (<a href="../common/index.htm#posei_trader.common.component.MessageBus"><em>MessageBus</em></a>) – The message bus for the strategy.</li>
<li><strong>cache</strong> (<a href="../cache/index.htm#posei_trader.cache.base.CacheFacade"><em>CacheFacade</em></a>) – The read-only cache for the strategy.</li>
<li><strong>clock</strong> (<a href="../common/index.htm#posei_trader.common.component.Clock"><em>Clock</em></a>) – The clock for the strategy.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-25">WARNING<a href="#warning-25" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="submit_orderself-order-order-positionid-position_idnone-clientid-client_idnone-dict-paramsnone--void">submit_order(self, Order order, PositionId position_id=None, ClientId client_id=None, dict params=None) → void<a href="#submit_orderself-order-order-positionid-position_idnone-clientid-client_idnone-dict-paramsnone--void" class="hash-link" aria-label="Direct link to submit_order(self, Order order, PositionId position_id=None, ClientId client_id=None, dict params=None) → void" title="Direct link to submit_order(self, Order order, PositionId position_id=None, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Submit the given order with optional position ID, execution algorithm
and routing instructions.</p>
<p>A SubmitOrder command will be created and sent to <strong>either</strong> an
ExecAlgorithm, the OrderEmulator or the RiskEngine (depending whether
the order is emulated and/or has an exec_algorithm_id specified).</p>
<p>If the client order ID is duplicate, then the order will be denied.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>order</strong> (<a href="../model/orders/index.htm#posei_trader.model.orders.Order"><em>Order</em></a>) – The order to submit.</li>
<li><strong>position_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.PositionId"><em>PositionId</em></a> <em>,</em> <em>optional</em>) – The position ID to submit the order against. If a position does not
yet exist, then any position opened will have this identifier assigned.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific execution client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
<li><strong>Raises:</strong>
<strong>ValueError</strong> – If order.status is not <code>INITIALIZED</code>.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-26">WARNING<a href="#warning-26" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>If a position_id is passed and a position does not yet exist, then any
position opened by the order will have this position ID assigned. This may
not be what you intended.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="submit_order_listself-orderlist-order_list-positionid-position_idnone-clientid-client_idnone-dict-paramsnone--void">submit_order_list(self, OrderList order_list, PositionId position_id=None, ClientId client_id=None, dict params=None) → void<a href="#submit_order_listself-orderlist-order_list-positionid-position_idnone-clientid-client_idnone-dict-paramsnone--void" class="hash-link" aria-label="Direct link to submit_order_list(self, OrderList order_list, PositionId position_id=None, ClientId client_id=None, dict params=None) → void" title="Direct link to submit_order_list(self, OrderList order_list, PositionId position_id=None, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Submit the given order list with optional position ID, execution algorithm
and routing instructions.</p>
<p>A SubmitOrderList command will be created and sent to <strong>either</strong> the
OrderEmulator, or the RiskEngine (depending whether an order is emulated).</p>
<p>If the order list ID is duplicate, or any client order ID is duplicate,
then all orders will be denied.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>order_list</strong> (<a href="../model/orders/index.htm#posei_trader.model.orders.OrderList"><em>OrderList</em></a>) – The order list to submit.</li>
<li><strong>position_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.PositionId"><em>PositionId</em></a> <em>,</em> <em>optional</em>) – The position ID to submit the order against. If a position does not
yet exist, then any position opened will have this identifier assigned.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific execution client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
<li><strong>Raises:</strong>
<strong>ValueError</strong> – If any order.status is not <code>INITIALIZED</code>.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-27">WARNING<a href="#warning-27" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>If a position_id is passed and a position does not yet exist, then any
position opened by an order will have this position ID assigned. This may
not be what you intended.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="to_importable_configself--importablestrategyconfig">to_importable_config(self) → <a href="../config/index.htm#posei_trader.trading.config.ImportableStrategyConfig">ImportableStrategyConfig</a><a href="#to_importable_configself--importablestrategyconfig" class="hash-link" aria-label="Direct link to to_importable_configself--importablestrategyconfig" title="Direct link to to_importable_configself--importablestrategyconfig">​</a></h4>
<p>Returns an importable configuration for this strategy.</p>
<ul>
<li><strong>Return type:</strong>
<a href="../config/index.htm#posei_trader.trading.config.ImportableStrategyConfig">ImportableStrategyConfig</a></li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="use_uuid_client_order_ids">use_uuid_client_order_ids<a href="#use_uuid_client_order_ids" class="hash-link" aria-label="Direct link to use_uuid_client_order_ids" title="Direct link to use_uuid_client_order_ids">​</a></h4>
<p>If UUID4’s should be used for client order ID values.</p>
<ul>
<li><strong>Returns:</strong>
bool</li>
</ul>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="class-trader"><em>class</em> Trader<a href="#class-trader" class="hash-link" aria-label="Direct link to class-trader" title="Direct link to class-trader">​</a></h3>
<p>Bases: <a href="../common/index.htm#posei_trader.common.component.Component"><code>Component</code></a></p>
<p>Provides a trader for managing a fleet of actors, execution algorithms and trading
strategies.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>trader_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.TraderId"><em>TraderId</em></a>) – The ID for the trader.</li>
<li><strong>instance_id</strong> (<a href="../core/index.htm#posei_trader.core.UUID4"><em>UUID4</em></a>) – The instance ID for the trader.</li>
<li><strong>msgbus</strong> (<a href="../common/index.htm#posei_trader.common.component.MessageBus"><em>MessageBus</em></a>) – The message bus for the trader.</li>
<li><strong>cache</strong> (<a href="../cache/index.htm#posei_trader.cache.Cache"><em>Cache</em></a>) – The cache for the trader.</li>
<li><strong>portfolio</strong> (<a href="../portfolio/index.htm#posei_trader.portfolio.Portfolio"><em>Portfolio</em></a>) – The portfolio for the trader.</li>
<li><strong>data_engine</strong> (<a href="../data/index.htm#posei_trader.data.engine.DataEngine"><em>DataEngine</em></a>) – The data engine for the trader.</li>
<li><strong>risk_engine</strong> (<a href="../risk/index.htm#posei_trader.risk.engine.RiskEngine"><em>RiskEngine</em></a>) – The risk engine for the trader.</li>
<li><strong>exec_engine</strong> (<a href="../execution/index.htm#posei_trader.execution.engine.ExecutionEngine"><em>ExecutionEngine</em></a>) – The execution engine for the trader.</li>
<li><strong>clock</strong> (<a href="../common/index.htm#posei_trader.common.component.Clock"><em>Clock</em></a>) – The clock for the trader.</li>
<li><strong>environment</strong> (Environment { <code>BACKTEST</code>, <code>SANDBOX</code>, <code>LIVE</code> }) – The environment context.</li>
<li><strong>has_controller</strong> (<em>bool</em> <em>,</em> <em>default False</em>) – If the trader has a controller.</li>
<li><strong>loop</strong> (<em>asyncio.AbstractEventLoop</em> <em>,</em> <em>optional</em>) – The event loop for the trader.</li>
</ul>
</li>
<li><strong>Raises:</strong>
<ul>
<li><strong>ValueError</strong> – If portfolio is not equal to the exec_engine portfolio.</li>
<li><strong>ValueError</strong> – If strategies is <code>None</code>.</li>
<li><strong>ValueError</strong> – If strategies is empty.</li>
<li><strong>TypeError</strong> – If strategies contains a type other than Strategy.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="actor_ids--listcomponentid">actor_ids() → list[<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.ComponentId">ComponentId</a>]<a href="#actor_ids--listcomponentid" class="hash-link" aria-label="Direct link to actor_ids--listcomponentid" title="Direct link to actor_ids--listcomponentid">​</a></h4>
<p>Return the actor IDs loaded in the trader.</p>
<ul>
<li><strong>Return type:</strong>
list[<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.ComponentId">ComponentId</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="actor_states--dictcomponentid-str">actor_states() → dict[<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.ComponentId">ComponentId</a>, str]<a href="#actor_states--dictcomponentid-str" class="hash-link" aria-label="Direct link to actor_states--dictcomponentid-str" title="Direct link to actor_states--dictcomponentid-str">​</a></h4>
<p>Return the traders actor states.</p>
<ul>
<li><strong>Return type:</strong>
dict[<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.ComponentId">ComponentId</a>, str]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="actors--listactor">actors() → list[<a href="../common/index.htm#posei_trader.common.actor.Actor">Actor</a>]<a href="#actors--listactor" class="hash-link" aria-label="Direct link to actors--listactor" title="Direct link to actors--listactor">​</a></h4>
<p>Return the actors loaded in the trader.</p>
<ul>
<li><strong>Return type:</strong>
list[<a href="../common/index.htm#posei_trader.common.actor.Actor">Actor</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="add_actoractor-actor--none">add_actor(actor: <a href="../common/index.htm#posei_trader.common.actor.Actor">Actor</a>) → None<a href="#add_actoractor-actor--none" class="hash-link" aria-label="Direct link to add_actoractor-actor--none" title="Direct link to add_actoractor-actor--none">​</a></h4>
<p>Add the given custom component to the trader.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>actor</strong> (<a href="../common/index.htm#posei_trader.common.actor.Actor"><em>Actor</em></a>) – The actor to add and register.</li>
<li><strong>Raises:</strong>
<ul>
<li><strong>ValueError</strong> – If actor.state is <code>RUNNING</code> or <code>DISPOSED</code>.</li>
<li><strong>RuntimeError</strong> – If actor.id already exists in the trader.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="add_actorsactors-listactor--none">add_actors(actors: list[<a href="../common/index.htm#posei_trader.common.actor.Actor">Actor</a>]) → None<a href="#add_actorsactors-listactor--none" class="hash-link" aria-label="Direct link to add_actorsactors-listactor--none" title="Direct link to add_actorsactors-listactor--none">​</a></h4>
<p>Add the given actors to the trader.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>actors</strong> (<em>list</em> *[*<em>TradingStrategies</em> <em>]</em>) – The actors to add and register.</li>
<li><strong>Raises:</strong>
<strong>ValueError</strong> – If actors is <code>None</code> or empty.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="add_exec_algorithmexec_algorithm-any--none">add_exec_algorithm(exec_algorithm: Any) → None<a href="#add_exec_algorithmexec_algorithm-any--none" class="hash-link" aria-label="Direct link to add_exec_algorithm(exec_algorithm: Any) → None" title="Direct link to add_exec_algorithm(exec_algorithm: Any) → None">​</a></h4>
<p>Add the given execution algorithm to the trader.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>exec_algorithm</strong> (<a href="../execution/index.htm#posei_trader.execution.algorithm.ExecAlgorithm"><em>ExecAlgorithm</em></a>) – The execution algorithm to add and register.</li>
<li><strong>Raises:</strong>
<ul>
<li><strong>KeyError</strong> – If exec_algorithm.id already exists in the trader.</li>
<li><strong>ValueError</strong> – If exec_algorithm.state is <code>RUNNING</code> or <code>DISPOSED</code>.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="add_exec_algorithmsexec_algorithms-listany--none">add_exec_algorithms(exec_algorithms: list[Any]) → None<a href="#add_exec_algorithmsexec_algorithms-listany--none" class="hash-link" aria-label="Direct link to add_exec_algorithms(exec_algorithms: list[Any]) → None" title="Direct link to add_exec_algorithms(exec_algorithms: list[Any]) → None">​</a></h4>
<p>Add the given execution algorithms to the trader.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>exec_algorithms</strong> (<em>list</em> <em>[</em><a href="../execution/index.htm#posei_trader.execution.algorithm.ExecAlgorithm"><em>ExecAlgorithm</em></a> <em>]</em>) – The execution algorithms to add and register.</li>
<li><strong>Raises:</strong>
<strong>ValueError</strong> – If exec_algorithms is <code>None</code> or empty.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="add_strategiesstrategies-liststrategy--none">add_strategies(strategies: list[<a href="#posei_trader.trading.strategy.Strategy">Strategy</a>]) → None<a href="#add_strategiesstrategies-liststrategy--none" class="hash-link" aria-label="Direct link to add_strategiesstrategies-liststrategy--none" title="Direct link to add_strategiesstrategies-liststrategy--none">​</a></h4>
<p>Add the given trading strategies to the trader.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>strategies</strong> (<em>list</em> *[*<em>TradingStrategies</em> <em>]</em>) – The trading strategies to add and register.</li>
<li><strong>Raises:</strong>
<strong>ValueError</strong> – If strategies is <code>None</code> or empty.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="add_strategystrategy-strategy--none">add_strategy(strategy: <a href="#posei_trader.trading.strategy.Strategy">Strategy</a>) → None<a href="#add_strategystrategy-strategy--none" class="hash-link" aria-label="Direct link to add_strategystrategy-strategy--none" title="Direct link to add_strategystrategy-strategy--none">​</a></h4>
<p>Add the given trading strategy to the trader.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>strategy</strong> (<a href="#posei_trader.trading.Strategy"><em>Strategy</em></a>) – The trading strategy to add and register.</li>
<li><strong>Raises:</strong>
<ul>
<li><strong>ValueError</strong> – If strategy.state is <code>RUNNING</code> or <code>DISPOSED</code>.</li>
<li><strong>RuntimeError</strong> – If strategy.id already exists in the trader.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="check_residuals--none">check_residuals() → None<a href="#check_residuals--none" class="hash-link" aria-label="Direct link to check_residuals() → None" title="Direct link to check_residuals() → None">​</a></h4>
<p>Check for residual open state such as open orders or open positions.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="clear_actors--none">clear_actors() → None<a href="#clear_actors--none" class="hash-link" aria-label="Direct link to clear_actors() → None" title="Direct link to clear_actors() → None">​</a></h4>
<p>Dispose and clear all actors held by the trader.</p>
<ul>
<li><strong>Raises:</strong>
<strong>ValueError</strong> – If state is <code>RUNNING</code>.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="clear_exec_algorithms--none">clear_exec_algorithms() → None<a href="#clear_exec_algorithms--none" class="hash-link" aria-label="Direct link to clear_exec_algorithms() → None" title="Direct link to clear_exec_algorithms() → None">​</a></h4>
<p>Dispose and clear all execution algorithms held by the trader.</p>
<ul>
<li><strong>Raises:</strong>
<strong>ValueError</strong> – If state is <code>RUNNING</code>.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="clear_strategies--none">clear_strategies() → None<a href="#clear_strategies--none" class="hash-link" aria-label="Direct link to clear_strategies() → None" title="Direct link to clear_strategies() → None">​</a></h4>
<p>Dispose and clear all strategies held by the trader.</p>
<ul>
<li><strong>Raises:</strong>
<strong>ValueError</strong> – If state is <code>RUNNING</code>.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="exec_algorithm_ids--listexecalgorithmid">exec_algorithm_ids() → list[<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.ExecAlgorithmId">ExecAlgorithmId</a>]<a href="#exec_algorithm_ids--listexecalgorithmid" class="hash-link" aria-label="Direct link to exec_algorithm_ids--listexecalgorithmid" title="Direct link to exec_algorithm_ids--listexecalgorithmid">​</a></h4>
<p>Return the execution algorithm IDs loaded in the trader.</p>
<ul>
<li><strong>Return type:</strong>
list[<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.ExecAlgorithmId">ExecAlgorithmId</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="exec_algorithm_states--dictexecalgorithmid-str">exec_algorithm_states() → dict[<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.ExecAlgorithmId">ExecAlgorithmId</a>, str]<a href="#exec_algorithm_states--dictexecalgorithmid-str" class="hash-link" aria-label="Direct link to exec_algorithm_states--dictexecalgorithmid-str" title="Direct link to exec_algorithm_states--dictexecalgorithmid-str">​</a></h4>
<p>Return the traders execution algorithm states.</p>
<ul>
<li><strong>Return type:</strong>
dict[<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.ExecAlgorithmId">ExecAlgorithmId</a>, str]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="exec_algorithms--listany">exec_algorithms() → list[Any]<a href="#exec_algorithms--listany" class="hash-link" aria-label="Direct link to exec_algorithms() → list[Any]" title="Direct link to exec_algorithms() → list[Any]">​</a></h4>
<p>Return the execution algorithms loaded in the trader.</p>
<ul>
<li><strong>Return type:</strong>
list[ExecAlgorithms]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="generate_account_reportvenue-venue--dataframe">generate_account_report(venue: <a href="../model/identifiers/index.htm#posei_trader.model.identifiers.Venue">Venue</a>) → DataFrame<a href="#generate_account_reportvenue-venue--dataframe" class="hash-link" aria-label="Direct link to generate_account_reportvenue-venue--dataframe" title="Direct link to generate_account_reportvenue-venue--dataframe">​</a></h4>
<p>Generate an account report.</p>
<ul>
<li><strong>Return type:</strong>
pd.DataFrame</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="generate_fills_report--dataframe">generate_fills_report() → DataFrame<a href="#generate_fills_report--dataframe" class="hash-link" aria-label="Direct link to generate_fills_report() → DataFrame" title="Direct link to generate_fills_report() → DataFrame">​</a></h4>
<p>Generate a fills report.</p>
<ul>
<li><strong>Return type:</strong>
pd.DataFrame</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="generate_order_fills_report--dataframe">generate_order_fills_report() → DataFrame<a href="#generate_order_fills_report--dataframe" class="hash-link" aria-label="Direct link to generate_order_fills_report() → DataFrame" title="Direct link to generate_order_fills_report() → DataFrame">​</a></h4>
<p>Generate an order fills report.</p>
<ul>
<li><strong>Return type:</strong>
pd.DataFrame</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="generate_orders_report--dataframe">generate_orders_report() → DataFrame<a href="#generate_orders_report--dataframe" class="hash-link" aria-label="Direct link to generate_orders_report() → DataFrame" title="Direct link to generate_orders_report() → DataFrame">​</a></h4>
<p>Generate an orders report.</p>
<ul>
<li><strong>Return type:</strong>
pd.DataFrame</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="generate_positions_report--dataframe">generate_positions_report() → DataFrame<a href="#generate_positions_report--dataframe" class="hash-link" aria-label="Direct link to generate_positions_report() → DataFrame" title="Direct link to generate_positions_report() → DataFrame">​</a></h4>
<p>Generate a positions report.</p>
<ul>
<li><strong>Return type:</strong>
pd.DataFrame</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="property-instance_id--uuid4"><em>property</em> instance_id <em>: <a href="../core/index.htm#posei_trader.core.uuid.UUID4">UUID4</a></em><a href="#property-instance_id--uuid4" class="hash-link" aria-label="Direct link to property-instance_id--uuid4" title="Direct link to property-instance_id--uuid4">​</a></h4>
<p>Return the traders instance ID.</p>
<ul>
<li><strong>Return type:</strong>
<a href="../core/index.htm#posei_trader.core.UUID4">UUID4</a></li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="load--none">load() → None<a href="#load--none" class="hash-link" aria-label="Direct link to load() → None" title="Direct link to load() → None">​</a></h4>
<p>Load all actor and strategy states from the cache.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="remove_actoractor_id-componentid--none">remove_actor(actor_id: <a href="../model/identifiers/index.htm#posei_trader.model.identifiers.ComponentId">ComponentId</a>) → None<a href="#remove_actoractor_id-componentid--none" class="hash-link" aria-label="Direct link to remove_actoractor_id-componentid--none" title="Direct link to remove_actoractor_id-componentid--none">​</a></h4>
<p>Remove the actor with the given actor_id.</p>
<p>Will stop the actor first if state is <code>RUNNING</code>.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>actor_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.ComponentId"><em>ComponentId</em></a>) – The actor ID to remove.</li>
<li><strong>Raises:</strong>
<strong>ValueError</strong> – If an actor with the given actor_id is not found.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="remove_strategystrategy_id-strategyid--none">remove_strategy(strategy_id: <a href="../model/identifiers/index.htm#posei_trader.model.identifiers.StrategyId">StrategyId</a>) → None<a href="#remove_strategystrategy_id-strategyid--none" class="hash-link" aria-label="Direct link to remove_strategystrategy_id-strategyid--none" title="Direct link to remove_strategystrategy_id-strategyid--none">​</a></h4>
<p>Remove the strategy with the given strategy_id.</p>
<p>Will stop the strategy first if state is <code>RUNNING</code>.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>strategy_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.StrategyId"><em>StrategyId</em></a>) – The strategy ID to remove.</li>
<li><strong>Raises:</strong>
<strong>ValueError</strong> – If a strategy with the given strategy_id is not found.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="save--none">save() → None<a href="#save--none" class="hash-link" aria-label="Direct link to save() → None" title="Direct link to save() → None">​</a></h4>
<p>Save all actor and strategy states to the cache.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="start_actoractor_id-componentid--none">start_actor(actor_id: <a href="../model/identifiers/index.htm#posei_trader.model.identifiers.ComponentId">ComponentId</a>) → None<a href="#start_actoractor_id-componentid--none" class="hash-link" aria-label="Direct link to start_actoractor_id-componentid--none" title="Direct link to start_actoractor_id-componentid--none">​</a></h4>
<p>Start the actor with the given actor_id.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>actor_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.ComponentId"><em>ComponentId</em></a>) – The component ID to start.</li>
<li><strong>Raises:</strong>
<strong>ValueError</strong> – If an actor with the given actor_id is not found.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="start_strategystrategy_id-strategyid--none">start_strategy(strategy_id: <a href="../model/identifiers/index.htm#posei_trader.model.identifiers.StrategyId">StrategyId</a>) → None<a href="#start_strategystrategy_id-strategyid--none" class="hash-link" aria-label="Direct link to start_strategystrategy_id-strategyid--none" title="Direct link to start_strategystrategy_id-strategyid--none">​</a></h4>
<p>Start the strategy with the given strategy_id.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>strategy_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.StrategyId"><em>StrategyId</em></a>) – The strategy ID to start.</li>
<li><strong>Raises:</strong>
<strong>ValueError</strong> – If a strategy with the given strategy_id is not found.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="stop_actoractor_id-componentid--none">stop_actor(actor_id: <a href="../model/identifiers/index.htm#posei_trader.model.identifiers.ComponentId">ComponentId</a>) → None<a href="#stop_actoractor_id-componentid--none" class="hash-link" aria-label="Direct link to stop_actoractor_id-componentid--none" title="Direct link to stop_actoractor_id-componentid--none">​</a></h4>
<p>Stop the actor with the given actor_id.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>actor_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.ComponentId"><em>ComponentId</em></a>) – The actor ID to stop.</li>
<li><strong>Raises:</strong>
<strong>ValueError</strong> – If an actor with the given actor_id is not found.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="stop_strategystrategy_id-strategyid--none">stop_strategy(strategy_id: <a href="../model/identifiers/index.htm#posei_trader.model.identifiers.StrategyId">StrategyId</a>) → None<a href="#stop_strategystrategy_id-strategyid--none" class="hash-link" aria-label="Direct link to stop_strategystrategy_id-strategyid--none" title="Direct link to stop_strategystrategy_id-strategyid--none">​</a></h4>
<p>Stop the strategy with the given strategy_id.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>strategy_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.StrategyId"><em>StrategyId</em></a>) – The strategy ID to stop.</li>
<li><strong>Raises:</strong>
<strong>ValueError</strong> – If a strategy with the given strategy_id is not found.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="strategies--liststrategy">strategies() → list[<a href="#posei_trader.trading.strategy.Strategy">Strategy</a>]<a href="#strategies--liststrategy" class="hash-link" aria-label="Direct link to strategies--liststrategy" title="Direct link to strategies--liststrategy">​</a></h4>
<p>Return the strategies loaded in the trader.</p>
<ul>
<li><strong>Return type:</strong>
list[<a href="#posei_trader.trading.Strategy">Strategy</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="strategy_ids--liststrategyid">strategy_ids() → list[<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.StrategyId">StrategyId</a>]<a href="#strategy_ids--liststrategyid" class="hash-link" aria-label="Direct link to strategy_ids--liststrategyid" title="Direct link to strategy_ids--liststrategyid">​</a></h4>
<p>Return the strategy IDs loaded in the trader.</p>
<ul>
<li><strong>Return type:</strong>
list[<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.StrategyId">StrategyId</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="strategy_states--dictstrategyid-str">strategy_states() → dict[<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.StrategyId">StrategyId</a>, str]<a href="#strategy_states--dictstrategyid-str" class="hash-link" aria-label="Direct link to strategy_states--dictstrategyid-str" title="Direct link to strategy_states--dictstrategyid-str">​</a></h4>
<p>Return the traders strategy states.</p>
<ul>
<li><strong>Return type:</strong>
dict[<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.StrategyId">StrategyId</a>, str]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribetopic-str-handler-callableany-none--none">subscribe(topic: str, handler: Callable[[Any], None]) → None<a href="#subscribetopic-str-handler-callableany-none--none" class="hash-link" aria-label="Direct link to subscribe(topic: str, handler: Callable[[Any], None]) → None" title="Direct link to subscribe(topic: str, handler: Callable[[Any], None]) → None">​</a></h4>
<p>Subscribe to the given message topic with the given callback handler.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>topic</strong> (<em>str</em>) – The topic for the subscription. May include wildcard glob patterns.</li>
<li><strong>handler</strong> (<em>Callable</em> <em>[</em> *[*<em>Any</em> <em>]</em> <em>,</em> <em>None</em> <em>]</em>) – The handler for the subscription.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribetopic-str-handler-callableany-none--none">unsubscribe(topic: str, handler: Callable[[Any], None]) → None<a href="#unsubscribetopic-str-handler-callableany-none--none" class="hash-link" aria-label="Direct link to unsubscribe(topic: str, handler: Callable[[Any], None]) → None" title="Direct link to unsubscribe(topic: str, handler: Callable[[Any], None]) → None">​</a></h4>
<p>Unsubscribe the given handler from the given message topic.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>topic</strong> (<em>str</em> <em>,</em> <em>optional</em>) – The topic to unsubscribe from. May include wildcard glob patterns.</li>
<li><strong>handler</strong> (<em>Callable</em> <em>[</em> *[*<em>Any</em> <em>]</em> <em>,</em> <em>None</em> <em>]</em>) – The handler for the subscription.</li>
</ul>
</li>
</ul>
<p><a id="module-posei_trader.trading.controller"></a></p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="class-controller-1"><em>class</em> Controller<a href="#class-controller-1" class="hash-link" aria-label="Direct link to class-controller-1" title="Direct link to class-controller-1">​</a></h3>
<p>Bases: <a href="../common/index.htm#posei_trader.common.actor.Actor"><code>Actor</code></a></p>
<p>The base class for all trader controllers.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>trader</strong> (<a href="#posei_trader.trading.Trader"><em>Trader</em></a>) – The reference to the trader instance to control.</li>
<li><strong>config</strong> (<a href="../config/index.htm#posei_trader.common.config.ActorConfig"><em>ActorConfig</em></a> <em>,</em> <em>optional</em>) – The configuration for the controller</li>
</ul>
</li>
<li><strong>Raises:</strong>
<strong>TypeError</strong> – If config is not of type ActorConfig.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="register_baseself-portfoliofacade-portfolio-messagebus-msgbus-cachefacade-cache-clock-clock--void-1">register_base(self, PortfolioFacade portfolio, MessageBus msgbus, CacheFacade cache, Clock clock) → void<a href="#register_baseself-portfoliofacade-portfolio-messagebus-msgbus-cachefacade-cache-clock-clock--void-1" class="hash-link" aria-label="Direct link to register_base(self, PortfolioFacade portfolio, MessageBus msgbus, CacheFacade cache, Clock clock) → void" title="Direct link to register_base(self, PortfolioFacade portfolio, MessageBus msgbus, CacheFacade cache, Clock clock) → void">​</a></h4>
<p>Register with a trader.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>portfolio</strong> (<a href="../portfolio/index.htm#posei_trader.portfolio.PortfolioFacade"><em>PortfolioFacade</em></a>) – The read-only portfolio for the actor.</li>
<li><strong>msgbus</strong> (<a href="../common/index.htm#posei_trader.common.component.MessageBus"><em>MessageBus</em></a>) – The message bus for the actor.</li>
<li><strong>cache</strong> (<a href="../cache/index.htm#posei_trader.cache.base.CacheFacade"><em>CacheFacade</em></a>) – The read-only cache for the actor.</li>
<li><strong>clock</strong> (<a href="../common/index.htm#posei_trader.common.component.Clock"><em>Clock</em></a>) – The clock for the actor.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-28">WARNING<a href="#warning-28" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="executecommand-command--none-1">execute(command: <a href="../core/index.htm#posei_trader.core.message.Command">Command</a>) → None<a href="#executecommand-command--none-1" class="hash-link" aria-label="Direct link to executecommand-command--none-1" title="Direct link to executecommand-command--none-1">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="create_actoractor-actor-start-bool--true--none-1">create_actor(actor: <a href="../common/index.htm#posei_trader.common.actor.Actor">Actor</a>, start: bool = True) → None<a href="#create_actoractor-actor-start-bool--true--none-1" class="hash-link" aria-label="Direct link to create_actoractor-actor-start-bool--true--none-1" title="Direct link to create_actoractor-actor-start-bool--true--none-1">​</a></h4>
<p>Add the given actor to the controlled trader.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>actor</strong> (<a href="../common/index.htm#posei_trader.common.actor.Actor"><em>Actor</em></a>) – The actor to add.</li>
<li><strong>start</strong> (<em>bool</em> <em>,</em> <em>default True</em>) – If the actor should be started immediately.</li>
</ul>
</li>
<li><strong>Raises:</strong>
<ul>
<li><strong>ValueError</strong> – If actor.state is <code>RUNNING</code> or <code>DISPOSED</code>.</li>
<li><strong>RuntimeError</strong> – If actor is already registered with the trader.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="create_strategystrategy-strategy-start-bool--true--none-1">create_strategy(strategy: <a href="#posei_trader.trading.strategy.Strategy">Strategy</a>, start: bool = True) → None<a href="#create_strategystrategy-strategy-start-bool--true--none-1" class="hash-link" aria-label="Direct link to create_strategystrategy-strategy-start-bool--true--none-1" title="Direct link to create_strategystrategy-strategy-start-bool--true--none-1">​</a></h4>
<p>Add the given strategy to the controlled trader.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>strategy</strong> (<a href="#posei_trader.trading.Strategy"><em>Strategy</em></a>) – The strategy to add.</li>
<li><strong>start</strong> (<em>bool</em> <em>,</em> <em>default True</em>) – If the strategy should be started immediately.</li>
</ul>
</li>
<li><strong>Raises:</strong>
<ul>
<li><strong>ValueError</strong> – If strategy.state is <code>RUNNING</code> or <code>DISPOSED</code>.</li>
<li><strong>RuntimeError</strong> – If strategy is already registered with the trader.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="start_actoractor-actor--none-1">start_actor(actor: <a href="../common/index.htm#posei_trader.common.actor.Actor">Actor</a>) → None<a href="#start_actoractor-actor--none-1" class="hash-link" aria-label="Direct link to start_actoractor-actor--none-1" title="Direct link to start_actoractor-actor--none-1">​</a></h4>
<p>Start the given actor.</p>
<p>Will log a warning if the actor is already <code>RUNNING</code>.</p>
<ul>
<li><strong>Raises:</strong>
<strong>ValueError</strong> – If actor is not already registered with the trader.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="start_strategystrategy-strategy--none-1">start_strategy(strategy: <a href="#posei_trader.trading.strategy.Strategy">Strategy</a>) → None<a href="#start_strategystrategy-strategy--none-1" class="hash-link" aria-label="Direct link to start_strategystrategy-strategy--none-1" title="Direct link to start_strategystrategy-strategy--none-1">​</a></h4>
<p>Start the given strategy.</p>
<p>Will log a warning if the strategy is already <code>RUNNING</code>.</p>
<ul>
<li><strong>Raises:</strong>
<strong>ValueError</strong> – If strategy is not already registered with the trader.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="stop_actoractor-actor--none-1">stop_actor(actor: <a href="../common/index.htm#posei_trader.common.actor.Actor">Actor</a>) → None<a href="#stop_actoractor-actor--none-1" class="hash-link" aria-label="Direct link to stop_actoractor-actor--none-1" title="Direct link to stop_actoractor-actor--none-1">​</a></h4>
<p>Stop the given actor.</p>
<p>Will log a warning if the actor is not <code>RUNNING</code>.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>actor</strong> (<a href="../common/index.htm#posei_trader.common.actor.Actor"><em>Actor</em></a>) – The actor to stop.</li>
<li><strong>Raises:</strong>
<strong>ValueError</strong> – If actor is not already registered with the trader.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="stop_strategystrategy-strategy--none-1">stop_strategy(strategy: <a href="#posei_trader.trading.strategy.Strategy">Strategy</a>) → None<a href="#stop_strategystrategy-strategy--none-1" class="hash-link" aria-label="Direct link to stop_strategystrategy-strategy--none-1" title="Direct link to stop_strategystrategy-strategy--none-1">​</a></h4>
<p>Stop the given strategy.</p>
<p>Will log a warning if the strategy is not <code>RUNNING</code>.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>strategy</strong> (<a href="#posei_trader.trading.Strategy"><em>Strategy</em></a>) – The strategy to stop.</li>
<li><strong>Raises:</strong>
<strong>ValueError</strong> – If strategy is not already registered with the trader.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="remove_actoractor-actor--none-1">remove_actor(actor: <a href="../common/index.htm#posei_trader.common.actor.Actor">Actor</a>) → None<a href="#remove_actoractor-actor--none-1" class="hash-link" aria-label="Direct link to remove_actoractor-actor--none-1" title="Direct link to remove_actoractor-actor--none-1">​</a></h4>
<p>Remove the given actor.</p>
<p>Will stop the actor first if state is <code>RUNNING</code>.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>actor</strong> (<a href="../common/index.htm#posei_trader.common.actor.Actor"><em>Actor</em></a>) – The actor to remove.</li>
<li><strong>Raises:</strong>
<strong>ValueError</strong> – If actor is not already registered with the trader.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="remove_strategystrategy-strategy--none-1">remove_strategy(strategy: <a href="#posei_trader.trading.strategy.Strategy">Strategy</a>) → None<a href="#remove_strategystrategy-strategy--none-1" class="hash-link" aria-label="Direct link to remove_strategystrategy-strategy--none-1" title="Direct link to remove_strategystrategy-strategy--none-1">​</a></h4>
<p>Remove the given strategy.</p>
<p>Will stop the strategy first if state is <code>RUNNING</code>.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>strategy</strong> (<a href="#posei_trader.trading.Strategy"><em>Strategy</em></a>) – The strategy to remove.</li>
<li><strong>Raises:</strong>
<strong>ValueError</strong> – If strategy is not already registered with the trader.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="create_actor_from_configactor_config-importableactorconfig-start-bool--true--none-1">create_actor_from_config(actor_config: <a href="../config/index.htm#posei_trader.common.config.ImportableActorConfig">ImportableActorConfig</a>, start: bool = True) → None<a href="#create_actor_from_configactor_config-importableactorconfig-start-bool--true--none-1" class="hash-link" aria-label="Direct link to create_actor_from_configactor_config-importableactorconfig-start-bool--true--none-1" title="Direct link to create_actor_from_configactor_config-importableactorconfig-start-bool--true--none-1">​</a></h4>
<p>Create the actor corresponding to actor_config.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>actor_config</strong> (<a href="../config/index.htm#posei_trader.common.config.ImportableActorConfig"><em>ImportableActorConfig</em></a>) – The actor config of the actor to add.</li>
<li><strong>start</strong> (<em>bool</em> <em>,</em> <em>default True</em>) – If the actor should be started immediately.</li>
</ul>
</li>
<li><strong>Raises:</strong>
<ul>
<li><strong>ValueError</strong> – If actor.state is <code>RUNNING</code> or <code>DISPOSED</code>.</li>
<li><strong>RuntimeError</strong> – If actor is already registered with the trader.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="create_strategy_from_configstrategy_config-importablestrategyconfig-start-bool--true--none-1">create_strategy_from_config(strategy_config: <a href="../config/index.htm#posei_trader.trading.config.ImportableStrategyConfig">ImportableStrategyConfig</a>, start: bool = True) → None<a href="#create_strategy_from_configstrategy_config-importablestrategyconfig-start-bool--true--none-1" class="hash-link" aria-label="Direct link to create_strategy_from_configstrategy_config-importablestrategyconfig-start-bool--true--none-1" title="Direct link to create_strategy_from_configstrategy_config-importablestrategyconfig-start-bool--true--none-1">​</a></h4>
<p>Create the strategy corresponding to strategy_config.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>strategy_config</strong> (<a href="../config/index.htm#posei_trader.trading.config.ImportableStrategyConfig"><em>ImportableStrategyConfig</em></a>) – The strategy config of the strategy to add.</li>
<li><strong>start</strong> (<em>bool</em> <em>,</em> <em>default True</em>) – If the strategy should be started immediately.</li>
</ul>
</li>
<li><strong>Raises:</strong>
<ul>
<li><strong>ValueError</strong> – If strategy.state is <code>RUNNING</code> or <code>DISPOSED</code>.</li>
<li><strong>RuntimeError</strong> – If strategy is already registered with the trader.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="start_actor_from_idactor_id-componentid--none-1">start_actor_from_id(actor_id: <a href="../model/identifiers/index.htm#posei_trader.model.identifiers.ComponentId">ComponentId</a>) → None<a href="#start_actor_from_idactor_id-componentid--none-1" class="hash-link" aria-label="Direct link to start_actor_from_idactor_id-componentid--none-1" title="Direct link to start_actor_from_idactor_id-componentid--none-1">​</a></h4>
<p>Start the actor corresponding to actor_id.</p>
<p>Will log a warning if the actor is already <code>RUNNING</code>.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>actor_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.ComponentId"><em>ComponentId</em></a>) – The ID of the actor to start.</li>
<li><strong>Raises:</strong>
<strong>ValueError</strong> – If actor is not already registered with the trader.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="start_strategy_from_idstrategy_id-strategyid--none-1">start_strategy_from_id(strategy_id: <a href="../model/identifiers/index.htm#posei_trader.model.identifiers.StrategyId">StrategyId</a>) → None<a href="#start_strategy_from_idstrategy_id-strategyid--none-1" class="hash-link" aria-label="Direct link to start_strategy_from_idstrategy_id-strategyid--none-1" title="Direct link to start_strategy_from_idstrategy_id-strategyid--none-1">​</a></h4>
<p>Start the strategy corresponding to strategy_id.</p>
<p>Will log a warning if the strategy is already <code>RUNNING</code>.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>strategy_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.StrategyId"><em>StrategyId</em></a>) – The ID of the strategy to start.</li>
<li><strong>Raises:</strong>
<strong>ValueError</strong> – If strategy is not already registered with the trader.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="stop_actor_from_idactor_id-componentid--none-1">stop_actor_from_id(actor_id: <a href="../model/identifiers/index.htm#posei_trader.model.identifiers.ComponentId">ComponentId</a>) → None<a href="#stop_actor_from_idactor_id-componentid--none-1" class="hash-link" aria-label="Direct link to stop_actor_from_idactor_id-componentid--none-1" title="Direct link to stop_actor_from_idactor_id-componentid--none-1">​</a></h4>
<p>Stop the actor corresponding to actor_id.</p>
<p>Will log a warning if the actor is not <code>RUNNING</code>.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>actor_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.ComponentId"><em>ComponentId</em></a>) – The ID of the actor to stop.</li>
<li><strong>Raises:</strong>
<strong>ValueError</strong> – If actor is not already registered with the trader.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="stop_strategy_from_idstrategy_id-strategyid--none-1">stop_strategy_from_id(strategy_id: <a href="../model/identifiers/index.htm#posei_trader.model.identifiers.StrategyId">StrategyId</a>) → None<a href="#stop_strategy_from_idstrategy_id-strategyid--none-1" class="hash-link" aria-label="Direct link to stop_strategy_from_idstrategy_id-strategyid--none-1" title="Direct link to stop_strategy_from_idstrategy_id-strategyid--none-1">​</a></h4>
<p>Stop the strategy corresponding to strategy_id.</p>
<p>Will log a warning if the strategy is not <code>RUNNING</code>.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>strategy_id</strong> (<a href="../model/identifiers/index.htm#posei_trader.model.identifiers.StrategyId"><em>StrategyId</em></a>) – The ID of the strategy to stop.</li>
<li><strong>Raises:</strong>
<strong>ValueError</strong> – If strategy is not already registered with the trader.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="remove_actor_from_idactor_id-componentid--none-1">remove_actor_from_id(actor_id: <a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ComponentId">ComponentId</a>) → None<a href="#remove_actor_from_idactor_id-componentid--none-1" class="hash-link" aria-label="Direct link to remove_actor_from_idactor_id-componentid--none-1" title="Direct link to remove_actor_from_idactor_id-componentid--none-1">​</a></h4>
<p>Remove the actor corresponding to actor_id.</p>
<p>Will stop the actor first if state is <code>RUNNING</code>.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>actor_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ComponentId"><em>ComponentId</em></a>) – The ID of the actor to remove.</li>
<li><strong>Raises:</strong>
<strong>ValueError</strong> – If actor is not already registered with the trader.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="remove_strategy_from_idstrategy_id-strategyid--none-1">remove_strategy_from_id(strategy_id: <a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.StrategyId">StrategyId</a>) → None<a href="#remove_strategy_from_idstrategy_id-strategyid--none-1" class="hash-link" aria-label="Direct link to remove_strategy_from_idstrategy_id-strategyid--none-1" title="Direct link to remove_strategy_from_idstrategy_id-strategyid--none-1">​</a></h4>
<p>Remove the strategy corresponding to strategy_id.</p>
<p>Will stop the strategy first if state is <code>RUNNING</code>.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>strategy_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.StrategyId"><em>StrategyId</em></a>) – The ID of the strategy to remove.</li>
<li><strong>Raises:</strong>
<strong>ValueError</strong> – If strategy is not already registered with the trader.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="active_task_idsself--list">active_task_ids(self) → list<a href="#active_task_idsself--list" class="hash-link" aria-label="Direct link to active_task_ids(self) → list" title="Direct link to active_task_ids(self) → list">​</a></h4>
<p>Return the active task identifiers.</p>
<ul>
<li><strong>Return type:</strong>
list[<a href="../common/index.htm#nautilus_trader.common.executor.TaskId">TaskId</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="add_syntheticself-syntheticinstrument-synthetic--void">add_synthetic(self, SyntheticInstrument synthetic) → void<a href="#add_syntheticself-syntheticinstrument-synthetic--void" class="hash-link" aria-label="Direct link to add_synthetic(self, SyntheticInstrument synthetic) → void" title="Direct link to add_synthetic(self, SyntheticInstrument synthetic) → void">​</a></h4>
<p>Add the created synthetic instrument to the cache.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>synthetic</strong> (<a href="../model/instruments/index.htm#nautilus_trader.model.instruments.SyntheticInstrument"><em>SyntheticInstrument</em></a>) – The synthetic instrument to add to the cache.</li>
<li><strong>Raises:</strong>
<strong>KeyError</strong> – If synthetic is already in the cache.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="cache">cache<a href="#cache" class="hash-link" aria-label="Direct link to cache" title="Direct link to cache">​</a></h4>
<p>The read-only cache for the actor.</p>
<ul>
<li><strong>Returns:</strong>
CacheFacade</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="cancel_all_tasksself--void">cancel_all_tasks(self) → void<a href="#cancel_all_tasksself--void" class="hash-link" aria-label="Direct link to cancel_all_tasks(self) → void" title="Direct link to cancel_all_tasks(self) → void">​</a></h4>
<p>Cancel all queued and active tasks.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="cancel_taskself-task_id-taskid--void">cancel_task(self, task_id: <a href="../common/index.htm#nautilus_trader.common.executor.TaskId">TaskId</a>) → void<a href="#cancel_taskself-task_id-taskid--void" class="hash-link" aria-label="Direct link to cancel_taskself-task_id-taskid--void" title="Direct link to cancel_taskself-task_id-taskid--void">​</a></h4>
<p>Cancel the task with the given task_id (if queued or active).</p>
<p>If the task is not found then a warning is logged.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>task_id</strong> (<a href="../common/index.htm#nautilus_trader.common.executor.TaskId"><em>TaskId</em></a>) – The task identifier.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="clock">clock<a href="#clock" class="hash-link" aria-label="Direct link to clock" title="Direct link to clock">​</a></h4>
<p>The actors clock.</p>
<ul>
<li><strong>Returns:</strong>
Clock</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="config">config<a href="#config" class="hash-link" aria-label="Direct link to config" title="Direct link to config">​</a></h4>
<p>The actors configuration.</p>
<ul>
<li><strong>Returns:</strong>
NautilusConfig</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="degradeself--void">degrade(self) → void<a href="#degradeself--void" class="hash-link" aria-label="Direct link to degrade(self) → void" title="Direct link to degrade(self) → void">​</a></h4>
<p>Degrade the component.</p>
<p>While executing on_degrade() any exception will be logged and reraised, then the component
will remain in a <code>DEGRADING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-29">WARNING<a href="#warning-29" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="deregister_warning_eventself-type-event--void">deregister_warning_event(self, type event) → void<a href="#deregister_warning_eventself-type-event--void" class="hash-link" aria-label="Direct link to deregister_warning_event(self, type event) → void" title="Direct link to deregister_warning_event(self, type event) → void">​</a></h4>
<p>Deregister the given event type from warning log levels.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>event</strong> (<em>type</em>) – The event class to deregister.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="disposeself--void">dispose(self) → void<a href="#disposeself--void" class="hash-link" aria-label="Direct link to dispose(self) → void" title="Direct link to dispose(self) → void">​</a></h4>
<p>Dispose of the component.</p>
<p>While executing on_dispose() any exception will be logged and reraised, then the component
will remain in a <code>DISPOSING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-30">WARNING<a href="#warning-30" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="faultself--void">fault(self) → void<a href="#faultself--void" class="hash-link" aria-label="Direct link to fault(self) → void" title="Direct link to fault(self) → void">​</a></h4>
<p>Fault the component.</p>
<p>Calling this method multiple times has the same effect as calling it once (it is idempotent).
Once called, it cannot be reversed, and no other methods should be called on this instance.</p>
<p>While executing on_fault() any exception will be logged and reraised, then the component
will remain in a <code>FAULTING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-31">WARNING<a href="#warning-31" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="classmethod-fully_qualified_namecls--str"><em>classmethod</em> fully_qualified_name(cls) → str<a href="#classmethod-fully_qualified_namecls--str" class="hash-link" aria-label="Direct link to classmethod-fully_qualified_namecls--str" title="Direct link to classmethod-fully_qualified_namecls--str">​</a></h4>
<p>Return the fully qualified name for the components class.</p>
<ul>
<li><strong>Return type:</strong>
str</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="greeks">greeks<a href="#greeks" class="hash-link" aria-label="Direct link to greeks" title="Direct link to greeks">​</a></h4>
<p>The read-only greeks calculator for the actor.</p>
<ul>
<li><strong>Returns:</strong>
GreeksCalculator</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_barself-bar-bar--void">handle_bar(self, Bar bar) → void<a href="#handle_barself-bar-bar--void" class="hash-link" aria-label="Direct link to handle_bar(self, Bar bar) → void" title="Direct link to handle_bar(self, Bar bar) → void">​</a></h4>
<p>Handle the given bar data.</p>
<p>If state is <code>RUNNING</code> then passes to on_bar.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>bar</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.Bar"><em>Bar</em></a>) – The bar received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-32">WARNING<a href="#warning-32" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_barsself-list-bars--void">handle_bars(self, list bars) → void<a href="#handle_barsself-list-bars--void" class="hash-link" aria-label="Direct link to handle_bars(self, list bars) → void" title="Direct link to handle_bars(self, list bars) → void">​</a></h4>
<p>Handle the given historical bar data by handling each bar individually.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>bars</strong> (<em>list</em> <em>[</em><a href="../model/data/index.htm#nautilus_trader.model.data.Bar"><em>Bar</em></a> <em>]</em>) – The bars to handle.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-33">WARNING<a href="#warning-33" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<ul>
<li><strong>Raises:</strong>
<strong>RuntimeError</strong> – If bar data has incorrectly sorted timestamps (not monotonically increasing).</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_dataself-data-data--void">handle_data(self, Data data) → void<a href="#handle_dataself-data-data--void" class="hash-link" aria-label="Direct link to handle_data(self, Data data) → void" title="Direct link to handle_data(self, Data data) → void">​</a></h4>
<p>Handle the given data.</p>
<p>If state is <code>RUNNING</code> then passes to on_data.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>data</strong> (<a href="../core/index.htm#nautilus_trader.core.Data"><em>Data</em></a>) – The data received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-34">WARNING<a href="#warning-34" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_eventself-event-event--void-1">handle_event(self, Event event) → void<a href="#handle_eventself-event-event--void-1" class="hash-link" aria-label="Direct link to handle_event(self, Event event) → void" title="Direct link to handle_event(self, Event event) → void">​</a></h4>
<p>Handle the given event.</p>
<p>If state is <code>RUNNING</code> then passes to on_event.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>event</strong> (<a href="../core/index.htm#nautilus_trader.core.Event"><em>Event</em></a>) – The event received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-35">WARNING<a href="#warning-35" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_historical_dataself-data--void">handle_historical_data(self, data) → void<a href="#handle_historical_dataself-data--void" class="hash-link" aria-label="Direct link to handle_historical_data(self, data) → void" title="Direct link to handle_historical_data(self, data) → void">​</a></h4>
<p>Handle the given historical data.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>data</strong> (<a href="../core/index.htm#nautilus_trader.core.Data"><em>Data</em></a>) – The historical data received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-36">WARNING<a href="#warning-36" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_index_priceself-indexpriceupdate-index_price--void">handle_index_price(self, IndexPriceUpdate index_price) → void<a href="#handle_index_priceself-indexpriceupdate-index_price--void" class="hash-link" aria-label="Direct link to handle_index_price(self, IndexPriceUpdate index_price) → void" title="Direct link to handle_index_price(self, IndexPriceUpdate index_price) → void">​</a></h4>
<p>Handle the given index price update.</p>
<p>If state is <code>RUNNING</code> then passes to on_index_price.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>index_price</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.IndexPriceUpdate"><em>IndexPriceUpdate</em></a>) – The index price update received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-37">WARNING<a href="#warning-37" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_instrumentself-instrument-instrument--void">handle_instrument(self, Instrument instrument) → void<a href="#handle_instrumentself-instrument-instrument--void" class="hash-link" aria-label="Direct link to handle_instrument(self, Instrument instrument) → void" title="Direct link to handle_instrument(self, Instrument instrument) → void">​</a></h4>
<p>Handle the given instrument.</p>
<p>Passes to on_instrument if state is <code>RUNNING</code>.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>instrument</strong> (<a href="../model/instruments/index.htm#nautilus_trader.model.instruments.Instrument"><em>Instrument</em></a>) – The instrument received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-38">WARNING<a href="#warning-38" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_instrument_closeself-instrumentclose-update--void">handle_instrument_close(self, InstrumentClose update) → void<a href="#handle_instrument_closeself-instrumentclose-update--void" class="hash-link" aria-label="Direct link to handle_instrument_close(self, InstrumentClose update) → void" title="Direct link to handle_instrument_close(self, InstrumentClose update) → void">​</a></h4>
<p>Handle the given instrument close update.</p>
<p>If state is <code>RUNNING</code> then passes to on_instrument_close.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>update</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.InstrumentClose"><em>InstrumentClose</em></a>) – The update received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-39">WARNING<a href="#warning-39" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_instrument_statusself-instrumentstatus-data--void">handle_instrument_status(self, InstrumentStatus data) → void<a href="#handle_instrument_statusself-instrumentstatus-data--void" class="hash-link" aria-label="Direct link to handle_instrument_status(self, InstrumentStatus data) → void" title="Direct link to handle_instrument_status(self, InstrumentStatus data) → void">​</a></h4>
<p>Handle the given instrument status update.</p>
<p>If state is <code>RUNNING</code> then passes to on_instrument_status.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>data</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.InstrumentStatus"><em>InstrumentStatus</em></a>) – The status update received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-40">WARNING<a href="#warning-40" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_instrumentsself-list-instruments--void">handle_instruments(self, list instruments) → void<a href="#handle_instrumentsself-list-instruments--void" class="hash-link" aria-label="Direct link to handle_instruments(self, list instruments) → void" title="Direct link to handle_instruments(self, list instruments) → void">​</a></h4>
<p>Handle the given instruments data by handling each instrument individually.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>instruments</strong> (<em>list</em> <em>[</em><a href="../model/instruments/index.htm#nautilus_trader.model.instruments.Instrument"><em>Instrument</em></a> <em>]</em>) – The instruments received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-41">WARNING<a href="#warning-41" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_mark_priceself-markpriceupdate-mark_price--void">handle_mark_price(self, MarkPriceUpdate mark_price) → void<a href="#handle_mark_priceself-markpriceupdate-mark_price--void" class="hash-link" aria-label="Direct link to handle_mark_price(self, MarkPriceUpdate mark_price) → void" title="Direct link to handle_mark_price(self, MarkPriceUpdate mark_price) → void">​</a></h4>
<p>Handle the given mark price update.</p>
<p>If state is <code>RUNNING</code> then passes to on_mark_price.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>mark_price</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.MarkPriceUpdate"><em>MarkPriceUpdate</em></a>) – The mark price update received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-42">WARNING<a href="#warning-42" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_order_bookself-orderbook-order_book--void">handle_order_book(self, OrderBook order_book) → void<a href="#handle_order_bookself-orderbook-order_book--void" class="hash-link" aria-label="Direct link to handle_order_book(self, OrderBook order_book) → void" title="Direct link to handle_order_book(self, OrderBook order_book) → void">​</a></h4>
<p>Handle the given order book.</p>
<p>Passes to on_order_book if state is <code>RUNNING</code>.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>order_book</strong> (<a href="../model/book/index.htm#nautilus_trader.model.book.OrderBook"><em>OrderBook</em></a>) – The order book received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-43">WARNING<a href="#warning-43" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_order_book_deltasself-deltas--void">handle_order_book_deltas(self, deltas) → void<a href="#handle_order_book_deltasself-deltas--void" class="hash-link" aria-label="Direct link to handle_order_book_deltas(self, deltas) → void" title="Direct link to handle_order_book_deltas(self, deltas) → void">​</a></h4>
<p>Handle the given order book deltas.</p>
<p>Passes to on_order_book_deltas if state is <code>RUNNING</code>.
The deltas will be nautilus_pyo3.OrderBookDeltas if the
pyo3_conversion flag was set for the subscription.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>deltas</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.OrderBookDeltas"><em>OrderBookDeltas</em></a> <em>or</em> <em>nautilus_pyo3.OrderBookDeltas</em>) – The order book deltas received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-44">WARNING<a href="#warning-44" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_order_book_depthself-orderbookdepth10-depth--void">handle_order_book_depth(self, OrderBookDepth10 depth) → void<a href="#handle_order_book_depthself-orderbookdepth10-depth--void" class="hash-link" aria-label="Direct link to handle_order_book_depth(self, OrderBookDepth10 depth) → void" title="Direct link to handle_order_book_depth(self, OrderBookDepth10 depth) → void">​</a></h4>
<p>Handle the given order book depth</p>
<p>Passes to on_order_book_depth if state is <code>RUNNING</code>.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>depth</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.OrderBookDepth10"><em>OrderBookDepth10</em></a>) – The order book depth received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-45">WARNING<a href="#warning-45" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_quote_tickself-quotetick-tick--void">handle_quote_tick(self, QuoteTick tick) → void<a href="#handle_quote_tickself-quotetick-tick--void" class="hash-link" aria-label="Direct link to handle_quote_tick(self, QuoteTick tick) → void" title="Direct link to handle_quote_tick(self, QuoteTick tick) → void">​</a></h4>
<p>Handle the given quote tick.</p>
<p>If state is <code>RUNNING</code> then passes to on_quote_tick.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>tick</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.QuoteTick"><em>QuoteTick</em></a>) – The tick received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-46">WARNING<a href="#warning-46" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_quote_ticksself-list-ticks--void">handle_quote_ticks(self, list ticks) → void<a href="#handle_quote_ticksself-list-ticks--void" class="hash-link" aria-label="Direct link to handle_quote_ticks(self, list ticks) → void" title="Direct link to handle_quote_ticks(self, list ticks) → void">​</a></h4>
<p>Handle the given historical quote tick data by handling each tick individually.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>ticks</strong> (<em>list</em> <em>[</em><a href="../model/data/index.htm#nautilus_trader.model.data.QuoteTick"><em>QuoteTick</em></a> <em>]</em>) – The ticks received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-47">WARNING<a href="#warning-47" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_signalself-data-signal--void">handle_signal(self, Data signal) → void<a href="#handle_signalself-data-signal--void" class="hash-link" aria-label="Direct link to handle_signal(self, Data signal) → void" title="Direct link to handle_signal(self, Data signal) → void">​</a></h4>
<p>Handle the given signal.</p>
<p>If state is <code>RUNNING</code> then passes to on_signal.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>signal</strong> (<a href="../core/index.htm#nautilus_trader.core.Data"><em>Data</em></a>) – The signal received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-48">WARNING<a href="#warning-48" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_trade_tickself-tradetick-tick--void">handle_trade_tick(self, TradeTick tick) → void<a href="#handle_trade_tickself-tradetick-tick--void" class="hash-link" aria-label="Direct link to handle_trade_tick(self, TradeTick tick) → void" title="Direct link to handle_trade_tick(self, TradeTick tick) → void">​</a></h4>
<p>Handle the given trade tick.</p>
<p>If state is <code>RUNNING</code> then passes to on_trade_tick.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>tick</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.TradeTick"><em>TradeTick</em></a>) – The tick received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-49">WARNING<a href="#warning-49" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_trade_ticksself-list-ticks--void">handle_trade_ticks(self, list ticks) → void<a href="#handle_trade_ticksself-list-ticks--void" class="hash-link" aria-label="Direct link to handle_trade_ticks(self, list ticks) → void" title="Direct link to handle_trade_ticks(self, list ticks) → void">​</a></h4>
<p>Handle the given historical trade tick data by handling each tick individually.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>ticks</strong> (<em>list</em> <em>[</em><a href="../model/data/index.htm#nautilus_trader.model.data.TradeTick"><em>TradeTick</em></a> <em>]</em>) – The ticks received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-50">WARNING<a href="#warning-50" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="has_active_tasksself--bool">has_active_tasks(self) → bool<a href="#has_active_tasksself--bool" class="hash-link" aria-label="Direct link to has_active_tasks(self) → bool" title="Direct link to has_active_tasks(self) → bool">​</a></h4>
<p>Return a value indicating whether there are any active tasks.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="has_any_tasksself--bool">has_any_tasks(self) → bool<a href="#has_any_tasksself--bool" class="hash-link" aria-label="Direct link to has_any_tasks(self) → bool" title="Direct link to has_any_tasks(self) → bool">​</a></h4>
<p>Return a value indicating whether there are any queued OR active tasks.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="has_pending_requestsself--bool">has_pending_requests(self) → bool<a href="#has_pending_requestsself--bool" class="hash-link" aria-label="Direct link to has_pending_requests(self) → bool" title="Direct link to has_pending_requests(self) → bool">​</a></h4>
<p>Return whether the actor is pending processing for any requests.</p>
<ul>
<li><strong>Returns:</strong>
True if any requests are pending, else False.</li>
<li><strong>Return type:</strong>
bool</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="has_queued_tasksself--bool">has_queued_tasks(self) → bool<a href="#has_queued_tasksself--bool" class="hash-link" aria-label="Direct link to has_queued_tasks(self) → bool" title="Direct link to has_queued_tasks(self) → bool">​</a></h4>
<p>Return a value indicating whether there are any queued tasks.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="id">id<a href="#id" class="hash-link" aria-label="Direct link to id" title="Direct link to id">​</a></h4>
<p>The components ID.</p>
<ul>
<li><strong>Returns:</strong>
ComponentId</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="indicators_initializedself--bool">indicators_initialized(self) → bool<a href="#indicators_initializedself--bool" class="hash-link" aria-label="Direct link to indicators_initialized(self) → bool" title="Direct link to indicators_initialized(self) → bool">​</a></h4>
<p>Return a value indicating whether all indicators are initialized.</p>
<ul>
<li><strong>Returns:</strong>
True if all initialized, else False</li>
<li><strong>Return type:</strong>
bool</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_degraded">is_degraded<a href="#is_degraded" class="hash-link" aria-label="Direct link to is_degraded" title="Direct link to is_degraded">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>DEGRADED</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_degraded</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_disposed">is_disposed<a href="#is_disposed" class="hash-link" aria-label="Direct link to is_disposed" title="Direct link to is_disposed">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>DISPOSED</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_disposed</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_faulted">is_faulted<a href="#is_faulted" class="hash-link" aria-label="Direct link to is_faulted" title="Direct link to is_faulted">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>FAULTED</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_faulted</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_initialized">is_initialized<a href="#is_initialized" class="hash-link" aria-label="Direct link to is_initialized" title="Direct link to is_initialized">​</a></h4>
<p>bool</p>
<p>Return whether the component has been initialized (component.state &gt;= <code>INITIALIZED</code>).</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_initialized</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_pending_requestself-uuid4-request_id--bool">is_pending_request(self, UUID4 request_id) → bool<a href="#is_pending_requestself-uuid4-request_id--bool" class="hash-link" aria-label="Direct link to is_pending_request(self, UUID4 request_id) → bool" title="Direct link to is_pending_request(self, UUID4 request_id) → bool">​</a></h4>
<p>Return whether the request for the given identifier is pending processing.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>request_id</strong> (<a href="../core/index.htm#nautilus_trader.core.UUID4"><em>UUID4</em></a>) – The request ID to check.</li>
<li><strong>Returns:</strong>
True if request is pending, else False.</li>
<li><strong>Return type:</strong>
bool</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_running">is_running<a href="#is_running" class="hash-link" aria-label="Direct link to is_running" title="Direct link to is_running">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>RUNNING</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_running</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_stopped">is_stopped<a href="#is_stopped" class="hash-link" aria-label="Direct link to is_stopped" title="Direct link to is_stopped">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>STOPPED</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_stopped</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="loadself-dict-state--void">load(self, dict state) → void<a href="#loadself-dict-state--void" class="hash-link" aria-label="Direct link to load(self, dict state) → void" title="Direct link to load(self, dict state) → void">​</a></h4>
<p>Load the actor/strategy state from the give state dictionary.</p>
<p>Calls on_load and passes the state.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>state</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>bytes</em> <em>]</em>) – The strategy state to load.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-51">WARNING<a href="#warning-51" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Exceptions raised will be caught, logged, and reraised.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="log">log<a href="#log" class="hash-link" aria-label="Direct link to log" title="Direct link to log">​</a></h4>
<p>The actors logger.</p>
<ul>
<li><strong>Returns:</strong>
Logger</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="msgbus">msgbus<a href="#msgbus" class="hash-link" aria-label="Direct link to msgbus" title="Direct link to msgbus">​</a></h4>
<p>The message bus for the actor (if registered).</p>
<ul>
<li><strong>Returns:</strong>
MessageBus or <code>None</code></li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_barself-bar-bar--void">on_bar(self, Bar bar) → void<a href="#on_barself-bar-bar--void" class="hash-link" aria-label="Direct link to on_bar(self, Bar bar) → void" title="Direct link to on_bar(self, Bar bar) → void">​</a></h4>
<p>Actions to be performed when running and receives a bar.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>bar</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.Bar"><em>Bar</em></a>) – The bar received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-52">WARNING<a href="#warning-52" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_dataself-data--void">on_data(self, data) → void<a href="#on_dataself-data--void" class="hash-link" aria-label="Direct link to on_data(self, data) → void" title="Direct link to on_data(self, data) → void">​</a></h4>
<p>Actions to be performed when running and receives data.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>data</strong> (<a href="../core/index.htm#nautilus_trader.core.Data"><em>Data</em></a>) – The data received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-53">WARNING<a href="#warning-53" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_degradeself--void">on_degrade(self) → void<a href="#on_degradeself--void" class="hash-link" aria-label="Direct link to on_degrade(self) → void" title="Direct link to on_degrade(self) → void">​</a></h4>
<p>Actions to be performed on degrade.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-54">WARNING<a href="#warning-54" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<p>Should be overridden in the actor implementation.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_disposeself--void">on_dispose(self) → void<a href="#on_disposeself--void" class="hash-link" aria-label="Direct link to on_dispose(self) → void" title="Direct link to on_dispose(self) → void">​</a></h4>
<p>Actions to be performed on dispose.</p>
<p>Cleanup/release any resources used here.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-55">WARNING<a href="#warning-55" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_eventself-event-event--void">on_event(self, Event event) → void<a href="#on_eventself-event-event--void" class="hash-link" aria-label="Direct link to on_event(self, Event event) → void" title="Direct link to on_event(self, Event event) → void">​</a></h4>
<p>Actions to be performed running and receives an event.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>event</strong> (<a href="../core/index.htm#nautilus_trader.core.Event"><em>Event</em></a>) – The event received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-56">WARNING<a href="#warning-56" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_faultself--void">on_fault(self) → void<a href="#on_faultself--void" class="hash-link" aria-label="Direct link to on_fault(self) → void" title="Direct link to on_fault(self) → void">​</a></h4>
<p>Actions to be performed on fault.</p>
<p>Cleanup any resources used by the actor here.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-57">WARNING<a href="#warning-57" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<p>Should be overridden in the actor implementation.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_historical_dataself-data--void">on_historical_data(self, data) → void<a href="#on_historical_dataself-data--void" class="hash-link" aria-label="Direct link to on_historical_data(self, data) → void" title="Direct link to on_historical_data(self, data) → void">​</a></h4>
<p>Actions to be performed when running and receives historical data.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>data</strong> (<a href="../core/index.htm#nautilus_trader.core.Data"><em>Data</em></a>) – The historical data received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-58">WARNING<a href="#warning-58" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_index_priceself-indexpriceupdate-index_price--void">on_index_price(self, IndexPriceUpdate index_price) → void<a href="#on_index_priceself-indexpriceupdate-index_price--void" class="hash-link" aria-label="Direct link to on_index_price(self, IndexPriceUpdate index_price) → void" title="Direct link to on_index_price(self, IndexPriceUpdate index_price) → void">​</a></h4>
<p>Actions to be performed when running and receives an index price update.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>index_price</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.IndexPriceUpdate"><em>IndexPriceUpdate</em></a>) – The index price update received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-59">WARNING<a href="#warning-59" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_instrumentself-instrument-instrument--void">on_instrument(self, Instrument instrument) → void<a href="#on_instrumentself-instrument-instrument--void" class="hash-link" aria-label="Direct link to on_instrument(self, Instrument instrument) → void" title="Direct link to on_instrument(self, Instrument instrument) → void">​</a></h4>
<p>Actions to be performed when running and receives an instrument.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>instrument</strong> (<a href="../model/instruments/index.htm#nautilus_trader.model.instruments.Instrument"><em>Instrument</em></a>) – The instrument received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-60">WARNING<a href="#warning-60" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_instrument_closeself-instrumentclose-update--void">on_instrument_close(self, InstrumentClose update) → void<a href="#on_instrument_closeself-instrumentclose-update--void" class="hash-link" aria-label="Direct link to on_instrument_close(self, InstrumentClose update) → void" title="Direct link to on_instrument_close(self, InstrumentClose update) → void">​</a></h4>
<p>Actions to be performed when running and receives an instrument close
update.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>update</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.InstrumentClose"><em>InstrumentClose</em></a>) – The instrument close received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-61">WARNING<a href="#warning-61" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_instrument_statusself-instrumentstatus-data--void">on_instrument_status(self, InstrumentStatus data) → void<a href="#on_instrument_statusself-instrumentstatus-data--void" class="hash-link" aria-label="Direct link to on_instrument_status(self, InstrumentStatus data) → void" title="Direct link to on_instrument_status(self, InstrumentStatus data) → void">​</a></h4>
<p>Actions to be performed when running and receives an instrument status
update.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>data</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.InstrumentStatus"><em>InstrumentStatus</em></a>) – The instrument status update received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-62">WARNING<a href="#warning-62" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_loadself-dict-state--void">on_load(self, dict state) → void<a href="#on_loadself-dict-state--void" class="hash-link" aria-label="Direct link to on_load(self, dict state) → void" title="Direct link to on_load(self, dict state) → void">​</a></h4>
<p>Actions to be performed when the actor state is loaded.</p>
<p>Saved state values will be contained in the give state dictionary.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>state</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>bytes</em> <em>]</em>) – The strategy state to load.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-63">WARNING<a href="#warning-63" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_mark_priceself-markpriceupdate-mark_price--void">on_mark_price(self, MarkPriceUpdate mark_price) → void<a href="#on_mark_priceself-markpriceupdate-mark_price--void" class="hash-link" aria-label="Direct link to on_mark_price(self, MarkPriceUpdate mark_price) → void" title="Direct link to on_mark_price(self, MarkPriceUpdate mark_price) → void">​</a></h4>
<p>Actions to be performed when running and receives a mark price update.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>mark_price</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.MarkPriceUpdate"><em>MarkPriceUpdate</em></a>) – The mark price update received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-64">WARNING<a href="#warning-64" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_order_bookself-orderbook-order_book--void">on_order_book(self, OrderBook order_book) → void<a href="#on_order_bookself-orderbook-order_book--void" class="hash-link" aria-label="Direct link to on_order_book(self, OrderBook order_book) → void" title="Direct link to on_order_book(self, OrderBook order_book) → void">​</a></h4>
<p>Actions to be performed when running and receives an order book.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>order_book</strong> (<a href="../model/book/index.htm#nautilus_trader.model.book.OrderBook"><em>OrderBook</em></a>) – The order book received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-65">WARNING<a href="#warning-65" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_order_book_deltasself-deltas--void">on_order_book_deltas(self, deltas) → void<a href="#on_order_book_deltasself-deltas--void" class="hash-link" aria-label="Direct link to on_order_book_deltas(self, deltas) → void" title="Direct link to on_order_book_deltas(self, deltas) → void">​</a></h4>
<p>Actions to be performed when running and receives order book deltas.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>deltas</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.OrderBookDeltas"><em>OrderBookDeltas</em></a> <em>or</em> <em>nautilus_pyo3.OrderBookDeltas</em>) – The order book deltas received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-66">WARNING<a href="#warning-66" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_order_book_depthself-depth--void">on_order_book_depth(self, depth) → void<a href="#on_order_book_depthself-depth--void" class="hash-link" aria-label="Direct link to on_order_book_depth(self, depth) → void" title="Direct link to on_order_book_depth(self, depth) → void">​</a></h4>
<p>Actions to be performed when running and receives an order book depth.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>depth</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.OrderBookDepth10"><em>OrderBookDepth10</em></a>) – The order book depth received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-67">WARNING<a href="#warning-67" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_quote_tickself-quotetick-tick--void">on_quote_tick(self, QuoteTick tick) → void<a href="#on_quote_tickself-quotetick-tick--void" class="hash-link" aria-label="Direct link to on_quote_tick(self, QuoteTick tick) → void" title="Direct link to on_quote_tick(self, QuoteTick tick) → void">​</a></h4>
<p>Actions to be performed when running and receives a quote tick.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>tick</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.QuoteTick"><em>QuoteTick</em></a>) – The tick received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-68">WARNING<a href="#warning-68" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_resetself--void-1">on_reset(self) → void<a href="#on_resetself--void-1" class="hash-link" aria-label="Direct link to on_reset(self)  → void" title="Direct link to on_reset(self) → void">​</a></h4>
<p>Actions to be performed on reset.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-69">WARNING<a href="#warning-69" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<p>Should be overridden in a user implementation.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_resumeself--void-1">on_resume(self) → void<a href="#on_resumeself--void-1" class="hash-link" aria-label="Direct link to on_resume(self) → void" title="Direct link to on_resume(self) → void">​</a></h4>
<p>Actions to be performed on resume.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-70">WARNING<a href="#warning-70" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_saveself--dict">on_save(self) → dict<a href="#on_saveself--dict" class="hash-link" aria-label="Direct link to on_save(self) → dict" title="Direct link to on_save(self) → dict">​</a></h4>
<p>Actions to be performed when the actor state is saved.</p>
<p>Create and return a state dictionary of values to be saved.</p>
<ul>
<li><strong>Returns:</strong>
The strategy state to save.</li>
<li><strong>Return type:</strong>
dict[str, bytes]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-71">WARNING<a href="#warning-71" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_signalself-signal--void">on_signal(self, signal) → void<a href="#on_signalself-signal--void" class="hash-link" aria-label="Direct link to on_signal(self, signal) → void" title="Direct link to on_signal(self, signal)  → void">​</a></h4>
<p>Actions to be performed when running and receives signal data.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>signal</strong> (<a href="../core/index.htm#nautilus_trader.core.Data"><em>Data</em></a>) – The signal received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-72">WARNING<a href="#warning-72" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_startself--void-1">on_start(self) → void<a href="#on_startself--void-1" class="hash-link" aria-label="Direct link to on_start(self) → void" title="Direct link to on_start(self) → void">​</a></h4>
<p>Actions to be performed on start.</p>
<p>The intent is that this method is called once per trading ‘run’, when
initially starting.</p>
<p>It is recommended to subscribe/request for data here.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-73">WARNING<a href="#warning-73" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<p>Should be overridden in a user implementation.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_stopself--void-1">on_stop(self) → void<a href="#on_stopself--void-1" class="hash-link" aria-label="Direct link to on_stop(self) → void" title="Direct link to on_stop(self) → void">​</a></h4>
<p>Actions to be performed on stop.</p>
<p>The intent is that this method is called to pause, or when done for day.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-74">WARNING<a href="#warning-74" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<p>Should be overridden in a user implementation.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_trade_tickself-tradetick-tick--void">on_trade_tick(self, TradeTick tick) → void<a href="#on_trade_tickself-tradetick-tick--void" class="hash-link" aria-label="Direct link to on_trade_tick(self, TradeTick tick) → void" title="Direct link to on_trade_tick(self, TradeTick tick) → void">​</a></h4>
<p>Actions to be performed when running and receives a trade tick.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>tick</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.TradeTick"><em>TradeTick</em></a>) – The tick received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-75">WARNING<a href="#warning-75" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="pending_requestsself--set">pending_requests(self) → set<a href="#pending_requestsself--set" class="hash-link" aria-label="Direct link to pending_requests(self) → set" title="Direct link to pending_requests(self) → set">​</a></h4>
<p>Return the request IDs which are currently pending processing.</p>
<ul>
<li><strong>Return type:</strong>
set[<a href="../core/index.htm#nautilus_trader.core.UUID4">UUID4</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="portfolio">portfolio<a href="#portfolio" class="hash-link" aria-label="Direct link to portfolio" title="Direct link to portfolio">​</a></h4>
<p>The read-only portfolio for the actor.</p>
<ul>
<li><strong>Returns:</strong>
PortfolioFacade</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="publish_dataself-datatype-data_type-data-data--void">publish_data(self, DataType data_type, Data data) → void<a href="#publish_dataself-datatype-data_type-data-data--void" class="hash-link" aria-label="Direct link to publish_data(self, DataType data_type, Data data) → void" title="Direct link to publish_data(self, DataType data_type, Data data) → void">​</a></h4>
<p>Publish the given data to the message bus.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>data_type</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.DataType"><em>DataType</em></a>) – The data type being published.</li>
<li><strong>data</strong> (<a href="../core/index.htm#nautilus_trader.core.Data"><em>Data</em></a>) – The data to publish.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="publish_signalself-str-name-value-uint64_t-ts_event0--void">publish_signal(self, str name, value, uint64_t ts_event=0) → void<a href="#publish_signalself-str-name-value-uint64_t-ts_event0--void" class="hash-link" aria-label="Direct link to publish_signal(self, str name, value, uint64_t ts_event=0) → void" title="Direct link to publish_signal(self, str name, value, uint64_t ts_event=0) → void">​</a></h4>
<p>Publish the given value as a signal to the message bus.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>name</strong> (<em>str</em>) – The name of the signal being published.
The signal name will be converted to title case, with each word capitalized
(e.g., ‘example’ becomes ‘SignalExample’).</li>
<li><strong>value</strong> (<em>object</em>) – The signal data to publish.</li>
<li><strong>ts_event</strong> (<em>uint64_t</em> <em>,</em> <em>optional</em>) – UNIX timestamp (nanoseconds) when the signal event occurred.
If <code>None</code> then will timestamp current time.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="queue_for_executorself-func-callable-any-tuple-argsnone-dict-kwargsnone">queue_for_executor(self, func: Callable[..., Any], tuple args=None, dict kwargs=None)<a href="#queue_for_executorself-func-callable-any-tuple-argsnone-dict-kwargsnone" class="hash-link" aria-label="Direct link to queue_for_executor(self, func: Callable[..., Any], tuple args=None, dict kwargs=None)" title="Direct link to queue_for_executor(self, func: Callable[..., Any], tuple args=None, dict kwargs=None)">​</a></h4>
<p>Queues the callable func to be executed as fn(*args, **kwargs) sequentially.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>func</strong> (<em>Callable</em>) – The function to be executed.</li>
<li><strong>args</strong> (<em>positional arguments</em>) – The positional arguments for the call to func.</li>
<li><strong>kwargs</strong> (<em>arbitrary keyword arguments</em>) – The keyword arguments for the call to func.</li>
</ul>
</li>
<li><strong>Raises:</strong>
<strong>TypeError</strong> – If func is not of type Callable.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="queued_task_idsself--list">queued_task_ids(self) → list<a href="#queued_task_idsself--list" class="hash-link" aria-label="Direct link to queued_task_ids(self) → list" title="Direct link to queued_task_ids(self) → list">​</a></h4>
<p>Return the queued task identifiers.</p>
<ul>
<li><strong>Return type:</strong>
list[<a href="../common/index.htm#nautilus_trader.common.executor.TaskId">TaskId</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="register_executorself-loop-asyncioabstracteventloop-executor-executor--void">register_executor(self, loop: asyncio.AbstractEventLoop, executor: Executor) → void<a href="#register_executorself-loop-asyncioabstracteventloop-executor-executor--void" class="hash-link" aria-label="Direct link to register_executor(self, loop: asyncio.AbstractEventLoop, executor: Executor) → void" title="Direct link to register_executor(self, loop: asyncio.AbstractEventLoop, executor: Executor) → void">​</a></h4>
<p>Register the given Executor for the actor.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>loop</strong> (<em>asyncio.AbstractEventLoop</em>) – The event loop of the application.</li>
<li><strong>executor</strong> (<em>concurrent.futures.Executor</em>) – The executor to register.</li>
</ul>
</li>
<li><strong>Raises:</strong>
<strong>TypeError</strong> – If executor is not of type concurrent.futures.Executor</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="register_indicator_for_barsself-bartype-bar_type-indicator-indicator--void">register_indicator_for_bars(self, BarType bar_type, Indicator indicator) → void<a href="#register_indicator_for_barsself-bartype-bar_type-indicator-indicator--void" class="hash-link" aria-label="Direct link to register_indicator_for_bars(self, BarType bar_type, Indicator indicator) → void" title="Direct link to register_indicator_for_bars(self, BarType bar_type, Indicator indicator) → void">​</a></h4>
<p>Register the given indicator with the actor/strategy to receive bar data for the
given bar type.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>bar_type</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.BarType"><em>BarType</em></a>) – The bar type for bar updates.</li>
<li><strong>indicator</strong> (<a href="../indicators/index.htm#nautilus_trader.indicators.base.indicator.Indicator"><em>Indicator</em></a>) – The indicator to register.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="register_indicator_for_quote_ticksself-instrumentid-instrument_id-indicator-indicator--void">register_indicator_for_quote_ticks(self, InstrumentId instrument_id, Indicator indicator) → void<a href="#register_indicator_for_quote_ticksself-instrumentid-instrument_id-indicator-indicator--void" class="hash-link" aria-label="Direct link to register_indicator_for_quote_ticks(self, InstrumentId instrument_id, Indicator indicator) → void" title="Direct link to register_indicator_for_quote_ticks(self, InstrumentId instrument_id, Indicator indicator) → void">​</a></h4>
<p>Register the given indicator with the actor/strategy to receive quote tick
data for the given instrument ID.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument ID for tick updates.</li>
<li><strong>indicator</strong> (<a href="../indicators/index.htm#nautilus_trader.indicators.base.indicator.Indicator"><em>Indicator</em></a>) – The indicator to register.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="register_indicator_for_trade_ticksself-instrumentid-instrument_id-indicator-indicator--void">register_indicator_for_trade_ticks(self, InstrumentId instrument_id, Indicator indicator) → void<a href="#register_indicator_for_trade_ticksself-instrumentid-instrument_id-indicator-indicator--void" class="hash-link" aria-label="Direct link to register_indicator_for_trade_ticks(self, InstrumentId instrument_id, Indicator indicator) → void" title="Direct link to register_indicator_for_trade_ticks(self, InstrumentId instrument_id, Indicator indicator) → void">​</a></h4>
<p>Register the given indicator with the actor/strategy to receive trade tick
data for the given instrument ID.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument ID for tick updates.</li>
<li><strong>indicator</strong> (<em>indicator</em>) – The indicator to register.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="register_warning_eventself-type-event--void">register_warning_event(self, type event) → void<a href="#register_warning_eventself-type-event--void" class="hash-link" aria-label="Direct link to register_warning_event(self, type event) → void" title="Direct link to register_warning_event(self, type event) → void">​</a></h4>
<p>Register the given event type for warning log levels.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>event</strong> (<em>type</em>) – The event class to register.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="registered_indicators">registered_indicators<a href="#registered_indicators" class="hash-link" aria-label="Direct link to registered_indicators" title="Direct link to registered_indicators">​</a></h4>
<p>Return the registered indicators for the strategy.</p>
<ul>
<li><strong>Return type:</strong>
list[<a href="../indicators/index.htm#nautilus_trader.indicators.base.indicator.Indicator">Indicator</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="request_aggregated_barsself-list-bar_types-datetime-startnone-datetime-endnone-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-bool-include_external_datafalse-bool-update_subscriptionsfalse-update_catalog-bool--false-dict-paramsnone--uuid4">request_aggregated_bars(self, list bar_types, datetime start=None, datetime end=None, int limit=0, ClientId client_id=None, callback: Callable[[UUID4], None] | None = None, bool include_external_data=False, bool update_subscriptions=False, update_catalog: bool = False, dict params=None) → <a href="../core/index.htm#nautilus_trader.core.UUID4">UUID4</a><a href="#request_aggregated_barsself-list-bar_types-datetime-startnone-datetime-endnone-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-bool-include_external_datafalse-bool-update_subscriptionsfalse-update_catalog-bool--false-dict-paramsnone--uuid4" class="hash-link" aria-label="Direct link to request_aggregated_barsself-list-bar_types-datetime-startnone-datetime-endnone-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-bool-include_external_datafalse-bool-update_subscriptionsfalse-update_catalog-bool--false-dict-paramsnone--uuid4" title="Direct link to request_aggregated_barsself-list-bar_types-datetime-startnone-datetime-endnone-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-bool-include_external_datafalse-bool-update_subscriptionsfalse-update_catalog-bool--false-dict-paramsnone--uuid4">​</a></h4>
<p>Request historical aggregated Bar data for multiple bar types.
The first bar is used to determine which market data type will be queried.
This can either be quotes, trades or bars. If bars are queried,
the first bar type needs to have a composite bar that is external (i.e. not internal/aggregated).
This external bar type will be queried.</p>
<p>If end is <code>None</code> then will request up to the most recent data.</p>
<p>Once the response is received, the bar data is forwarded from the message bus
to the on_historical_data handler. Any tick data used for aggregation is also
forwarded to the on_historical_data handler.</p>
<p>If the request fails, then an error is logged.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>bar_types</strong> (<em>list</em> <em>[</em><a href="../model/data/index.htm#nautilus_trader.model.data.BarType"><em>BarType</em></a> <em>]</em>) – The list of bar types for the request. Composite bars can also be used and need to
figure in the list after a BarType on which it depends.</li>
<li><strong>start</strong> (<em>datetime</em> <em>,</em> <em>optional</em>) – The start datetime (UTC) of request time range.
The inclusiveness depends on individual data client implementation.</li>
<li><strong>end</strong> (<em>datetime</em> <em>,</em> <em>optional</em>) – The end datetime (UTC) of request time range.
The inclusiveness depends on individual data client implementation.</li>
<li><strong>limit</strong> (<em>int</em> <em>,</em> <em>optional</em>) – The limit on the amount of data received (quote ticks, trade ticks or bars).</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>callback</strong> (<em>Callable</em> <em>[</em> <em>[</em><a href="../core/index.htm#nautilus_trader.core.UUID4"><em>UUID4</em></a> <em>]</em> <em>,</em> <em>None</em> <em>]</em> <em>,</em> <em>optional</em>) – The registered callback, to be called with the request ID when the response has
completed processing.</li>
<li><strong>include_external_data</strong> (<em>bool</em> <em>,</em> <em>default False</em>) – If True, includes the queried external data in the response.</li>
<li><strong>update_subscriptions</strong> (<em>bool</em> <em>,</em> <em>default False</em>) – If True, updates the aggregators of any existing or future subscription with the queried external data.</li>
<li><strong>update_catalog</strong> (<em>bool</em> <em>,</em> <em>optional</em>) – Whether to update a catalog with the received data.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
<li><strong>Returns:</strong>
The request_id for the request.</li>
<li><strong>Return type:</strong>
<a href="../core/index.htm#nautilus_trader.core.UUID4">UUID4</a></li>
<li><strong>Raises:</strong>
<ul>
<li><strong>ValueError</strong> – If start is not None and &gt; current timestamp (now).</li>
<li><strong>ValueError</strong> – If end is not None and &gt; current timestamp (now).</li>
<li><strong>ValueError</strong> – If start and end are not None and start is &gt;= end.</li>
<li><strong>ValueError</strong> – If bar_types is empty.</li>
<li><strong>TypeError</strong> – If callback is not None and not of type Callable.</li>
<li><strong>TypeError</strong> – If bar_types is empty or contains elements not of type BarType.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="request_barsself-bartype-bar_type-datetime-startnone-datetime-endnone-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4">request_bars(self, BarType bar_type, datetime start=None, datetime end=None, int limit=0, ClientId client_id=None, callback: Callable[[UUID4], None] | None = None, update_catalog: bool = False, dict params=None) → <a href="../core/index.htm#nautilus_trader.core.UUID4">UUID4</a><a href="#request_barsself-bartype-bar_type-datetime-startnone-datetime-endnone-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4" class="hash-link" aria-label="Direct link to request_barsself-bartype-bar_type-datetime-startnone-datetime-endnone-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4" title="Direct link to request_barsself-bartype-bar_type-datetime-startnone-datetime-endnone-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4">​</a></h4>
<p>Request historical Bar data.</p>
<p>If end is <code>None</code> then will request up to the most recent data.</p>
<p>Once the response is received, the bar data is forwarded from the message bus
to the on_historical_data handler.</p>
<p>If the request fails, then an error is logged.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>bar_type</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.BarType"><em>BarType</em></a>) – The bar type for the request.</li>
<li><strong>start</strong> (<em>datetime</em> <em>,</em> <em>optional</em>) – The start datetime (UTC) of request time range.
The inclusiveness depends on individual data client implementation.</li>
<li><strong>end</strong> (<em>datetime</em> <em>,</em> <em>optional</em>) – The end datetime (UTC) of request time range.
The inclusiveness depends on individual data client implementation.</li>
<li><strong>limit</strong> (<em>int</em> <em>,</em> <em>optional</em>) – The limit on the amount of bars received.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>callback</strong> (<em>Callable</em> <em>[</em> <em>[</em><a href="../core/index.htm#nautilus_trader.core.UUID4"><em>UUID4</em></a> <em>]</em> <em>,</em> <em>None</em> <em>]</em> <em>,</em> <em>optional</em>) – The registered callback, to be called with the request ID when the response has
completed processing.</li>
<li><strong>update_catalog</strong> (<em>bool</em> <em>,</em> <em>optional</em>) – Whether to update a catalog with the received data.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
<li><strong>Returns:</strong>
The request_id for the request.</li>
<li><strong>Return type:</strong>
<a href="../core/index.htm#nautilus_trader.core.UUID4">UUID4</a></li>
<li><strong>Raises:</strong>
<ul>
<li><strong>ValueError</strong> – If start is not None and &gt; current timestamp (now).</li>
<li><strong>ValueError</strong> – If end is not None and &gt; current timestamp (now).</li>
<li><strong>ValueError</strong> – If start and end are not None and start is &gt;= end.</li>
<li><strong>TypeError</strong> – If callback is not None and not of type Callable.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="request_dataself-datatype-data_type-clientid-client_id-instrumentid-instrument_idnone-datetime-startnone-datetime-endnone-int-limit0-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4">request_data(self, DataType data_type, ClientId client_id, InstrumentId instrument_id=None, datetime start=None, datetime end=None, int limit=0, callback: Callable[[UUID4], None] | None = None, update_catalog: bool = False, dict params=None) → <a href="../core/index.htm#nautilus_trader.core.UUID4">UUID4</a><a href="#request_dataself-datatype-data_type-clientid-client_id-instrumentid-instrument_idnone-datetime-startnone-datetime-endnone-int-limit0-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4" class="hash-link" aria-label="Direct link to request_dataself-datatype-data_type-clientid-client_id-instrumentid-instrument_idnone-datetime-startnone-datetime-endnone-int-limit0-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4" title="Direct link to request_dataself-datatype-data_type-clientid-client_id-instrumentid-instrument_idnone-datetime-startnone-datetime-endnone-int-limit0-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4">​</a></h4>
<p>Request custom data for the given data type from the given data client.</p>
<p>Once the response is received, the data is forwarded from the message bus
to the on_historical_data handler.</p>
<p>If the request fails, then an error is logged.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>data_type</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.DataType"><em>DataType</em></a>) – The data type for the request.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a>) – The data client ID.</li>
<li><strong>start</strong> (<em>datetime</em> <em>,</em> <em>optional</em>) – The start datetime (UTC) of request time range.
The inclusiveness depends on individual data client implementation.</li>
<li><strong>end</strong> (<em>datetime</em> <em>,</em> <em>optional</em>) – The end datetime (UTC) of request time range.
The inclusiveness depends on individual data client implementation.</li>
<li><strong>limit</strong> (<em>int</em> <em>,</em> <em>optional</em>) – The limit on the amount of data points received.</li>
<li><strong>callback</strong> (<em>Callable</em> <em>[</em> <em>[</em><a href="../core/index.htm#nautilus_trader.core.UUID4"><em>UUID4</em></a> <em>]</em> <em>,</em> <em>None</em> <em>]</em> <em>,</em> <em>optional</em>) – The registered callback, to be called with the request ID when the response has
completed processing.</li>
<li><strong>update_catalog</strong> (<em>bool</em> <em>,</em> <em>optional</em>) – Whether to update a catalog with the received data.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
<li><strong>Returns:</strong>
The request_id for the request.</li>
<li><strong>Return type:</strong>
<a href="../core/index.htm#nautilus_trader.core.UUID4">UUID4</a></li>
<li><strong>Raises:</strong>
<strong>TypeError</strong> – If callback is not None and not of type Callable.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="request_instrumentself-instrumentid-instrument_id-datetime-startnone-datetime-endnone-clientid-client_idnone-callback-callableuuid4-noane--none--none-update_catalog-bool--false-dict-paramsnone--uuid4">request_instrument(self, InstrumentId instrument_id, datetime start=None, datetime end=None, ClientId client_id=None, callback: Callable[[UUID4], Noane] | None = None, update_catalog: bool = False, dict params=None) → <a href="../core/index.htm#nautilus_trader.core.UUID4">UUID4</a><a href="#request_instrumentself-instrumentid-instrument_id-datetime-startnone-datetime-endnone-clientid-client_idnone-callback-callableuuid4-noane--none--none-update_catalog-bool--false-dict-paramsnone--uuid4" class="hash-link" aria-label="Direct link to request_instrumentself-instrumentid-instrument_id-datetime-startnone-datetime-endnone-clientid-client_idnone-callback-callableuuid4-noane--none--none-update_catalog-bool--false-dict-paramsnone--uuid4" title="Direct link to request_instrumentself-instrumentid-instrument_id-datetime-startnone-datetime-endnone-clientid-client_idnone-callback-callableuuid4-noane--none--none-update_catalog-bool--false-dict-paramsnone--uuid4">​</a></h4>
<p>Request Instrument data for the given instrument ID.</p>
<p>If end is <code>None</code> then will request up to the most recent data.</p>
<p>Once the response is received, the instrument data is forwarded from the message bus
to the on_instrument handler.</p>
<p>If the request fails, then an error is logged.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument ID for the request.</li>
<li><strong>start</strong> (<em>datetime</em> <em>,</em> <em>optional</em>) – The start datetime (UTC) of request time range.
The inclusiveness depends on individual data client implementation.</li>
<li><strong>end</strong> (<em>datetime</em> <em>,</em> <em>optional</em>) – The end datetime (UTC) of request time range.
The inclusiveness depends on individual data client implementation.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>callback</strong> (<em>Callable</em> <em>[</em> <em>[</em><a href="../core/index.htm#nautilus_trader.core.UUID4"><em>UUID4</em></a> <em>]</em> <em>,</em> <em>None</em> <em>]</em> <em>,</em> <em>optional</em>) – The registered callback, to be called with the request ID when the response has
completed processing.</li>
<li><strong>update_catalog</strong> (<em>bool</em> <em>,</em> <em>optional</em>) – Whether to update a catalog with the received data.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
<li><strong>Returns:</strong>
The request_id for the request.</li>
<li><strong>Return type:</strong>
<a href="../core/index.htm#nautilus_trader.core.UUID4">UUID4</a></li>
<li><strong>Raises:</strong>
<ul>
<li><strong>ValueError</strong> – If start is not None and &gt; current timestamp (now).</li>
<li><strong>ValueError</strong> – If end is not None and &gt; current timestamp (now).</li>
<li><strong>ValueError</strong> – If start and end are not None and start is &gt;= end.</li>
<li><strong>TypeError</strong> – If callback is not None and not of type Callable.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="request_instrumentsself-venue-venue-datetime-startnone-datetime-endnone-clientid-client_idnone-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4">request_instruments(self, Venue venue, datetime start=None, datetime end=None, ClientId client_id=None, callback: Callable[[UUID4], None] | None = None, update_catalog: bool = False, dict params=None) → <a href="../core/index.htm#nautilus_trader.core.UUID4">UUID4</a><a href="#request_instrumentsself-venue-venue-datetime-startnone-datetime-endnone-clientid-client_idnone-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4" class="hash-link" aria-label="Direct link to request_instrumentsself-venue-venue-datetime-startnone-datetime-endnone-clientid-client_idnone-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4" title="Direct link to request_instrumentsself-venue-venue-datetime-startnone-datetime-endnone-clientid-client_idnone-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4">​</a></h4>
<p>Request all Instrument data for the given venue.</p>
<p>If end is <code>None</code> then will request up to the most recent data.</p>
<p>Once the response is received, the instrument data is forwarded from the message bus
to the on_instrument handler.</p>
<p>If the request fails, then an error is logged.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>venue</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.Venue"><em>Venue</em></a>) – The venue for the request.</li>
<li><strong>start</strong> (<em>datetime</em> <em>,</em> <em>optional</em>) – The start datetime (UTC) of request time range.
The inclusiveness depends on individual data client implementation.</li>
<li><strong>end</strong> (<em>datetime</em> <em>,</em> <em>optional</em>) – The end datetime (UTC) of request time range.
The inclusiveness depends on individual data client implementation.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>callback</strong> (<em>Callable</em> <em>[</em> <em>[</em><a href="../core/index.htm#nautilus_trader.core.UUID4"><em>UUID4</em></a> <em>]</em> <em>,</em> <em>None</em> <em>]</em> <em>,</em> <em>optional</em>) – The registered callback, to be called with the request ID when the response has
completed processing.</li>
<li><strong>update_catalog</strong> (<em>bool</em> <em>,</em> <em>optional</em>) – Whether to update a catalog with the received data.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
<li><strong>Returns:</strong>
The request_id for the request.</li>
<li><strong>Return type:</strong>
<a href="../core/index.htm#nautilus_trader.core.UUID4">UUID4</a></li>
<li><strong>Raises:</strong>
<ul>
<li><strong>ValueError</strong> – If start is not None and &gt; current timestamp (now).</li>
<li><strong>ValueError</strong> – If end is not None and &gt; current timestamp (now).</li>
<li><strong>ValueError</strong> – If start and end are not None and start is &gt;= end.</li>
<li><strong>TypeError</strong> – If callback is not None and not of type Callable.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="request_order_book_snapshotself-instrumentid-instrument_id-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-dict-paramsnone--uuid4">request_order_book_snapshot(self, InstrumentId instrument_id, int limit=0, ClientId client_id=None, callback: Callable[[UUID4], None] | None = None, dict params=None) → <a href="../core/index.htm#nautilus_trader.core.UUID4">UUID4</a><a href="#request_order_book_snapshotself-instrumentid-instrument_id-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-dict-paramsnone--uuid4" class="hash-link" aria-label="Direct link to request_order_book_snapshotself-instrumentid-instrument_id-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-dict-paramsnone--uuid4" title="Direct link to request_order_book_snapshotself-instrumentid-instrument_id-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-dict-paramsnone--uuid4">​</a></h4>
<p>Request an order book snapshot.</p>
<p>Once the response is received, the order book data is forwarded from the message bus
to the on_historical_data handler.</p>
<p>If the request fails, then an error is logged.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument ID for the order book snapshot request.</li>
<li><strong>limit</strong> (<em>int</em> <em>,</em> <em>optional</em>) – The limit on the depth of the order book snapshot.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If None, it will be inferred from the venue in the instrument ID.</li>
<li><strong>callback</strong> (<em>Callable</em> <em>[</em> <em>[</em><a href="../core/index.htm#nautilus_trader.core.UUID4"><em>UUID4</em></a> <em>]</em> <em>,</em> <em>None</em> <em>]</em> <em>,</em> <em>optional</em>) – The registered callback, to be called with the request ID when the response has completed processing.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
<li><strong>Returns:</strong>
The request_id for the request.</li>
<li><strong>Return type:</strong>
<a href="../core/index.htm#nautilus_trader.core.UUID4">UUID4</a></li>
<li><strong>Raises:</strong>
<ul>
<li><strong>ValueError</strong> – If the instrument_id is None.</li>
<li><strong>TypeError</strong> – If callback is not None and not of type Callable.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="request_quote_ticksself-instrumentid-instrument_id-datetime-startnone-datetime-endnone-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4">request_quote_ticks(self, InstrumentId instrument_id, datetime start=None, datetime end=None, int limit=0, ClientId client_id=None, callback: Callable[[UUID4], None] | None = None, update_catalog: bool = False, dict params=None) → <a href="../core/index.htm#nautilus_trader.core.UUID4">UUID4</a><a href="#request_quote_ticksself-instrumentid-instrument_id-datetime-startnone-datetime-endnone-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4" class="hash-link" aria-label="Direct link to request_quote_ticksself-instrumentid-instrument_id-datetime-startnone-datetime-endnone-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4" title="Direct link to request_quote_ticksself-instrumentid-instrument_id-datetime-startnone-datetime-endnone-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4">​</a></h4>
<p>Request historical QuoteTick data.</p>
<p>If end is <code>None</code> then will request up to the most recent data.</p>
<p>Once the response is received, the quote tick data is forwarded from the message bus
to the on_historical_data handler.</p>
<p>If the request fails, then an error is logged.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The tick instrument ID for the request.</li>
<li><strong>start</strong> (<em>datetime</em> <em>,</em> <em>optional</em>) – The start datetime (UTC) of request time range.
The inclusiveness depends on individual data client implementation.</li>
<li><strong>end</strong> (<em>datetime</em> <em>,</em> <em>optional</em>) – The end datetime (UTC) of request time range.
The inclusiveness depends on individual data client implementation.</li>
<li><strong>limit</strong> (<em>int</em> <em>,</em> <em>optional</em>) – The limit on the amount of quote ticks received.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>callback</strong> (<em>Callable</em> <em>[</em> <em>[</em><a href="../core/index.htm#nautilus_trader.core.UUID4"><em>UUID4</em></a> <em>]</em> <em>,</em> <em>None</em> <em>]</em> <em>,</em> <em>optional</em>) – The registered callback, to be called with the request ID when the response has
completed processing.</li>
<li><strong>update_catalog</strong> (<em>bool</em> <em>,</em> <em>optional</em>) – Whether to update a catalog with the received data.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
<li><strong>Returns:</strong>
The request_id for the request.</li>
<li><strong>Return type:</strong>
<a href="../core/index.htm#nautilus_trader.core.UUID4">UUID4</a></li>
<li><strong>Raises:</strong>
<ul>
<li><strong>ValueError</strong> – If start is not None and &gt; current timestamp (now).</li>
<li><strong>ValueError</strong> – If end is not None and &gt; current timestamp (now).</li>
<li><strong>ValueError</strong> – If start and end are not None and start is &gt;= end.</li>
<li><strong>TypeError</strong> – If callback is not None and not of type Callable.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="request_trade_ticksself-instrumentid-instrument_id-datetime-startnone-datetime-endnone-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4">request_trade_ticks(self, InstrumentId instrument_id, datetime start=None, datetime end=None, int limit=0, ClientId client_id=None, callback: Callable[[UUID4], None] | None = None, update_catalog: bool = False, dict params=None) → <a href="../core/index.htm#nautilus_trader.core.UUID4">UUID4</a><a href="#request_trade_ticksself-instrumentid-instrument_id-datetime-startnone-datetime-endnone-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4" class="hash-link" aria-label="Direct link to request_trade_ticksself-instrumentid-instrument_id-datetime-startnone-datetime-endnone-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4" title="Direct link to request_trade_ticksself-instrumentid-instrument_id-datetime-startnone-datetime-endnone-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4">​</a></h4>
<p>Request historical TradeTick data.</p>
<p>If end is <code>None</code> then will request up to the most recent data.</p>
<p>Once the response is received, the trade tick data is forwarded from the message bus
to the on_historical_data handler.</p>
<p>If the request fails, then an error is logged.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The tick instrument ID for the request.</li>
<li><strong>start</strong> (<em>datetime</em> <em>,</em> <em>optional</em>) – The start datetime (UTC) of request time range.
The inclusiveness depends on individual data client implementation.</li>
<li><strong>end</strong> (<em>datetime</em> <em>,</em> <em>optional</em>) – The end datetime (UTC) of request time range.
The inclusiveness depends on individual data client implementation.</li>
<li><strong>limit</strong> (<em>int</em> <em>,</em> <em>optional</em>) – The limit on the amount of trade ticks received.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>callback</strong> (<em>Callable</em> <em>[</em> <em>[</em><a href="../core/index.htm#nautilus_trader.core.UUID4"><em>UUID4</em></a> <em>]</em> <em>,</em> <em>None</em> <em>]</em> <em>,</em> <em>optional</em>) – The registered callback, to be called with the request ID when the response has
completed processing.</li>
<li><strong>update_catalog</strong> (<em>bool</em> <em>,</em> <em>optional</em>) – Whether to update a catalog with the received data.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
<li><strong>Returns:</strong>
The request_id for the request.</li>
<li><strong>Return type:</strong>
<a href="../core/index.htm#nautilus_trader.core.UUID4">UUID4</a></li>
<li><strong>Raises:</strong>
<ul>
<li><strong>ValueError</strong> – If start is not None and &gt; current timestamp (now).</li>
<li><strong>ValueError</strong> – If end is not None and &gt; current timestamp (now).</li>
<li><strong>ValueError</strong> – If start and end are not None and start is &gt;= end.</li>
<li><strong>TypeError</strong> – If callback is not None and not of type Callable.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="resetself--void">reset(self) → void<a href="#resetself--void" class="hash-link" aria-label="Direct link to reset(self) → void" title="Direct link to reset(self) → void">​</a></h4>
<p>Reset the component.</p>
<p>All stateful fields are reset to their initial value.</p>
<p>While executing on_reset() any exception will be logged and reraised, then the component
will remain in a <code>RESETTING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-76">WARNING<a href="#warning-76" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="resumeself--void">resume(self) → void<a href="#resumeself--void" class="hash-link" aria-label="Direct link to resume(self) → void" title="Direct link to resume(self) → void">​</a></h4>
<p>Resume the component.</p>
<p>While executing on_resume() any exception will be logged and reraised, then the component
will remain in a <code>RESUMING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-77">WARNING<a href="#warning-77" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="run_in_executorself-func-callable-any-tuple-argsnone-dict-kwargsnone">run_in_executor(self, func: Callable[..., Any], tuple args=None, dict kwargs=None)<a href="#run_in_executorself-func-callable-any-tuple-argsnone-dict-kwargsnone" class="hash-link" aria-label="Direct link to run_in_executor(self, func: Callable[..., Any], tuple args=None, dict kwargs=None)" title="Direct link to run_in_executor(self, func: Callable[..., Any], tuple args=None, dict kwargs=None)">​</a></h4>
<p>Schedules the callable func to be executed as fn(*args, **kwargs).</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>func</strong> (<em>Callable</em>) – The function to be executed.</li>
<li><strong>args</strong> (<em>positional arguments</em>) – The positional arguments for the call to func.</li>
<li><strong>kwargs</strong> (<em>arbitrary keyword arguments</em>) – The keyword arguments for the call to func.</li>
</ul>
</li>
<li><strong>Returns:</strong>
The unique task identifier for the execution.
This also corresponds to any future objects memory address.</li>
<li><strong>Return type:</strong>
<a href="../common/index.htm#nautilus_trader.common.executor.TaskId">TaskId</a></li>
<li><strong>Raises:</strong>
<strong>TypeError</strong> – If func is not of type Callable.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="saveself--dict">save(self) → dict<a href="#saveself--dict" class="hash-link" aria-label="Direct link to save(self) → dict" title="Direct link to save(self) → dict">​</a></h4>
<p>Return the actor/strategy state dictionary to be saved.</p>
<p>Calls on_save.</p>
<ul>
<li><strong>Returns:</strong>
The strategy state to save.</li>
<li><strong>Return type:</strong>
dict[str, bytes]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-78">WARNING<a href="#warning-78" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Exceptions raised will be caught, logged, and reraised.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="shutdown_systemself-str-reasonnone--void">shutdown_system(self, str reason=None) → void<a href="#shutdown_systemself-str-reasonnone--void" class="hash-link" aria-label="Direct link to shutdown_system(self, str reason=None) → void" title="Direct link to shutdown_system(self, str reason=None) → void">​</a></h4>
<p>Initiate a system-wide shutdown by generating and publishing a ShutdownSystem command.</p>
<p>The command is handled by the system’s NautilusKernel, which will invoke either stop (synchronously)
or stop_async (asynchronously) depending on the execution context and the presence of an active event loop.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>reason</strong> (<em>str</em> <em>,</em> <em>optional</em>) – The reason for issuing the shutdown command.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="startself--void">start(self) → void<a href="#startself--void" class="hash-link" aria-label="Direct link to start(self) → void" title="Direct link to start(self) → void">​</a></h4>
<p>Start the component.</p>
<p>While executing on_start() any exception will be logged and reraised, then the component
will remain in a <code>STARTING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-79">WARNING<a href="#warning-79" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="state">state<a href="#state" class="hash-link" aria-label="Direct link to state" title="Direct link to state">​</a></h4>
<p>ComponentState</p>
<p>Return the components current state.</p>
<ul>
<li><strong>Return type:</strong>
ComponentState</li>
<li><strong>Type:</strong>
Component.state</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="stopself--void">stop(self) → void<a href="#stopself--void" class="hash-link" aria-label="Direct link to stop(self) → void" title="Direct link to stop(self) → void">​</a></h4>
<p>Stop the component.</p>
<p>While executing on_stop() any exception will be logged and reraised, then the component
will remain in a <code>STOPPING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-80">WARNING<a href="#warning-80" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_barsself-bartype-bar_type-clientid-client_idnone-bool-await_partialfalse-bool-update_catalogfalse-dict-paramsnone--void">subscribe_bars(self, BarType bar_type, ClientId client_id=None, bool await_partial=False, bool update_catalog=False, dict params=None) → void<a href="#subscribe_barsself-bartype-bar_type-clientid-client_idnone-bool-await_partialfalse-bool-update_catalogfalse-dict-paramsnone--void" class="hash-link" aria-label="Direct link to subscribe_bars(self, BarType bar_type, ClientId client_id=None, bool await_partial=False, bool update_catalog=False, dict params=None) → void" title="Direct link to subscribe_bars(self, BarType bar_type, ClientId client_id=None, bool await_partial=False, bool update_catalog=False, dict params=None) → void">​</a></h4>
<p>Subscribe to streaming Bar data for the given bar type.</p>
<p>Once subscribed, any matching bar data published on the message bus is forwarded
to the on_bar handler.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>bar_type</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.BarType"><em>BarType</em></a>) – The bar type to subscribe to.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>await_partial</strong> (<em>bool</em> <em>,</em> <em>default False</em>) – If the bar aggregator should await the arrival of a historical partial bar prior
to actively aggregating new bars.</li>
<li><strong>update_catalog</strong> (<em>bool</em> <em>,</em> <em>optional</em>) – Whether to update a catalog with the received data.
Only useful when downloading data during a backtest.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_dataself-datatype-data_type-clientid-client_idnone-instrumentid-instrument_idnone-bool-update_catalogfalse-dict-paramsnone--void">subscribe_data(self, DataType data_type, ClientId client_id=None, InstrumentId instrument_id=None, bool update_catalog=False, dict params=None) → void<a href="#subscribe_dataself-datatype-data_type-clientid-client_idnone-instrumentid-instrument_idnone-bool-update_catalogfalse-dict-paramsnone--void" class="hash-link" aria-label="Direct link to subscribe_data(self, DataType data_type, ClientId client_id=None, InstrumentId instrument_id=None, bool update_catalog=False, dict params=None) → void" title="Direct link to subscribe_data(self, DataType data_type, ClientId client_id=None, InstrumentId instrument_id=None, bool update_catalog=False, dict params=None) → void">​</a></h4>
<p>Subscribe to data of the given data type.</p>
<p>Once subscribed, any matching data published on the message bus is forwarded
to the on_data handler.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>data_type</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.DataType"><em>DataType</em></a>) – The data type to subscribe to.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The data client ID. If supplied then a Subscribe command will be
sent to the corresponding data client.</li>
<li><strong>update_catalog</strong> (<em>bool</em> <em>,</em> <em>optional</em>) – Whether to update a catalog with the received data.
Only useful when downloading data during a backtest.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_index_pricesself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void">subscribe_index_prices(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void<a href="#subscribe_index_pricesself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void" class="hash-link" aria-label="Direct link to subscribe_index_prices(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void" title="Direct link to subscribe_index_prices(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Subscribe to streaming IndexPriceUpdate data for the given instrument ID.</p>
<p>Once subscribed, any matching index price updates published on the message bus are forwarded
to the on_index_price handler.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument to subscribe to.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_instrumentself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void">subscribe_instrument(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void<a href="#subscribe_instrumentself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void" class="hash-link" aria-label="Direct link to subscribe_instrument(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void" title="Direct link to subscribe_instrument(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Subscribe to update Instrument data for the given instrument ID.</p>
<p>Once subscribed, any matching instrument data published on the message bus is forwarded
to the on_instrument handler.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument ID for the subscription.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_instrument_closeself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void">subscribe_instrument_close(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void<a href="#subscribe_instrument_closeself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void" class="hash-link" aria-label="Direct link to subscribe_instrument_close(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void" title="Direct link to subscribe_instrument_close(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Subscribe to close updates for the given instrument ID.</p>
<p>Once subscribed, any matching instrument close data published on the message bus is forwarded
to the on_instrument_close handler.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument to subscribe to status updates for.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_instrument_statusself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void">subscribe_instrument_status(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void<a href="#subscribe_instrument_statusself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void" class="hash-link" aria-label="Direct link to subscribe_instrument_status(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void" title="Direct link to subscribe_instrument_status(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Subscribe to status updates for the given instrument ID.</p>
<p>Once subscribed, any matching instrument status data published on the message bus is forwarded
to the on_instrument_status handler.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument to subscribe to status updates for.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_instrumentsself-venue-venue-clientid-client_idnone-dict-paramsnone--void">subscribe_instruments(self, Venue venue, ClientId client_id=None, dict params=None) → void<a href="#subscribe_instrumentsself-venue-venue-clientid-client_idnone-dict-paramsnone--void" class="hash-link" aria-label="Direct link to subscribe_instruments(self, Venue venue, ClientId client_id=None, dict params=None) → void" title="Direct link to subscribe_instruments(self, Venue venue, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Subscribe to update Instrument data for the given venue.</p>
<p>Once subscribed, any matching instrument data published on the message bus is forwarded
the on_instrument handler.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>venue</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.Venue"><em>Venue</em></a>) – The venue for the subscription.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_mark_pricesself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void">subscribe_mark_prices(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void<a href="#subscribe_mark_pricesself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void" class="hash-link" aria-label="Direct link to subscribe_mark_prices(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void" title="Direct link to subscribe_mark_prices(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Subscribe to streaming MarkPriceUpdate data for the given instrument ID.</p>
<p>Once subscribed, any matching mark price updates published on the message bus are forwarded
to the on_mark_price handler.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument to subscribe to.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_order_book_at_intervalself-instrumentid-instrument_id-booktype-book_typebooktypel2_mbp-int-depth0-int-interval_ms1000-clientid-client_idnone-bool-managedtrue-dict-paramsnone--void">subscribe_order_book_at_interval(self, InstrumentId instrument_id, BookType book_type=BookType.L2_MBP, int depth=0, int interval_ms=1000, ClientId client_id=None, bool managed=True, dict params=None) → void<a href="#subscribe_order_book_at_intervalself-instrumentid-instrument_id-booktype-book_typebooktypel2_mbp-int-depth0-int-interval_ms1000-clientid-client_idnone-bool-managedtrue-dict-paramsnone--void" class="hash-link" aria-label="Direct link to subscribe_order_book_at_interval(self, InstrumentId instrument_id, BookType book_type=BookType.L2_MBP, int depth=0, int interval_ms=1000, ClientId client_id=None, bool managed=True, dict params=None) → void" title="Direct link to subscribe_order_book_at_interval(self, InstrumentId instrument_id, BookType book_type=BookType.L2_MBP, int depth=0, int interval_ms=1000, ClientId client_id=None, bool managed=True, dict params=None) → void">​</a></h4>
<p>Subscribe to an OrderBook at a specified interval for the given instrument ID.</p>
<p>Once subscribed, any matching order book updates published on the message bus are forwarded
to the on_order_book handler.</p>
<p>The DataEngine will only maintain one order book for each instrument.
Because of this - the level, depth and params for the stream will be set
as per the last subscription request (this will also affect all subscribers).</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The order book instrument ID to subscribe to.</li>
<li><strong>book_type</strong> (BookType {<code>L1_MBP</code>, <code>L2_MBP</code>, <code>L3_MBO</code>}) – The order book type.</li>
<li><strong>depth</strong> (<em>int</em> <em>,</em> <em>optional</em>) – The maximum depth for the order book. A depth of 0 is maximum depth.</li>
<li><strong>interval_ms</strong> (<em>int</em> <em>,</em> <em>default 1000</em>) – The order book snapshot interval (milliseconds).</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>managed</strong> (<em>bool</em> <em>,</em> <em>default True</em>) – If an order book should be managed by the data engine based on the subscribed feed.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
<li><strong>Raises:</strong>
<ul>
<li><strong>ValueError</strong> – If depth is negative (&lt; 0).</li>
<li><strong>ValueError</strong> – If interval_ms is not positive (&gt; 0).</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-81">WARNING<a href="#warning-81" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Consider subscribing to order book deltas if you need intervals less than 100 milliseconds.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_order_book_deltasself-instrumentid-instrument_id-booktype-book_typebooktypel2_mbp-int-depth0-clientid-client_idnone-bool-managedtrue-bool-pyo3_conversionfalse-dict-paramsnone--void">subscribe_order_book_deltas(self, InstrumentId instrument_id, BookType book_type=BookType.L2_MBP, int depth=0, ClientId client_id=None, bool managed=True, bool pyo3_conversion=False, dict params=None) → void<a href="#subscribe_order_book_deltasself-instrumentid-instrument_id-booktype-book_typebooktypel2_mbp-int-depth0-clientid-client_idnone-bool-managedtrue-bool-pyo3_conversionfalse-dict-paramsnone--void" class="hash-link" aria-label="Direct link to subscribe_order_book_deltas(self, InstrumentId instrument_id, BookType book_type=BookType.L2_MBP, int depth=0, ClientId client_id=None, bool managed=True, bool pyo3_conversion=False, dict params=None) → void" title="Direct link to subscribe_order_book_deltas(self, InstrumentId instrument_id, BookType book_type=BookType.L2_MBP, int depth=0, ClientId client_id=None, bool managed=True, bool pyo3_conversion=False, dict params=None) → void">​</a></h4>
<p>Subscribe to the order book data stream, being a snapshot then deltas
for the given instrument ID.</p>
<p>Once subscribed, any matching order book data published on the message bus is forwarded
to the on_order_book_deltas handler.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The order book instrument ID to subscribe to.</li>
<li><strong>book_type</strong> (BookType {<code>L1_MBP</code>, <code>L2_MBP</code>, <code>L3_MBO</code>}) – The order book type.</li>
<li><strong>depth</strong> (<em>int</em> <em>,</em> <em>optional</em>) – The maximum depth for the order book. A depth of 0 is maximum depth.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>managed</strong> (<em>bool</em> <em>,</em> <em>default True</em>) – If an order book should be managed by the data engine based on the subscribed feed.</li>
<li><strong>pyo3_conversion</strong> (<em>bool</em> <em>,</em> <em>default False</em>) – If received deltas should be converted to nautilus_pyo3.OrderBookDeltas
prior to being passed to the on_order_book_deltas handler.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_order_book_depthself-instrumentid-instrument_id-booktype-book_typebooktypel2_mbp-int-depth0-clientid-client_idnone-bool-managedtrue-bool-pyo3_conversionfalse-dict-paramsnone--void">subscribe_order_book_depth(self, InstrumentId instrument_id, BookType book_type=BookType.L2_MBP, int depth=0, ClientId client_id=None, bool managed=True, bool pyo3_conversion=False, dict params=None) → void<a href="#subscribe_order_book_depthself-instrumentid-instrument_id-booktype-book_typebooktypel2_mbp-int-depth0-clientid-client_idnone-bool-managedtrue-bool-pyo3_conversionfalse-dict-paramsnone--void" class="hash-link" aria-label="Direct link to subscribe_order_book_depth(self, InstrumentId instrument_id, BookType book_type=BookType.L2_MBP, int depth=0, ClientId client_id=None, bool managed=True, bool pyo3_conversion=False, dict params=None) → void" title="Direct link to subscribe_order_book_depth(self, InstrumentId instrument_id, BookType book_type=BookType.L2_MBP, int depth=0, ClientId client_id=None, bool managed=True, bool pyo3_conversion=False, dict params=None) → void">​</a></h4>
<p>Subscribe to the order book depth stream for the given instrument ID.</p>
<p>Once subscribed, any matching order book data published on the message bus is forwarded
to the on_order_book_depth handler.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The order book instrument ID to subscribe to.</li>
<li><strong>book_type</strong> (BookType {<code>L1_MBP</code>, <code>L2_MBP</code>, <code>L3_MBO</code>}) – The order book type.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>managed</strong> (<em>bool</em> <em>,</em> <em>default True</em>) – If an order book should be managed by the data engine based on the subscribed feed.</li>
<li><strong>pyo3_conversion</strong> (<em>bool</em> <em>,</em> <em>default False</em>) – If received deltas should be converted to nautilus_pyo3.OrderBookDepth
prior to being passed to the on_order_book_depth handler.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_quote_ticksself-instrumentid-instrument_id-clientid-client_idnone-bool-update_catalogfalse-dict-paramsnone--void">subscribe_quote_ticks(self, InstrumentId instrument_id, ClientId client_id=None, bool update_catalog=False, dict params=None) → void<a href="#subscribe_quote_ticksself-instrumentid-instrument_id-clientid-client_idnone-bool-update_catalogfalse-dict-paramsnone--void" class="hash-link" aria-label="Direct link to subscribe_quote_ticks(self, InstrumentId instrument_id, ClientId client_id=None, bool update_catalog=False, dict params=None) → void" title="Direct link to subscribe_quote_ticks(self, InstrumentId instrument_id, ClientId client_id=None, bool update_catalog=False, dict params=None) → void">​</a></h4>
<p>Subscribe to streaming QuoteTick data for the given instrument ID.</p>
<p>Once subscribed, any matching quote tick data published on the message bus is forwarded
to the on_quote_tick handler.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The tick instrument to subscribe to.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>update_catalog</strong> (<em>bool</em> <em>,</em> <em>optional</em>) – Whether to update a catalog with the received data.
Only useful when downloading data during a backtest.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_signalself-str-name--void">subscribe_signal(self, str name=&#x27;&#x27;) → void<a href="#subscribe_signalself-str-name--void" class="hash-link" aria-label="Direct link to subscribe_signal(self, str name=&#x27;&#x27;) → void" title="Direct link to subscribe_signal(self, str name=&#x27;&#x27;) → void">​</a></h4>
<p>Subscribe to a specific signal by name, or to all signals if no name is provided.</p>
<p>Once subscribed, any matching signal data published on the message bus is forwarded
to the on_signal handler.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>name</strong> (<em>str</em> <em>,</em> <em>optional</em>) – The name of the signal to subscribe to. If not provided or an empty
string is passed, the subscription will include all signals.
The signal name is case-insensitive and will be capitalized
(e.g., ‘example’ becomes ‘SignalExample*’).</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_trade_ticksself-instrumentid-instrument_id-clientid-client_idnone-bool-update_catalogfalse-dict-paramsnone--void">subscribe_trade_ticks(self, InstrumentId instrument_id, ClientId client_id=None, bool update_catalog=False, dict params=None) → void<a href="#subscribe_trade_ticksself-instrumentid-instrument_id-clientid-client_idnone-bool-update_catalogfalse-dict-paramsnone--void" class="hash-link" aria-label="Direct link to subscribe_trade_ticks(self, InstrumentId instrument_id, ClientId client_id=None, bool update_catalog=False, dict params=None) → void" title="Direct link to subscribe_trade_ticks(self, InstrumentId instrument_id, ClientId client_id=None, bool update_catalog=False, dict params=None) → void">​</a></h4>
<p>Subscribe to streaming TradeTick data for the given instrument ID.</p>
<p>Once subscribed, any matching trade tick data published on the message bus is forwarded
to the on_trade_tick handler.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The tick instrument to subscribe to.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>update_catalog</strong> (<em>bool</em> <em>,</em> <em>optional</em>) – Whether to update a catalog with the received data.
Only useful when downloading data during a backtest.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="to_importable_configself--importableactorconfig">to_importable_config(self) → <a href="../config/index.htm#nautilus_trader.common.config.ImportableActorConfig">ImportableActorConfig</a><a href="#to_importable_configself--importableactorconfig" class="hash-link" aria-label="Direct link to to_importable_configself--importableactorconfig" title="Direct link to to_importable_configself--importableactorconfig">​</a></h4>
<p>Returns an importable configuration for this actor.</p>
<ul>
<li><strong>Return type:</strong>
<a href="../config/index.htm#nautilus_trader.common.config.ImportableActorConfig">ImportableActorConfig</a></li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="trader_id">trader_id<a href="#trader_id" class="hash-link" aria-label="Direct link to trader_id" title="Direct link to trader_id">​</a></h4>
<p>The trader ID associated with the component.</p>
<ul>
<li><strong>Returns:</strong>
TraderId</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="type">type<a href="#type" class="hash-link" aria-label="Direct link to type" title="Direct link to type">​</a></h4>
<p>The components type.</p>
<ul>
<li><strong>Returns:</strong>
type</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_barsself-bartype-bar_type-clientid-client_idnone-dict-paramsnone--void">unsubscribe_bars(self, BarType bar_type, ClientId client_id=None, dict params=None) → void<a href="#unsubscribe_barsself-bartype-bar_type-clientid-client_idnone-dict-paramsnone--void" class="hash-link" aria-label="Direct link to unsubscribe_bars(self, BarType bar_type, ClientId client_id=None, dict params=None) → void" title="Direct link to unsubscribe_bars(self, BarType bar_type, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Unsubscribe from streaming Bar data for the given bar type.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>bar_type</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.BarType"><em>BarType</em></a>) – The bar type to unsubscribe from.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_dataself-datatype-data_type-clientid-client_idnone-instrumentid-instrument_idnone-dict-paramsnone--void">unsubscribe_data(self, DataType data_type, ClientId client_id=None, InstrumentId instrument_id=None, dict params=None) → void<a href="#unsubscribe_dataself-datatype-data_type-clientid-client_idnone-instrumentid-instrument_idnone-dict-paramsnone--void" class="hash-link" aria-label="Direct link to unsubscribe_data(self, DataType data_type, ClientId client_id=None, InstrumentId instrument_id=None, dict params=None) → void" title="Direct link to unsubscribe_data(self, DataType data_type, ClientId client_id=None, InstrumentId instrument_id=None, dict params=None) → void">​</a></h4>
<p>Unsubscribe from data of the given data type.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>data_type</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.DataType"><em>DataType</em></a>) – The data type to unsubscribe from.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The data client ID. If supplied then an Unsubscribe command will
be sent to the data client.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_index_pricesself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void">unsubscribe_index_prices(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void<a href="#unsubscribe_index_pricesself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void" class="hash-link" aria-label="Direct link to unsubscribe_index_prices(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void" title="Direct link to unsubscribe_index_prices(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Unsubscribe from streaming IndexPriceUpdate data for the given instrument ID.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument to subscribe to.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_instrumentself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void">unsubscribe_instrument(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void<a href="#unsubscribe_instrumentself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void" class="hash-link" aria-label="Direct link to unsubscribe_instrument(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void" title="Direct link to unsubscribe_instrument(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Unsubscribe from update Instrument data for the given instrument ID.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument to unsubscribe from.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_instrument_statusself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void">unsubscribe_instrument_status(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void<a href="#unsubscribe_instrument_statusself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void" class="hash-link" aria-label="Direct link to unsubscribe_instrument_status(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void" title="Direct link to unsubscribe_instrument_status(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Unsubscribe to status updates of the given venue.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument to unsubscribe to status updates for.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_instrumentsself-venue-venue-clientid-client_idnone-dict-paramsnone--void">unsubscribe_instruments(self, Venue venue, ClientId client_id=None, dict params=None) → void<a href="#unsubscribe_instrumentsself-venue-venue-clientid-client_idnone-dict-paramsnone--void" class="hash-link" aria-label="Direct link to unsubscribe_instruments(self, Venue venue, ClientId client_id=None, dict params=None) → void" title="Direct link to unsubscribe_instruments(self, Venue venue, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Unsubscribe from update Instrument data for the given venue.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>venue</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.Venue"><em>Venue</em></a>) – The venue for the subscription.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_mark_pricesself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void">unsubscribe_mark_prices(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void<a href="#unsubscribe_mark_pricesself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void" class="hash-link" aria-label="Direct link to unsubscribe_mark_prices(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void" title="Direct link to unsubscribe_mark_prices(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Unsubscribe from streaming MarkPriceUpdate data for the given instrument ID.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument to subscribe to.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_order_book_at_intervalself-instrumentid-instrument_id-int-interval_ms1000-clientid-client_idnone-dict-paramsnone--void">unsubscribe_order_book_at_interval(self, InstrumentId instrument_id, int interval_ms=1000, ClientId client_id=None, dict params=None) → void<a href="#unsubscribe_order_book_at_intervalself-instrumentid-instrument_id-int-interval_ms1000-clientid-client_idnone-dict-paramsnone--void" class="hash-link" aria-label="Direct link to unsubscribe_order_book_at_interval(self, InstrumentId instrument_id, int interval_ms=1000, ClientId client_id=None, dict params=None) → void" title="Direct link to unsubscribe_order_book_at_interval(self, InstrumentId instrument_id, int interval_ms=1000, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Unsubscribe from an OrderBook at a specified interval for the given instrument ID.</p>
<p>The interval must match the previously subscribed interval.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The order book instrument to subscribe to.</li>
<li><strong>interval_ms</strong> (<em>int</em> <em>,</em> <em>default 1000</em>) – The order book snapshot interval (milliseconds).</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_order_book_deltasself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void">unsubscribe_order_book_deltas(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void<a href="#unsubscribe_order_book_deltasself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void" class="hash-link" aria-label="Direct link to unsubscribe_order_book_deltas(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void" title="Direct link to unsubscribe_order_book_deltas(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Unsubscribe the order book deltas stream for the given instrument ID.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The order book instrument to subscribe to.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_order_book_depthself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void">unsubscribe_order_book_depth(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void<a href="#unsubscribe_order_book_depthself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void" class="hash-link" aria-label="Direct link to unsubscribe_order_book_depth(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void" title="Direct link to unsubscribe_order_book_depth(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Unsubscribe the order book depth stream for the given instrument ID.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The order book instrument to subscribe to.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_quote_ticksself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void">unsubscribe_quote_ticks(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void<a href="#unsubscribe_quote_ticksself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void" class="hash-link" aria-label="Direct link to unsubscribe_quote_ticks(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void" title="Direct link to unsubscribe_quote_ticks(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Unsubscribe from streaming QuoteTick data for the given instrument ID.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The tick instrument to unsubscribe from.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_trade_ticksself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void">unsubscribe_trade_ticks(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void<a href="#unsubscribe_trade_ticksself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void" class="hash-link" aria-label="Direct link to unsubscribe_trade_ticks(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void" title="Direct link to unsubscribe_trade_ticks(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Unsubscribe from streaming TradeTick data for the given instrument ID.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The tick instrument ID to unsubscribe from.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>)   – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="update_syntheticself-syntheticinstrument-synthetic--void">update_synthetic(self, SyntheticInstrument synthetic) → void<a href="#update_syntheticself-syntheticinstrument-synthetic--void" class="hash-link" aria-label="Direct link to update_synthetic(self, SyntheticInstrument synthetic) → void" title="Direct link to update_synthetic(self, SyntheticInstrument synthetic) → void">​</a></h4>
<p>Update the synthetic instrument in the cache.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>synthetic</strong> (<a href="../model/instruments/index.htm#nautilus_trader.model.instruments.SyntheticInstrument"><em>SyntheticInstrument</em></a>) – The synthetic instrument to update in the cache.</li>
<li><strong>Raises:</strong>
<strong>KeyError</strong> – If synthetic does not already exist in the cache.</li>
</ul>
<p><a id="module-nautilus_trader.trading.filters"></a></p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="class-newsimpact"><em>class</em> NewsImpact<a href="#class-newsimpact" class="hash-link" aria-label="Direct link to class-newsimpact" title="Direct link to class-newsimpact">​</a></h3>
<p>Bases: <code>Enum</code></p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="none--1">NONE <em>= 1</em><a href="#none--1" class="hash-link" aria-label="Direct link to none--1" title="Direct link to none--1">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="low--2">LOW <em>= 2</em><a href="#low--2" class="hash-link" aria-label="Direct link to low--2" title="Direct link to low--2">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="medium--3">MEDIUM <em>= 3</em><a href="#medium--3" class="hash-link" aria-label="Direct link to medium--3" title="Direct link to medium--3">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="high--4">HIGH <em>= 4</em><a href="#high--4" class="hash-link" aria-label="Direct link to high--4" title="Direct link to high--4">​</a></h4>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="class-newsevent"><em>class</em> NewsEvent<a href="#class-newsevent" class="hash-link" aria-label="Direct link to class-newsevent" title="Direct link to class-newsevent">​</a></h3>
<p>Bases: <a href="../core/index.htm#nautilus_trader.core.Data"><code>Data</code></a></p>
<p>Represents an economic news event.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>impact</strong> (<a href="#nautilus_trader.trading.filters.NewsImpact"><em>NewsImpact</em></a>) – The expected impact for the economic news event.</li>
<li><strong>name</strong> (<em>str</em>) – The name of the economic news event.</li>
<li><strong>currency</strong> (<a href="../model/index.htm#nautilus_trader.model.Currency"><em>Currency</em></a>) – The currency the economic news event is expected to affect.</li>
<li><strong>ts_event</strong> (<em>int</em>) – UNIX timestamp (nanoseconds) when the news event occurred.</li>
<li><strong>ts_init</strong> (<em>int</em>) – UNIX timestamp (nanoseconds) when the data object was initialized.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="property-impact--newsimpact"><em>property</em> impact <em>: <a href="#nautilus_trader.trading.filters.NewsImpact">NewsImpact</a></em><a href="#property-impact--newsimpact" class="hash-link" aria-label="Direct link to property-impact--newsimpact" title="Direct link to property-impact--newsimpact">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="property-name--str"><em>property</em> name <em>: str</em><a href="#property-name--str" class="hash-link" aria-label="Direct link to property-name--str" title="Direct link to property-name--str">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="property-currency--currency"><em>property</em> currency <em>: <a href="../model/objects/index.htm#nautilus_trader.model.objects.Currency">Currency</a></em><a href="#property-currency--currency" class="hash-link" aria-label="Direct link to property-currency--currency" title="Direct link to property-currency--currency">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="property-ts_event--int"><em>property</em> ts_event <em>: int</em><a href="#property-ts_event--int" class="hash-link" aria-label="Direct link to property-ts_event--int" title="Direct link to property-ts_event--int">​</a></h4>
<p>int</p>
<p>UNIX timestamp (nanoseconds) when the data event occurred.</p>
<ul>
<li><strong>Return type:</strong>
int</li>
<li><strong>Type:</strong>
Data.ts_event</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="property-ts_init--int"><em>property</em> ts_init <em>: int</em><a href="#property-ts_init--int" class="hash-link" aria-label="Direct link to property-ts_init--int" title="Direct link to property-ts_init--int">​</a></h4>
<p>int</p>
<p>UNIX timestamp (nanoseconds) when the object was initialized.</p>
<ul>
<li><strong>Return type:</strong>
int</li>
<li><strong>Type:</strong>
Data.ts_init</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="classmethod-fully_qualified_namecls--str-1"><em>classmethod</em> fully_qualified_name(cls) → str<a href="#classmethod-fully_qualified_namecls--str-1" class="hash-link" aria-label="Direct link to classmethod-fully_qualified_namecls--str-1" title="Direct link to classmethod-fully_qualified_namecls--str-1">​</a></h4>
<p>Return the fully qualified name for the Data class.</p>
<ul>
<li><strong>Return type:</strong>
str</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="classmethod-is_signalcls-str-name--bool"><em>classmethod</em> is_signal(cls, str name=&#x27;&#x27;) → bool<a href="#classmethod-is_signalcls-str-name--bool" class="hash-link" aria-label="Direct link to classmethod-is_signalcls-str-name--bool" title="Direct link to classmethod-is_signalcls-str-name--bool">​</a></h4>
<p>Determine if the current class is a signal type, optionally checking for a specific signal name.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>name</strong> (<em>str</em> <em>,</em> <em>optional</em>) – The specific signal name to check.
If name not provided or if an empty string is passed, the method checks whether the
class name indicates a general signal type.
If name is provided, the method checks if the class name corresponds to that specific signal.</li>
<li><strong>Returns:</strong>
True if the class name matches the signal type or the specific signal name, otherwise False.</li>
<li><strong>Return type:</strong>
bool</li>
</ul>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="class-economicnewseventfilter"><em>class</em> EconomicNewsEventFilter<a href="#class-economicnewseventfilter" class="hash-link" aria-label="Direct link to class-economicnewseventfilter" title="Direct link to class-economicnewseventfilter">​</a></h3>
<p>Bases: <code>object</code></p>
<p>Provides methods to help filter trading strategy rules based on economic news
events.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>currencies</strong> (<em>list</em> *[*<em>str</em> <em>]</em>) – The list of three letter currency codes to filter.</li>
<li><strong>impacts</strong> (<em>list</em> *[*<em>str</em> <em>]</em>) – The list of impact levels to filter (‘LOW’, ‘MEDIUM’, ‘HIGH’).</li>
<li><strong>news_data</strong> (<em>pd.DataFrame</em>) – The economic news data.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="property-unfiltered_data_start"><em>property</em> unfiltered_data_start<a href="#property-unfiltered_data_start" class="hash-link" aria-label="Direct link to property-unfiltered_data_start" title="Direct link to property-unfiltered_data_start">​</a></h4>
<p>Return the start of the raw data.</p>
<ul>
<li><strong>Return type:</strong>
datetime</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="property-unfiltered_data_end"><em>property</em> unfiltered_data_end<a href="#property-unfiltered_data_end" class="hash-link" aria-label="Direct link to property-unfiltered_data_end" title="Direct link to property-unfiltered_data_end">​</a></h4>
<p>Return the end of the raw data.</p>
<ul>
<li><strong>Return type:</strong>
datetime</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="property-currencies"><em>property</em> currencies<a href="#property-currencies" class="hash-link" aria-label="Direct link to property-currencies" title="Direct link to property-currencies">​</a></h4>
<p>Return the currencies the data is filtered on.</p>
<ul>
<li><strong>Return type:</strong>
list[str]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="property-impacts"><em>property</em> impacts<a href="#property-impacts" class="hash-link" aria-label="Direct link to property-impacts" title="Direct link to property-impacts">​</a></h4>
<p>Return the news impacts the data is filtered on.</p>
<ul>
<li><strong>Return type:</strong>
list[str]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="next_eventtime_now-datetime--newsevent--none">next_event(time_now: datetime) → <a href="#nautilus_trader.trading.filters.NewsEvent">NewsEvent</a> | None<a href="#next_eventtime_now-datetime--newsevent--none" class="hash-link" aria-label="Direct link to next_eventtime_now-datetime--newsevent--none" title="Direct link to next_eventtime_now-datetime--newsevent--none">​</a></h4>
<p>Return the next news event matching the filter conditions. Will return None if
no news events match the filter conditions.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>time_now</strong> (<em>datetime</em>) – The current time.</li>
<li><strong>Returns:</strong>
The next news event in the filtered data if any.</li>
<li><strong>Return type:</strong>
NewsEvent or <code>None</code></li>
<li><strong>Raises:</strong>
<ul>
<li><strong>ValueError</strong> – The time_now &lt; self.unfiltered_data_start.</li>
<li><strong>ValueError</strong> – The time_now &gt; self.unfiltered_data_end.</li>
<li><strong>ValueError</strong> – If time_now is not tz aware UTC.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="prev_eventtime_now-datetime--newsevent--none">prev_event(time_now: datetime) → <a href="#nautilus_trader.trading.filters.NewsEvent">NewsEvent</a> | None<a href="#prev_eventtime_now-datetime--newsevent--none" class="hash-link" aria-label="Direct link to prev_eventtime_now-datetime--newsevent--none" title="Direct link to prev_eventtime_now-datetime--newsevent--none">​</a></h4>
<p>Return the previous news event matching the initial filter conditions. Will
return None if no news events match the filter conditions.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>time_now</strong> (<em>datetime</em>) – The current time.</li>
<li><strong>Returns:</strong>
The previous news event in the filtered data if any.</li>
<li><strong>Return type:</strong>
NewsEvent or <code>None</code></li>
<li><strong>Raises:</strong>
<ul>
<li><strong>ValueError</strong> – The time_now &lt; self.unfiltered_data_start.</li>
<li><strong>ValueError</strong> – The time_now &gt; self.unfiltered_data_end.</li>
<li><strong>ValueError</strong> – If time_now is not tz aware UTC.</li>
</ul>
</li>
</ul>
<p><a id="module-nautilus_trader.trading.strategy"></a></p>
<p>This module defines a trading strategy class which allows users to implement
their own customized trading strategies</p>
<p>A user can inherit from Strategy and optionally override any of the
“on” named event methods. The class is not entirely initialized in a stand-alone
way, the intended usage is to pass strategies to a Trader so that they can be
fully “wired” into the platform. Exceptions will be raised if a Strategy
attempts to operate without a managing Trader instance.</p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="class-strategy-1"><em>class</em> Strategy<a href="#class-strategy-1" class="hash-link" aria-label="Direct link to class-strategy-1" title="Direct link to class-strategy-1">​</a></h3>
<p>Bases: <a href="../common/index.htm#nautilus_trader.common.actor.Actor"><code>Actor</code></a></p>
<p>Strategy(config: StrategyConfig | None = None)</p>
<p>The base class for all trading strategies.</p>
<p>This class allows traders to implement their own customized trading strategies.
A trading strategy can configure its own order management system type, which
determines how positions are handled by the ExecutionEngine.</p>
<p>Strategy OMS (Order Management System) types:
: - <code>UNSPECIFIED</code>: No specific type has been configured, will therefore
default to the native OMS type for each venue.</p>
<ul>
<li><code>HEDGING</code>: A position ID will be assigned for each new position which
is opened per instrument.</li>
<li><code>NETTING</code>: There will only be a single position for the strategy per
instrument. The position ID naming convention is {instrument_id}-{strategy_id}.</li>
</ul>
<ul>
<li><strong>Parameters:</strong>
<strong>config</strong> (<a href="../config/index.htm#nautilus_trader.trading.config.StrategyConfig"><em>StrategyConfig</em></a> <em>,</em> <em>optional</em>) – The trading strategy configuration.</li>
<li><strong>Raises:</strong>
<strong>TypeError</strong> – If config is not of type StrategyConfig.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-82">WARNING<a href="#warning-82" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<ul>
<li>This class should not be used directly, but through a concrete subclass.</li>
<li>Do not call components such as clock and logger in the __init__ prior to registration.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="active_task_idsself--list-1">active_task_ids(self) → list<a href="#active_task_idsself--list-1" class="hash-link" aria-label="Direct link to active_task_ids(self) → list" title="Direct link to active_task_ids(self) → list">​</a></h4>
<p>Return the active task identifiers.</p>
<ul>
<li><strong>Return type:</strong>
list[<a href="../common/index.htm#nautilus_trader.common.executor.TaskId">TaskId</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="add_syntheticself-syntheticinstrument-synthetic--void-1">add_synthetic(self, SyntheticInstrument synthetic) → void<a href="#add_syntheticself-syntheticinstrument-synthetic--void-1" class="hash-link" aria-label="Direct link to add_synthetic(self, SyntheticInstrument synthetic) → void" title="Direct link to add_synthetic(self, SyntheticInstrument synthetic) → void">​</a></h4>
<p>Add the created synthetic instrument to the cache.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>synthetic</strong> (<a href="../model/instruments/index.htm#nautilus_trader.model.instruments.SyntheticInstrument"><em>SyntheticInstrument</em></a>) – The synthetic instrument to add to the cache.</li>
<li><strong>Raises:</strong>
<strong>KeyError</strong> – If synthetic is already in the cache.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="cache-1">cache<a href="#cache-1" class="hash-link" aria-label="Direct link to cache" title="Direct link to cache">​</a></h4>
<p>The read-only cache for the actor.</p>
<ul>
<li><strong>Returns:</strong>
CacheFacade</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="cancel_all_ordersself-instrumentid-instrument_id-orderside-order_sideordersideno_order_side-clientid-client_idnone-dict-paramsnone--void-1">cancel_all_orders(self, InstrumentId instrument_id, OrderSide order_side=OrderSide.NO_ORDER_SIDE, ClientId client_id=None, dict params=None) → void<a href="#cancel_all_ordersself-instrumentid-instrument_id-orderside-order_sideordersideno_order_side-clientid-client_idnone-dict-paramsnone--void-1" class="hash-link" aria-label="Direct link to cancel_all_orders(self, InstrumentId instrument_id, OrderSide order_side=OrderSide.NO_ORDER_SIDE, ClientId client_id=None, dict params=None) → void" title="Direct link to cancel_all_orders(self, InstrumentId instrument_id, OrderSide order_side=OrderSide.NO_ORDER_SIDE, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Cancel all orders for this strategy for the given instrument ID.</p>
<p>A CancelAllOrders command will be created and then sent to <strong>both</strong> the
OrderEmulator and the ExecutionEngine.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument for the orders to cancel.</li>
<li><strong>order_side</strong> (OrderSide, default <code>NO_ORDER_SIDE</code> (both sides)) – The side of the orders to cancel.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="cancel_all_tasksself--void-1">cancel_all_tasks(self) → void<a href="#cancel_all_tasksself--void-1" class="hash-link" aria-label="Direct link to cancel_all_tasks(self) → void" title="Direct link to cancel_all_tasks(self) → void">​</a></h4>
<p>Cancel all queued and active tasks.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="cancel_gtd_expiryself-order-order--void-1">cancel_gtd_expiry(self, Order order) → void<a href="#cancel_gtd_expiryself-order-order--void-1" class="hash-link" aria-label="Direct link to cancel_gtd_expiry(self, Order order) → void" title="Direct link to cancel_gtd_expiry(self, Order order) → void">​</a></h4>
<p>Cancel the managed GTD expiry for the given order.</p>
<p>If there is no current GTD expiry timer, then an error will be logged.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>order</strong> (<a href="../model/orders/index.htm#nautilus_trader.model.orders.Order"><em>Order</em></a>) – The order to cancel the GTD expiry for.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="cancel_orderself-order-order-clientid-client_idnone-dict-paramsnone--void-1">cancel_order(self, Order order, ClientId client_id=None, dict params=None) → void<a href="#cancel_orderself-order-order-clientid-client_idnone-dict-paramsnone--void-1" class="hash-link" aria-label="Direct link to cancel_order(self, Order order, ClientId client_id=None, dict params=None) → void" title="Direct link to cancel_order(self, Order order, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Cancel the given order with optional routing instructions.</p>
<p>A CancelOrder command will be created and then sent to <strong>either</strong> the
OrderEmulator or the ExecutionEngine (depending on whether the order is emulated).</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>order</strong> (<a href="../model/orders/index.htm#nautilus_trader.model.orders.Order"><em>Order</em></a>) – The order to cancel.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="cancel_ordersself-list-orders-clientid-client_idnone-dict-paramsnone--void-1">cancel_orders(self, list orders, ClientId client_id=None, dict params=None) → void<a href="#cancel_ordersself-list-orders-clientid-client_idnone-dict-paramsnone--void-1" class="hash-link" aria-label="Direct link to cancel_orders(self, list orders, ClientId client_id=None, dict params=None) → void" title="Direct link to cancel_orders(self, list orders, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Batch cancel the given list of orders with optional routing instructions.</p>
<p>For each order in the list, a CancelOrder command will be created and added to a
BatchCancelOrders command. This command is then sent to the ExecutionEngine.</p>
<p>Logs an error if the orders list contains local/emulated orders.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>orders</strong> (<em>list</em> <em>[</em><a href="../model/orders/index.htm#nautilus_trader.model.orders.Order"><em>Order</em></a> <em>]</em>) – The orders to cancel.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
<li><strong>Raises:</strong>
<ul>
<li><strong>ValueError</strong> – If orders is empty.</li>
<li><strong>TypeError</strong> – If orders contains a type other than Order.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="cancel_taskself-task_id-taskid--void-1">cancel_task(self, task_id: <a href="../common/index.htm#nautilus_trader.common.executor.TaskId">TaskId</a>) → void<a href="#cancel_taskself-task_id-taskid--void-1" class="hash-link" aria-label="Direct link to cancel_taskself-task_id-taskid--void-1" title="Direct link to cancel_taskself-task_id-taskid--void-1">​</a></h4>
<p>Cancel the task with the given task_id (if queued or active).</p>
<p>If the task is not found then a warning is logged.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>task_id</strong> (<a href="../common/index.htm#nautilus_trader.common.executor.TaskId"><em>TaskId</em></a>) – The task identifier.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="change_idself-strategyid-strategy_id--void-1">change_id(self, StrategyId strategy_id) → void<a href="#change_idself-strategyid-strategy_id--void-1" class="hash-link" aria-label="Direct link to change_id(self, StrategyId strategy_id) → void" title="Direct link to change_id(self, StrategyId strategy_id) → void">​</a></h4>
<p>Change the strategies identifier to the given strategy_id.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>strategy_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.StrategyId"><em>StrategyId</em></a>) – The new strategy ID to change to.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="change_order_id_tagself-str-order_id_tag--void-1">change_order_id_tag(self, str order_id_tag) → void<a href="#change_order_id_tagself-str-order_id_tag--void-1" class="hash-link" aria-label="Direct link to change_order_id_tag(self, str order_id_tag) → void" title="Direct link to change_order_id_tag(self, str order_id_tag) → void">​</a></h4>
<p>Change the order identifier tag to the given order_id_tag.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>order_id_tag</strong> (<em>str</em>) – The new order ID tag to change to.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="clock-1">clock<a href="#clock-1" class="hash-link" aria-label="Direct link to clock" title="Direct link to clock">​</a></h4>
<p>The actors clock.</p>
<ul>
<li><strong>Returns:</strong>
Clock</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="close_all_positionsself-instrumentid-instrument_id-positionside-position_sidepositionsideno_position_side-clientid-client_idnone-list-tagsnone-timeinforce-time_in_forcetimeinforcegtc-bool-reduce_onlytrue-dict-paramsnone--void-1">close_all_positions(self, InstrumentId instrument_id, PositionSide position_side=PositionSide.NO_POSITION_SIDE, ClientId client_id=None, list tags=None, TimeInForce time_in_force=TimeInForce.GTC, bool reduce_only=True, dict params=None) → void<a href="#close_all_positionsself-instrumentid-instrument_id-positionside-position_sidepositionsideno_position_side-clientid-client_idnone-list-tagsnone-timeinforce-time_in_forcetimeinforcegtc-bool-reduce_onlytrue-dict-paramsnone--void-1" class="hash-link" aria-label="Direct link to close_all_positions(self, InstrumentId instrument_id, PositionSide position_side=PositionSide.NO_POSITION_SIDE, ClientId client_id=None, list tags=None, TimeInForce time_in_force=TimeInForce.GTC, bool reduce_only=True, dict params=None) → void" title="Direct link to close_all_positions(self, InstrumentId instrument_id, PositionSide position_side=PositionSide.NO_POSITION_SIDE, ClientId client_id=None, list tags=None, TimeInForce time_in_force=TimeInForce.GTC, bool reduce_only=True, dict params=None) → void">​</a></h4>
<p>Close all positions for the given instrument ID for this strategy.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument for the positions to close.</li>
<li><strong>position_side</strong> (PositionSide, default <code>NO_POSITION_SIDE</code> (both sides)) – The side of the positions to close.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>tags</strong> (<em>list</em> *[*<em>str</em> <em>]</em> <em>,</em> <em>optional</em>) – The tags for the market orders closing the positions.</li>
<li><strong>time_in_force</strong> (TimeInForce, default <code>GTC</code>) – The time in force for the market orders closing the positions.</li>
<li><strong>reduce_only</strong> (<em>bool</em> <em>,</em> <em>default True</em>) – If the market orders to close positions should carry the ‘reduce-only’ execution instruction.
Optional, as not all venues support this feature.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="close_positionself-position-position-clientid-client_idnone-list-tagsnone-timeinforce-time_in_forcetimeinforcegtc-bool-reduce_onlytrue-dict-paramsnone--void-1">close_position(self, Position position, ClientId client_id=None, list tags=None, TimeInForce time_in_force=TimeInForce.GTC, bool reduce_only=True, dict params=None) → void<a href="#close_positionself-position-position-clientid-client_idnone-list-tagsnone-timeinforce-time_in_forcetimeinforcegtc-bool-reduce_onlytrue-dict-paramsnone--void-1" class="hash-link" aria-label="Direct link to close_position(self, Position position, ClientId client_id=None, list tags=None, TimeInForce time_in_force=TimeInForce.GTC, bool reduce_only=True, dict params=None) → void" title="Direct link to close_position(self, Position position, ClientId client_id=None, list tags=None, TimeInForce time_in_force=TimeInForce.GTC, bool reduce_only=True, dict params=None) → void">​</a></h4>
<p>Close the given position.</p>
<p>A closing MarketOrder for the position will be created, and then sent
to the ExecutionEngine via a SubmitOrder command.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>position</strong> (<a href="../model/index.htm#nautilus_trader.model.Position"><em>Position</em></a>) – The position to close.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>tags</strong> (<em>list</em> *[*<em>str</em> <em>]</em> <em>,</em> <em>optional</em>) – The tags for the market order closing the position.</li>
<li><strong>time_in_force</strong> (TimeInForce, default <code>GTC</code>) – The time in force for the market order closing the position.</li>
<li><strong>reduce_only</strong> (<em>bool</em> <em>,</em> <em>default True</em>) – If the market order to close the position should carry the ‘reduce-only’ execution instruction.
Optional, as not all venues support this feature.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="config-1">config<a href="#config-1" class="hash-link" aria-label="Direct link to config" title="Direct link to config">​</a></h4>
<p>The actors configuration.</p>
<ul>
<li><strong>Returns:</strong>
NautilusConfig</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="degradeself--void-1">degrade(self) → void<a href="#degradeself--void-1" class="hash-link" aria-label="Direct link to degrade(self) → void" title="Direct link to degrade(self) → void">​</a></h4>
<p>Degrade the component.</p>
<p>While executing on_degrade() any exception will be logged and reraised, then the component
will remain in a <code>DEGRADING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-83">WARNING<a href="#warning-83" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="deregister_warning_eventself-type-event--void-1">deregister_warning_event(self, type event) → void<a href="#deregister_warning_eventself-type-event--void-1" class="hash-link" aria-label="Direct link to deregister_warning_event(self, type event) → void" title="Direct link to deregister_warning_event(self, type event) → void">​</a></h4>
<p>Deregister the given event type from warning log levels.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>event</strong> (<em>type</em>) – The event class to deregister.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="disposeself--void-1">dispose(self) → void<a href="#disposeself--void-1" class="hash-link" aria-label="Direct link to dispose(self) → void" title="Direct link to dispose(self) → void">​</a></h4>
<p>Dispose of the component.</p>
<p>While executing on_dispose() any exception will be logged and reraised, then the component
will remain in a <code>DISPOSING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-84">WARNING<a href="#warning-84" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="external_order_claims-1">external_order_claims<a href="#external_order_claims-1" class="hash-link" aria-label="Direct link to external_order_claims" title="Direct link to external_order_claims">​</a></h4>
<p>The external order claims instrument IDs for the strategy.</p>
<ul>
<li><strong>Returns:</strong>
list[InstrumentId]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="faultself--void-1">fault(self) → void<a href="#faultself--void-1" class="hash-link" aria-label="Direct link to fault(self) → void" title="Direct link to fault(self) → void">​</a></h4>
<p>Fault the component.</p>
<p>Calling this method multiple times has the same effect as calling it once (it is idempotent).
Once called, it cannot be reversed, and no other methods should be called on this instance.</p>
<p>While executing on_fault() any exception will be logged and reraised, then the component
will remain in a <code>FAULTING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-85">WARNING<a href="#warning-85" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="classmethod-fully_qualified_namecls--str-2"><em>classmethod</em> fully_qualified_name(cls) → str<a href="#classmethod-fully_qualified_namecls--str-2" class="hash-link" aria-label="Direct link to classmethod-fully_qualified_namecls--str-2" title="Direct link to classmethod-fully_qualified_namecls--str-2">​</a></h4>
<p>Return the fully qualified name for the components class.</p>
<ul>
<li><strong>Return type:</strong>
str</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="greeks-1">greeks<a href="#greeks-1" class="hash-link" aria-label="Direct link to greeks" title="Direct link to greeks">​</a></h4>
<p>The read-only greeks calculator for the actor.</p>
<ul>
<li><strong>Returns:</strong>
GreeksCalculator</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_barself-bar-bar--void-1">handle_bar(self, Bar bar) → void<a href="#handle_barself-bar-bar--void-1" class="hash-link" aria-label="Direct link to handle_bar(self, Bar bar) → void" title="Direct link to handle_bar(self, Bar bar) → void">​</a></h4>
<p>Handle the given bar data.</p>
<p>If state is <code>RUNNING</code> then passes to on_bar.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>bar</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.Bar"><em>Bar</em></a>) – The bar received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-86">WARNING<a href="#warning-86" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_barsself-list-bars--void-1">handle_bars(self, list bars) → void<a href="#handle_barsself-list-bars--void-1" class="hash-link" aria-label="Direct link to handle_bars(self, list bars) → void" title="Direct link to handle_bars(self, list bars) → void">​</a></h4>
<p>Handle the given historical bar data by handling each bar individually.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>bars</strong> (<em>list</em> <em>[</em><a href="../model/data/index.htm#nautilus_trader.model.data.Bar"><em>Bar</em></a> <em>]</em>) – The bars to handle.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-87">WARNING<a href="#warning-87" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<ul>
<li><strong>Raises:</strong>
<strong>RuntimeError</strong> – If bar data has incorrectly sorted timestamps (not monotonically increasing).</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_dataself-data-data--void-1">handle_data(self, Data data) → void<a href="#handle_dataself-data-data--void-1" class="hash-link" aria-label="Direct link to handle_data(self, Data data) → void" title="Direct link to handle_data(self, Data data) → void">​</a></h4>
<p>Handle the given data.</p>
<p>If state is <code>RUNNING</code> then passes to on_data.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>data</strong> (<a href="../core/index.htm#nautilus_trader.core.Data"><em>Data</em></a>) – The data received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-88">WARNING<a href="#warning-88" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_eventself-event-event--void-2">handle_event(self, Event event) → void<a href="#handle_eventself-event-event--void-2" class="hash-link" aria-label="Direct link to handle_event(self, Event event) → void" title="Direct link to handle_event(self, Event event) → void">​</a></h4>
<p>Handle the given event.</p>
<p>If state is <code>RUNNING</code> then passes to on_event.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>event</strong> (<a href="../core/index.htm#nautilus_trader.core.Event"><em>Event</em></a>) – The event received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-89">WARNING<a href="#warning-89" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_historical_dataself-data--void-1">handle_historical_data(self, data) → void<a href="#handle_historical_dataself-data--void-1" class="hash-link" aria-label="Direct link to handle_historical_data(self, data) → void" title="Direct link to handle_historical_data(self, data) → void">​</a></h4>
<p>Handle the given historical data.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>data</strong> (<a href="../core/index.htm#nautilus_trader.core.Data"><em>Data</em></a>) – The historical data received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-90">WARNING<a href="#warning-90" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_index_priceself-indexpriceupdate-index_price--void-1">handle_index_price(self, IndexPriceUpdate index_price) → void<a href="#handle_index_priceself-indexpriceupdate-index_price--void-1" class="hash-link" aria-label="Direct link to handle_index_price(self, IndexPriceUpdate index_price) → void" title="Direct link to handle_index_price(self, IndexPriceUpdate index_price) → void">​</a></h4>
<p>Handle the given index price update.</p>
<p>If state is <code>RUNNING</code> then passes to on_index_price.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>index_price</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.IndexPriceUpdate"><em>IndexPriceUpdate</em></a>) – The index price update received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-91">WARNING<a href="#warning-91" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_instrumentself-instrument-instrument--void-1">handle_instrument(self, Instrument instrument) → void<a href="#handle_instrumentself-instrument-instrument--void-1" class="hash-link" aria-label="Direct link to handle_instrument(self, Instrument instrument) → void" title="Direct link to handle_instrument(self, Instrument instrument) → void">​</a></h4>
<p>Handle the given instrument.</p>
<p>Passes to on_instrument if state is <code>RUNNING</code>.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>instrument</strong> (<a href="../model/instruments/index.htm#nautilus_trader.model.instruments.Instrument"><em>Instrument</em></a>) – The instrument received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-92">WARNING<a href="#warning-92" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_instrument_closeself-instrumentclose-update--void-1">handle_instrument_close(self, InstrumentClose update) → void<a href="#handle_instrument_closeself-instrumentclose-update--void-1" class="hash-link" aria-label="Direct link to handle_instrument_close(self, InstrumentClose update) → void" title="Direct link to handle_instrument_close(self, InstrumentClose update) → void">​</a></h4>
<p>Handle the given instrument close update.</p>
<p>If state is <code>RUNNING</code> then passes to on_instrument_close.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>update</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.InstrumentClose"><em>InstrumentClose</em></a>) – The update received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-93">WARNING<a href="#warning-93" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_instrument_statusself-instrumentstatus-data--void-1">handle_instrument_status(self, InstrumentStatus data) → void<a href="#handle_instrument_statusself-instrumentstatus-data--void-1" class="hash-link" aria-label="Direct link to handle_instrument_status(self, InstrumentStatus data) → void" title="Direct link to handle_instrument_status(self, InstrumentStatus data) → void">​</a></h4>
<p>Handle the given instrument status update.</p>
<p>If state is <code>RUNNING</code> then passes to on_instrument_status.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>data</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.InstrumentStatus"><em>InstrumentStatus</em></a>) – The status update received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-94">WARNING<a href="#warning-94" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">  ​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_instrumentsself-list-instruments--void-1">handle_instruments(self, list instruments) → void<a href="#handle_instrumentsself-list-instruments--void-1" class="hash-link" aria-label="Direct link to handle_instruments(self, list instruments) → void" title="Direct link to handle_instruments(self, list instruments) → void">​</a></h4>
<p>Handle the given instruments data by handling each instrument individually.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>instruments</strong> (<em>list</em> <em>[</em><a href="../model/instruments/index.htm#nautilus_trader.model.instruments.Instrument"><em>Instrument</em></a> <em>]</em>) – The instruments received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-95">WARNING<a href="#warning-95" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_mark_priceself-markpriceupdate-mark_price--void-1">handle_mark_price(self, MarkPriceUpdate mark_price) → void<a href="#handle_mark_priceself-markpriceupdate-mark_price--void-1" class="hash-link" aria-label="Direct link to handle_mark_price(self, MarkPriceUpdate mark_price) → void" title="Direct link to handle_mark_price(self, MarkPriceUpdate mark_price) → void">​</a></h4>
<p>Handle the given mark price update.</p>
<p>If state is <code>RUNNING</code> then passes to on_mark_price.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>mark_price</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.MarkPriceUpdate"><em>MarkPriceUpdate</em></a>) – The mark price update received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-96">WARNING<a href="#warning-96" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_order_bookself-orderbook-order_book--void-1">handle_order_book(self, OrderBook order_book) → void<a href="#handle_order_bookself-orderbook-order_book--void-1" class="hash-link" aria-label="Direct link to handle_order_book(self, OrderBook order_book) → void" title="Direct link to handle_order_book(self, OrderBook order_book) → void">​</a></h4>
<p>Handle the given order book.</p>
<p>Passes to on_order_book if state is <code>RUNNING</code>.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>order_book</strong> (<a href="../model/book/index.htm#nautilus_trader.model.book.OrderBook"><em>OrderBook</em></a>) – The order book received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-97">WARNING<a href="#warning-97" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_order_book_deltasself-deltas--void-1">handle_order_book_deltas(self, deltas) → void<a href="#handle_order_book_deltasself-deltas--void-1" class="hash-link" aria-label="Direct link to handle_order_book_deltas(self, deltas) → void" title="Direct link to handle_order_book_deltas(self, deltas) → void">​</a></h4>
<p>Handle the given order book deltas.</p>
<p>Passes to on_order_book_deltas if state is <code>RUNNING</code>.
The deltas will be nautilus_pyo3.OrderBookDeltas if the
pyo3_conversion flag was set for the subscription.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>deltas</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.OrderBookDeltas"><em>OrderBookDeltas</em></a> <em>or</em> <em>nautilus_pyo3.OrderBookDeltas</em>) – The order book deltas received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-98">WARNING<a href="#warning-98" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_order_book_depthself-orderbookdepth10-depth--void-1">handle_order_book_depth(self, OrderBookDepth10 depth) → void<a href="#handle_order_book_depthself-orderbookdepth10-depth--void-1" class="hash-link" aria-label="Direct link to handle_order_book_depth(self, OrderBookDepth10 depth) → void" title="Direct link to handle_order_book_depth(self, OrderBookDepth10 depth) → void">​</a></h4>
<p>Handle the given order book depth</p>
<p>Passes to on_order_book_depth if state is <code>RUNNING</code>.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>depth</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.OrderBookDepth10"><em>OrderBookDepth10</em></a>) – The order book depth received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-99">WARNING<a href="#warning-99" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_quote_tickself-quotetick-tick--void-1">handle_quote_tick(self, QuoteTick tick) → void<a href="#handle_quote_tickself-quotetick-tick--void-1" class="hash-link" aria-label="Direct link to handle_quote_tick(self, QuoteTick tick) → void" title="Direct link to handle_quote_tick(self, QuoteTick tick) → void">​</a></h4>
<p>Handle the given quote tick.</p>
<p>If state is <code>RUNNING</code> then passes to on_quote_tick.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>tick</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.QuoteTick"><em>QuoteTick</em></a>) – The tick received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-100">WARNING<a href="#warning-100" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_quote_ticksself-list-ticks--void-1">handle_quote_ticks(self, list ticks) → void<a href="#handle_quote_ticksself-list-ticks--void-1" class="hash-link" aria-label="Direct link to handle_quote_ticks(self, list ticks) → void" title="Direct link to handle_quote_ticks(self, list ticks) → void">​</a></h4>
<p>Handle the given historical quote tick data by handling each tick individually.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>ticks</strong> (<em>list</em> <em>[</em><a href="../model/data/index.htm#nautilus_trader.model.data.QuoteTick"><em>QuoteTick</em></a> <em>]</em>) – The ticks received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-101">WARNING<a href="#warning-101" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_signalself-data-signal--void-1">handle_signal(self, Data signal) → void<a href="#handle_signalself-data-signal--void-1" class="hash-link" aria-label="Direct link to handle_signal(self, Data signal) → void" title="Direct link to handle_signal(self, Data signal) → void">​</a></h4>
<p>Handle the given signal.</p>
<p>If state is <code>RUNNING</code> then passes to on_signal.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>signal</strong> (<a href="../core/index.htm#nautilus_trader.core.Data"><em>Data</em></a>) – The signal received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-102">WARNING<a href="#warning-102" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_trade_tickself-tradetick-tick--void-1">handle_trade_tick(self, TradeTick tick) → void<a href="#handle_trade_tickself-tradetick-tick--void-1" class="hash-link" aria-label="Direct link to handle_trade_tick(self, TradeTick tick) → void" title="Direct link to handle_trade_tick(self, TradeTick tick) → void">​</a></h4>
<p>Handle the given trade tick.</p>
<p>If state is <code>RUNNING</code> then passes to on_trade_tick.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>tick</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.TradeTick"><em>TradeTick</em></a>) – The tick received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-103">WARNING<a href="#warning-103" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="handle_trade_ticksself-list-ticks--void-1">handle_trade_ticks(self, list ticks) → void<a href="#handle_trade_ticksself-list-ticks--void-1" class="hash-link" aria-label="Direct link to handle_trade_ticks(self, list ticks) → void" title="Direct link to handle_trade_ticks(self, list ticks) → void">​</a></h4>
<p>Handle the given historical trade tick data by handling each tick individually.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>ticks</strong> (<em>list</em> <em>[</em><a href="../model/data/index.htm#nautilus_trader.model.data.TradeTick"><em>TradeTick</em></a> <em>]</em>) – The ticks received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-104">WARNING<a href="#warning-104" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="has_active_tasksself--bool-1">has_active_tasks(self) → bool<a href="#has_active_tasksself--bool-1" class="hash-link" aria-label="Direct link to has_active_tasks(self) → bool" title="Direct link to has_active_tasks(self) → bool">​</a></h4>
<p>Return a value indicating whether there are any active tasks.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="has_any_tasksself--bool-1">has_any_tasks(self) → bool<a href="#has_any_tasksself--bool-1" class="hash-link" aria-label="Direct link to has_any_tasks(self) → bool" title="Direct link to has_any_tasks(self) → bool">​</a></h4>
<p>Return a value indicating whether there are any queued OR active tasks.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="has_pending_requestsself--bool-1">has_pending_requests(self) → bool<a href="#has_pending_requestsself--bool-1" class="hash-link" aria-label="Direct link to has_pending_requests(self) → bool" title="Direct link to has_pending_requests(self) → bool">​</a></h4>
<p>Return whether the actor is pending processing for any requests.</p>
<ul>
<li><strong>Returns:</strong>
True if any requests are pending, else False.</li>
<li><strong>Return type:</strong>
bool</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="has_queued_tasksself--bool-1">has_queued_tasks(self) → bool<a href="#has_queued_tasksself--bool-1" class="hash-link" aria-label="Direct link to has_queued_tasks(self) → bool" title="Direct link to has_queued_tasks(self) → bool">​</a></h4>
<p>Return a value indicating whether there are any queued tasks.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="id-1">id<a href="#id-1" class="hash-link" aria-label="Direct link to id" title="Direct link to id">​</a></h4>
<p>The components ID.</p>
<ul>
<li><strong>Returns:</strong>
ComponentId</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="indicators_initializedself--bool-1">indicators_initialized(self) → bool<a href="#indicators_initializedself--bool-1" class="hash-link" aria-label="Direct link to indicators_initialized(self) → bool" title="Direct link to indicators_initialized(self) → bool">​</a></h4>
<p>Return a value indicating whether all indicators are initialized.</p>
<ul>
<li><strong>Returns:</strong>
True if all initialized, else False</li>
<li><strong>Return type:</strong>
bool</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_degraded-1">is_degraded<a href="#is_degraded-1" class="hash-link" aria-label="Direct link to is_degraded" title="Direct link to is_degraded">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>DEGRADED</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_degraded</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_disposed-1">is_disposed<a href="#is_disposed-1" class="hash-link" aria-label="Direct link to is_disposed" title="Direct link to is_disposed">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>DISPOSED</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_disposed</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_faulted-1">is_faulted<a href="#is_faulted-1" class="hash-link" aria-label="Direct link to is_faulted" title="Direct link to is_faulted">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>FAULTED</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_faulted</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_initialized-1">is_initialized<a href="#is_initialized-1" class="hash-link" aria-label="Direct link to is_initialized" title="Direct link to is_initialized">​</a></h4>
<p>bool</p>
<p>Return whether the component has been initialized (component.state &gt;= <code>INITIALIZED</code>).</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_initialized</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_pending_requestself-uuid4-request_id--bool-1">is_pending_request(self, UUID4 request_id) → bool<a href="#is_pending_requestself-uuid4-request_id--bool-1" class="hash-link" aria-label="Direct link to is_pending_request(self, UUID4 request_id) → bool" title="Direct link to is_pending_request(self, UUID4 request_id) → bool">​</a></h4>
<p>Return whether the request for the given identifier is pending processing.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>request_id</strong> (<a href="../core/index.htm#nautilus_trader.core.UUID4"><em>UUID4</em></a>) – The request ID to check.</li>
<li><strong>Returns:</strong>
True if request is pending, else False.</li>
<li><strong>Return type:</strong>
bool</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_running-1">is_running<a href="#is_running-1" class="hash-link" aria-label="Direct link to is_running" title="Direct link to is_running">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>RUNNING</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_running</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_stopped-1">is_stopped<a href="#is_stopped-1" class="hash-link" aria-label="Direct link to is_stopped" title="Direct link to is_stopped">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>STOPPED</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_stopped</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="loadself-dict-state--void-1">load(self, dict state) → void<a href="#loadself-dict-state--void-1" class="hash-link" aria-label="Direct link to load(self, dict state) → void" title="Direct link to load(self, dict state) → void">​</a></h4>
<p>Load the actor/strategy state from the give state dictionary.</p>
<p>Calls on_load and passes the state.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>state</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>bytes</em> <em>]</em>) – The strategy state to load.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-105">WARNING<a href="#warning-105" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Exceptions raised will be caught, logged, and reraised.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="log-1">log<a href="#log-1" class="hash-link" aria-label="Direct link to log" title="Direct link to log">​</a></h4>
<p>The actors logger.</p>
<ul>
<li><strong>Returns:</strong>
Logger</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="manage_contingent_orders-1">manage_contingent_orders<a href="#manage_contingent_orders-1" class="hash-link" aria-label="Direct link to manage_contingent_orders" title="Direct link to manage_contingent_orders">​</a></h4>
<p>If contingent orders should be managed automatically by the strategy.</p>
<ul>
<li><strong>Returns:</strong>
bool</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="manage_gtd_expiry-1">manage_gtd_expiry<a href="#manage_gtd_expiry-1" class="hash-link" aria-label="Direct link to manage_gtd_expiry" title="Direct link to manage_gtd_expiry">​</a></h4>
<p>If all order GTD time in force expirations should be managed automatically by the strategy.</p>
<ul>
<li><strong>Returns:</strong>
bool</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="modify_orderself-order-order-quantity-quantitynone-price-pricenone-price-trigger_pricenone-clientid-client_idnone-dict-paramsnone--void-1">modify_order(self, Order order, Quantity quantity=None, Price price=None, Price trigger_price=None, ClientId client_id=None, dict params=None) → void<a href="#modify_orderself-order-order-quantity-quantitynone-price-pricenone-price-trigger_pricenone-clientid-client_idnone-dict-paramsnone--void-1" class="hash-link" aria-label="Direct link to modify_order(self, Order order, Quantity quantity=None, Price price=None, Price trigger_price=None, ClientId client_id=None, dict params=None) → void" title="Direct link to modify_order(self, Order order, Quantity quantity=None, Price price=None, Price trigger_price=None, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Modify the given order with optional parameters and routing instructions.</p>
<p>An ModifyOrder command will be created and then sent to <strong>either</strong> the
OrderEmulator or the RiskEngine (depending on whether the order is emulated).</p>
<p>At least one value must differ from the original order for the command to be valid.</p>
<p>Will use an Order Cancel/Replace Request (a.k.a Order Modification)
for FIX protocols, otherwise if order update is not available for
the API, then will cancel and replace with a new order using the
original ClientOrderId.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>order</strong> (<a href="../model/orders/index.htm#nautilus_trader.model.orders.Order"><em>Order</em></a>) – The order to update.</li>
<li><strong>quantity</strong> (<a href="../model/index.htm#nautilus_trader.model.Quantity"><em>Quantity</em></a> <em>,</em> <em>optional</em>) – The updated quantity for the given order.</li>
<li><strong>price</strong> (<a href="../model/index.htm#nautilus_trader.model.Price"><em>Price</em></a> <em>,</em> <em>optional</em>) – The updated price for the given order (if applicable).</li>
<li><strong>trigger_price</strong> (<a href="../model/index.htm#nautilus_trader.model.Price"><em>Price</em></a> <em>,</em> <em>optional</em>) – The updated trigger price for the given order (if applicable).</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
<li><strong>Raises:</strong>
<ul>
<li><strong>ValueError</strong> – If price is not <code>None</code> and order does not have a price.</li>
<li><strong>ValueError</strong> – If trigger is not <code>None</code> and order does not have a trigger_price.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-106">WARNING<a href="#warning-106" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>If the order is already closed or at PENDING_CANCEL status
then the command will not be generated, and a warning will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="msgbus-1">msgbus<a href="#msgbus-1" class="hash-link" aria-label="Direct link to msgbus" title="Direct link to msgbus">​</a></h4>
<p>The message bus for the actor (if registered).</p>
<ul>
<li><strong>Returns:</strong>
MessageBus or <code>None</code></li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="oms_type-1">oms_type<a href="#oms_type-1" class="hash-link" aria-label="Direct link to oms_type" title="Direct link to oms_type">​</a></h4>
<p>The order management system for the strategy.</p>
<ul>
<li><strong>Returns:</strong>
OmsType</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_barself-bar-bar--void-1">on_bar(self, Bar bar) → void<a href="#on_barself-bar-bar--void-1" class="hash-link" aria-label="Direct link to on_bar(self, Bar bar) → void" title="Direct link to on_bar(self, Bar bar) → void">​</a></h4>
<p>Actions to be performed when running and receives a bar.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>bar</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.Bar"><em>Bar</em></a>) – The bar received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-107">WARNING<a href="#warning-107" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_dataself-data--void-1">on_data(self, data) → void<a href="#on_dataself-data--void-1" class="hash-link" aria-label="Direct link to on_data(self, data) → void" title="Direct link to on_data(self, data) → void">​</a></h4>
<p>Actions to be performed when running and receives data.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>data</strong> (<a href="../core/index.htm#nautilus_trader.core.Data"><em>Data</em></a>) – The data received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-108">WARNING<a href="#warning-108" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_degradeself--void-1">on_degrade(self) → void<a href="#on_degradeself--void-1" class="hash-link" aria-label="Direct link to on_degrade(self) → void" title="Direct link to on_degrade(self) → void">​</a></h4>
<p>Actions to be performed on degrade.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-109">WARNING<a href="#warning-109" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<p>Should be overridden in the actor implementation.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_disposeself--void-1">on_dispose(self) → void<a href="#on_disposeself--void-1" class="hash-link" aria-label="Direct link to on_dispose(self) → void" title="Direct link to on_dispose(self) → void">​</a></h4>
<p>Actions to be performed on dispose.</p>
<p>Cleanup/release any resources used here.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-110">WARNING<a href="#warning-110" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_eventself-event-event--void-1">on_event(self, Event event) → void<a href="#on_eventself-event-event--void-1" class="hash-link" aria-label="Direct link to on_event(self, Event event) → void" title="Direct link to on_event(self, Event event) → void">​</a></h4>
<p>Actions to be performed running and receives an event.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>event</strong> (<a href="../core/index.htm#nautilus_trader.core.Event"><em>Event</em></a>) – The event received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-111">WARNING<a href="#warning-111" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_faultself--void-1">on_fault(self) → void<a href="#on_faultself--void-1" class="hash-link" aria-label="Direct link to on_fault(self) → void" title="Direct link to on_fault(self) → void">​</a></h4>
<p>Actions to be performed on fault.</p>
<p>Cleanup any resources used by the actor here.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-112">WARNING<a href="#warning-112" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<p>Should be overridden in the actor implementation.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_historical_dataself-data--void-1">on_historical_data(self, data) → void<a href="#on_historical_dataself-data--void-1" class="hash-link" aria-label="Direct link to on_historical_data(self, data) → void" title="Direct link to on_historical_data(self, data) → void">​</a></h4>
<p>Actions to be performed when running and receives historical data.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>data</strong> (<a href="../core/index.htm#nautilus_trader.core.Data"><em>Data</em></a>) – The historical data received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-113">WARNING<a href="#warning-113" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_index_priceself-indexpriceupdate-index_price--void-1">on_index_price(self, IndexPriceUpdate index_price) → void<a href="#on_index_priceself-indexpriceupdate-index_price--void-1" class="hash-link" aria-label="Direct link to on_index_price(self, IndexPriceUpdate index_price) → void" title="Direct link to on_index_price(self, IndexPriceUpdate index_price) → void">​</a></h4>
<p>Actions to be performed when running and receives an index price update.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>index_price</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.IndexPriceUpdate"><em>IndexPriceUpdate</em></a>) – The index price update received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-114">WARNING<a href="#warning-114" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_instrumentself-instrument-instrument--void-1">on_instrument(self, Instrument instrument) → void<a href="#on_instrumentself-instrument-instrument--void-1" class="hash-link" aria-label="Direct link to on_instrument(self, Instrument instrument) → void" title="Direct link to on_instrument(self, Instrument instrument) → void">​</a></h4>
<p>Actions to be performed when running and receives an instrument.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>instrument</strong> (<a href="../model/instruments/index.htm#nautilus_trader.model.instruments.Instrument"><em>Instrument</em></a>) – The instrument received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-115">WARNING<a href="#warning-115" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_instrument_closeself-instrumentclose-update--void-1">on_instrument_close(self, InstrumentClose update) → void<a href="#on_instrument_closeself-instrumentclose-update--void-1" class="hash-link" aria-label="Direct link to on_instrument_close(self, InstrumentClose update) → void" title="Direct link to on_instrument_close(self, InstrumentClose update) → void">​</a></h4>
<p>Actions to be performed when running and receives an instrument close
update.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>update</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.InstrumentClose"><em>InstrumentClose</em></a>) – The instrument close received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-116">WARNING<a href="#warning-116" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_instrument_statusself-instrumentstatus-data--void-1">on_instrument_status(self, InstrumentStatus data) → void<a href="#on_instrument_statusself-instrumentstatus-data--void-1" class="hash-link" aria-label="Direct link to on_instrument_status(self, InstrumentStatus data) → void" title="Direct link to on_instrument_status(self, InstrumentStatus data) → void">​</a></h4>
<p>Actions to be performed when running and receives an instrument status
update.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>data</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.InstrumentStatus"><em>InstrumentStatus</em></a>) – The instrument status update received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-117">WARNING<a href="#warning-117" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_loadself-dict-state--void-1">on_load(self, dict state) → void<a href="#on_loadself-dict-state--void-1" class="hash-link" aria-label="Direct link to on_load(self, dict state) → void" title="Direct link to on_load(self, dict state) → void">​</a></h4>
<p>Actions to be performed when the actor state is loaded.</p>
<p>Saved state values will be contained in the give state dictionary.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>state</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>bytes</em> <em>]</em>) – The strategy state to load.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-118">WARNING<a href="#warning-118" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_mark_priceself-markpriceupdate-mark_price--void-1">on_mark_price(self, MarkPriceUpdate mark_price) → void<a href="#on_mark_priceself-markpriceupdate-mark_price--void-1" class="hash-link" aria-label="Direct link to on_mark_price(self, MarkPriceUpdate mark_price) → void" title="Direct link to on_mark_price(self, MarkPriceUpdate mark_price) → void">​</a></h4>
<p>Actions to be performed when running and receives a mark price update.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>mark_price</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.MarkPriceUpdate"><em>MarkPriceUpdate</em></a>) – The mark price update received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-119">WARNING<a href="#warning-119" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_order_acceptedself-orderaccepted-event--void-1">on_order_accepted(self, OrderAccepted event) → void<a href="#on_order_acceptedself-orderaccepted-event--void-1" class="hash-link" aria-label="Direct link to on_order_accepted(self, OrderAccepted event) → void" title="Direct link to on_order_accepted(self, OrderAccepted event) → void">​</a></h4>
<p>Actions to be performed when running and receives an order accepted event.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>event</strong> (<a href="../model/events/index.htm#nautilus_trader.model.events.OrderAccepted"><em>OrderAccepted</em></a>) – The event received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-120">WARNING<a href="#warning-120" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_order_bookself-orderbook-order_book--void-1">on_order_book(self, OrderBook order_book) → void<a href="#on_order_bookself-orderbook-order_book--void-1" class="hash-link" aria-label="Direct link to on_order_book(self, OrderBook order_book) → void" title="Direct link to on_order_book(self, OrderBook order_book) → void">​</a></h4>
<p>Actions to be performed when running and receives an order book.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>order_book</strong> (<a href="../model/book/index.htm#nautilus_trader.model.book.OrderBook"><em>OrderBook</em></a>) – The order book received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-121">WARNING<a href="#warning-121" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_order_book_deltasself-deltas--void-1">on_order_book_deltas(self, deltas) → void<a href="#on_order_book_deltasself-deltas--void-1" class="hash-link" aria-label="Direct link to on_order_book_deltas(self, deltas) → void" title="Direct link to on_order_book_deltas(self, deltas) → void">​</a></h4>
<p>Actions to be performed when running and receives order book deltas.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>deltas</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.OrderBookDeltas"><em>OrderBookDeltas</em></a> <em>or</em> <em>nautilus_pyo3.OrderBookDeltas</em>) – The order book deltas received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-122">WARNING<a href="#warning-122" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_order_book_depthself-depth--void-1">on_order_book_depth(self, depth) → void<a href="#on_order_book_depthself-depth--void-1" class="hash-link" aria-label="Direct link to on_order_book_depth(self, depth) → void" title="Direct link to on_order_book_depth(self, depth) → void">​</a></h4>
<p>Actions to be performed when running and receives an order book depth.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>depth</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.OrderBookDepth10"><em>OrderBookDepth10</em></a>) – The order book depth received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-123">WARNING<a href="#warning-123" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_order_cancel_rejectedself-ordercancelrejected-event--void-1">on_order_cancel_rejected(self, OrderCancelRejected event) → void<a href="#on_order_cancel_rejectedself-ordercancelrejected-event--void-1" class="hash-link" aria-label="Direct link to on_order_cancel_rejected(self, OrderCancelRejected event) → void" title="Direct link to on_order_cancel_rejected(self, OrderCancelRejected event) → void">​</a></h4>
<p>Actions to be performed when running and receives an order cancel rejected event.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>event</strong> (<a href="../model/events/index.htm#nautilus_trader.model.events.OrderCancelRejected"><em>OrderCancelRejected</em></a>) – The event received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-124">WARNING<a href="#warning-124" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_order_canceledself-ordercanceled-event--void-1">on_order_canceled(self, OrderCanceled event) → void<a href="#on_order_canceledself-ordercanceled-event--void-1" class="hash-link" aria-label="Direct link to on_order_canceled(self, OrderCanceled event) → void" title="Direct link to on_order_canceled(self, OrderCanceled event) → void">​</a></h4>
<p>Actions to be performed when running and receives an order canceled event.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>event</strong> (<a href="../model/events/index.htm#nautilus_trader.model.events.OrderCanceled"><em>OrderCanceled</em></a>) – The event received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-125">WARNING<a href="#warning-125" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_order_deniedself-orderdenied-event--void-1">on_order_denied(self, OrderDenied event) → void<a href="#on_order_deniedself-orderdenied-event--void-1" class="hash-link" aria-label="Direct link to on_order_denied(self, OrderDenied event) → void" title="Direct link to on_order_denied(self, OrderDenied event) → void">​</a></h4>
<p>Actions to be performed when running and receives an order denied event.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>event</strong> (<a href="../model/events/index.htm#nautilus_trader.model.events.OrderDenied"><em>OrderDenied</em></a>) – The event received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-126">WARNING<a href="#warning-126" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_order_emulatedself-orderemulated-event--void-1">on_order_emulated(self, OrderEmulated event) → void<a href="#on_order_emulatedself-orderemulated-event--void-1" class="hash-link" aria-label="Direct link to on_order_emulated(self, OrderEmulated event) → void" title="Direct link to on_order_emulated(self, OrderEmulated event) → void">​</a></h4>
<p>Actions to be performed when running and receives an order emulated event.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>event</strong> (<a href="../model/events/index.htm#nautilus_trader.model.events.OrderEmulated"><em>OrderEmulated</em></a>) – The event received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-127">WARNING<a href="#warning-127" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_order_eventself-orderevent-event--void-1">on_order_event(self, OrderEvent event) → void<a href="#on_order_eventself-orderevent-event--void-1" class="hash-link" aria-label="Direct link to on_order_event(self, OrderEvent event) → void" title="Direct link to on_order_event(self, OrderEvent event) → void">​</a></h4>
<p>Actions to be performed when running and receives an order event.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>event</strong> (<a href="../model/events/index.htm#nautilus_trader.model.events.OrderEvent"><em>OrderEvent</em></a>) – The event received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-128">WARNING<a href="#warning-128" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_order_expiredself-orderexpired-event--void-1">on_order_expired(self, OrderExpired event) → void<a href="#on_order_expiredself-orderexpired-event--void-1" class="hash-link" aria-label="Direct link to on_order_expired(self, OrderExpired event) → void" title="Direct link to on_order_expired(self, OrderExpired event) → void">​</a></h4>
<p>Actions to be performed when running and receives an order expired event.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>event</strong> (<a href="../model/events/index.htm#nautilus_trader.model.events.OrderExpired"><em>OrderExpired</em></a>) – The event received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-129">WARNING<a href="#warning-129" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_order_filledself-orderfilled-event--void-1">on_order_filled(self, OrderFilled event) → void<a href="#on_order_filledself-orderfilled-event--void-1" class="hash-link" aria-label="Direct link to on_order_filled(self, OrderFilled event) → void" title="Direct link to on_order_filled(self, OrderFilled event) → void">​</a></h4>
<p>Actions to be performed when running and receives an order filled event.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>event</strong> (<a href="../model/events/index.htm#nautilus_trader.model.events.OrderFilled"><em>OrderFilled</em></a>) – The event received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-130">WARNING<a href="#warning-130" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_order_initializedself-orderinitialized-event--void-1">on_order_initialized(self, OrderInitialized event) → void<a href="#on_order_initializedself-orderinitialized-event--void-1" class="hash-link" aria-label="Direct link to on_order_initialized(self, OrderInitialized event) → void" title="Direct link to on_order_initialized(self, OrderInitialized event) → void">​</a></h4>
<p>Actions to be performed when running and receives an order initialized event.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>event</strong> (<a href="../model/events/index.htm#nautilus_trader.model.events.OrderInitialized"><em>OrderInitialized</em></a>) – The event received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-131">WARNING<a href="#warning-131" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_order_modify_rejectedself-ordermodifyrejected-event--void-1">on_order_modify_rejected(self, OrderModifyRejected event) → void<a href="#on_order_modify_rejectedself-ordermodifyrejected-event--void-1" class="hash-link" aria-label="Direct link to on_order_modify_rejected(self, OrderModifyRejected event) → void" title="Direct link to on_order_modify_rejected(self, OrderModifyRejected event) → void">​</a></h4>
<p>Actions to be performed when running and receives an order modify rejected event.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>event</strong> (<a href="../model/events/index.htm#nautilus_trader.model.events.OrderModifyRejected"><em>OrderModifyRejected</em></a>) – The event received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-132">WARNING<a href="#warning-132" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_order_pending_cancelself-orderpendingcancel-event--void-1">on_order_pending_cancel(self, OrderPendingCancel event) → void<a href="#on_order_pending_cancelself-orderpendingcancel-event--void-1" class="hash-link" aria-label="Direct link to on_order_pending_cancel(self, OrderPendingCancel event) → void" title="Direct link to on_order_pending_cancel(self, OrderPendingCancel event) → void">​</a></h4>
<p>Actions to be performed when running and receives an order pending cancel event.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>event</strong> (<a href="../model/events/index.htm#nautilus_trader.model.events.OrderPendingCancel"><em>OrderPendingCancel</em></a>) – The event received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-133">WARNING<a href="#warning-133" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_order_pending_updateself-orderpendingupdate-event--void-1">on_order_pending_update(self, OrderPendingUpdate event) → void<a href="#on_order_pending_updateself-orderpendingupdate-event--void-1" class="hash-link" aria-label="Direct link to on_order_pending_update(self, OrderPendingUpdate event) → void" title="Direct link to on_order_pending_update(self, OrderPendingUpdate event) → void">​</a></h4>
<p>Actions to be performed when running and receives an order pending update event.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>event</strong> (<a href="../model/events/index.htm#nautilus_trader.model.events.OrderPendingUpdate"><em>OrderPendingUpdate</em></a>) – The event received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-134">WARNING<a href="#warning-134" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_order_rejectedself-orderrejected-event--void-1">on_order_rejected(self, OrderRejected event) → void<a href="#on_order_rejectedself-orderrejected-event--void-1" class="hash-link" aria-label="Direct link to on_order_rejected(self, OrderRejected event) → void" title="Direct link to on_order_rejected(self, OrderRejected event) → void">​</a></h4>
<p>Actions to be performed when running and receives an order rejected event.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>event</strong> (<a href="../model/events/index.htm#nautilus_trader.model.events.OrderRejected"><em>OrderRejected</em></a>) – The event received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-135">WARNING<a href="#warning-135" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_order_releasedself-orderreleased-event--void-1">on_order_released(self, OrderReleased event) → void<a href="#on_order_releasedself-orderreleased-event--void-1" class="hash-link" aria-label="Direct link to on_order_released(self, OrderReleased event) → void" title="Direct link to on_order_released(self, OrderReleased event) → void">​</a></h4>
<p>Actions to be performed when running and receives an order released event.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>event</strong> (<a href="../model/events/index.htm#nautilus_trader.model.events.OrderReleased"><em>OrderReleased</em></a>) – The event received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-136">WARNING<a href="#warning-136" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_order_submittedself-ordersubmitted-event--void-1">on_order_submitted(self, OrderSubmitted event) → void<a href="#on_order_submittedself-ordersubmitted-event--void-1" class="hash-link" aria-label="Direct link to on_order_submitted(self, OrderSubmitted event) → void" title="Direct link to on_order_submitted(self, OrderSubmitted event) → void">​</a></h4>
<p>Actions to be performed when running and receives an order submitted event.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>event</strong> (<a href="../model/events/index.htm#nautilus_trader.model.events.OrderSubmitted"><em>OrderSubmitted</em></a>) – The event received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-137">WARNING<a href="#warning-137" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_order_triggeredself-ordertriggered-event--void-1">on_order_triggered(self, OrderTriggered event) → void<a href="#on_order_triggeredself-ordertriggered-event--void-1" class="hash-link" aria-label="Direct link to on_order_triggered(self, OrderTriggered event) → void" title="Direct link to on_order_triggered(self, OrderTriggered event) → void">​</a></h4>
<p>Actions to be performed when running and receives an order triggered event.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>event</strong> (<a href="../model/events/index.htm#nautilus_trader.model.events.OrderTriggered"><em>OrderTriggered</em></a>) – The event received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-138">WARNING<a href="#warning-138" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_order_updatedself-orderupdated-event--void-1">on_order_updated(self, OrderUpdated event) → void<a href="#on_order_updatedself-orderupdated-event--void-1" class="hash-link" aria-label="Direct link to on_order_updated(self, OrderUpdated event) → void" title="Direct link to on_order_updated(self, OrderUpdated event) → void">​</a></h4>
<p>Actions to be performed when running and receives an order updated event.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>event</strong> (<a href="../model/events/index.htm#nautilus_trader.model.events.OrderUpdated"><em>OrderUpdated</em></a>) – The event received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-139">WARNING<a href="#warning-139" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_position_changedself-positionchanged-event--void-1">on_position_changed(self, PositionChanged event) → void<a href="#on_position_changedself-positionchanged-event--void-1" class="hash-link" aria-label="Direct link to on_position_changed(self, PositionChanged event) → void" title="Direct link to on_position_changed(self, PositionChanged event) → void">​</a></h4>
<p>Actions to be performed when running and receives a position changed event.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>event</strong> (<a href="../model/events/index.htm#nautilus_trader.model.events.PositionChanged"><em>PositionChanged</em></a>) – The event received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-140">WARNING<a href="#warning-140" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_position_closedself-positionclosed-event--void-1">on_position_closed(self, PositionClosed event) → void<a href="#on_position_closedself-positionclosed-event--void-1" class="hash-link" aria-label="Direct link to on_position_closed(self, PositionClosed event) → void" title="Direct link to on_position_closed(self, PositionClosed event) → void">​</a></h4>
<p>Actions to be performed when running and receives a position closed event.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>event</strong> (<a href="../model/events/index.htm#nautilus_trader.model.events.PositionClosed"><em>PositionClosed</em></a>) – The event received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-141">WARNING<a href="#warning-141" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_position_eventself-positionevent-event--void-1">on_position_event(self, PositionEvent event) → void<a href="#on_position_eventself-positionevent-event--void-1" class="hash-link" aria-label="Direct link to on_position_event(self, PositionEvent event) → void" title="Direct link to on_position_event(self, PositionEvent event) → void">​</a></h4>
<p>Actions to be performed when running and receives a position event.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>event</strong> (<a href="../model/events/index.htm#nautilus_trader.model.events.PositionEvent"><em>PositionEvent</em></a>) – The event received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-142">WARNING<a href="#warning-142" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_position_openedself-positionopened-event--void-1">on_position_opened(self, PositionOpened event) → void<a href="#on_position_openedself-positionopened-event--void-1" class="hash-link" aria-label="Direct link to on_position_opened(self, PositionOpened event) → void" title="Direct link to on_position_opened(self, PositionOpened event) → void">​</a></h4>
<p>Actions to be performed when running and receives a position opened event.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>event</strong> (<a href="../model/events/index.htm#nautilus_trader.model.events.PositionOpened"><em>PositionOpened</em></a>) – The event received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-143">WARNING<a href="#warning-143" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_quote_tickself-quotetick-tick--void-1">on_quote_tick(self, QuoteTick tick) → void<a href="#on_quote_tickself-quotetick-tick--void-1" class="hash-link" aria-label="Direct link to on_quote_tick(self, QuoteTick tick) → void" title="Direct link to on_quote_tick(self, QuoteTick tick) → void">​</a></h4>
<p>Actions to be performed when running and receives a quote tick.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>tick</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.QuoteTick"><em>QuoteTick</em></a>) – The tick received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-144">WARNING<a href="#warning-144" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_resetself--void-2">on_reset(self) → void<a href="#on_resetself--void-2" class="hash-link" aria-label="Direct link to on_reset(self) → void" title="Direct link to on_reset(self) → void">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_resumeself--void-2">on_resume(self) → void<a href="#on_resumeself--void-2" class="hash-link" aria-label="Direct link to on_resume(self) → void" title="Direct link to on_resume(self) → void">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_saveself--dict-1">on_save(self) → dict<a href="#on_saveself--dict-1" class="hash-link" aria-label="Direct link to on_save(self) → dict" title="Direct link to on_save(self) → dict">​</a></h4>
<p>Actions to be performed when the actor state is saved.</p>
<p>Create and return a state dictionary of values to be saved.</p>
<ul>
<li><strong>Returns:</strong>
The strategy state to save.</li>
<li><strong>Return type:</strong>
dict[str, bytes]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-145">WARNING<a href="#warning-145" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_signalself-signal--void-1">on_signal(self, signal) → void<a href="#on_signalself-signal--void-1" class="hash-link" aria-label="Direct link to on_signal(self, signal) → void" title="Direct link to on_signal(self, signal) → void">​</a></h4>
<p>Actions to be performed when running and receives signal data.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>signal</strong> (<a href="../core/index.htm#nautilus_trader.core.Data"><em>Data</em></a>) – The signal received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-146">WARNING<a href="#warning-146" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_startself--void-2">on_start(self) → void<a href="#on_startself--void-2" class="hash-link" aria-label="Direct link to on_start(self) → void" title="Direct link to on_start(self) → void">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_stopself--void-2">on_stop(self) → void<a href="#on_stopself--void-2" class="hash-link" aria-label="Direct link to on_stop(self) → void" title="Direct link to on_stop(self) → void">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="on_trade_tickself-tradetick-tick--void-1">on_trade_tick(self, TradeTick tick) → void<a href="#on_trade_tickself-tradetick-tick--void-1" class="hash-link" aria-label="Direct link to on_trade_tick(self, TradeTick tick) → void" title="Direct link to on_trade_tick(self, TradeTick tick) → void">​</a></h4>
<p>Actions to be performed when running and receives a trade tick.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>tick</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.TradeTick"><em>TradeTick</em></a>) – The tick received.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-147">WARNING<a href="#warning-147" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="order_factory-1">order_factory<a href="#order_factory-1" class="hash-link" aria-label="Direct link to order_factory" title="Direct link to order_factory">​</a></h4>
<p>The order factory for the strategy.</p>
<ul>
<li><strong>Returns:</strong>
OrderFactory</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="order_id_tag-1">order_id_tag<a href="#order_id_tag-1" class="hash-link" aria-label="Direct link to order_id_tag" title="Direct link to order_id_tag">​</a></h4>
<p>The order ID tag for the strategy.</p>
<ul>
<li><strong>Returns:</strong>
str</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="pending_requestsself--set-1">pending_requests(self) → set<a href="#pending_requestsself--set-1" class="hash-link" aria-label="Direct link to pending_requests(self) → set" title="Direct link to pending_requests(self) → set">​</a></h4>
<p>Return the request IDs which are currently pending processing.</p>
<ul>
<li><strong>Return type:</strong>
set[<a href="../core/index.htm#nautilus_trader.core.UUID4">UUID4</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="portfolio-1">portfolio<a href="#portfolio-1" class="hash-link" aria-label="Direct link to portfolio" title="Direct link to portfolio">​</a></h4>
<p>The read-only portfolio for the actor.</p>
<ul>
<li><strong>Returns:</strong>
PortfolioFacade</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="publish_dataself-datatype-data_type-data-data--void-1">publish_data(self, DataType data_type, Data data) → void<a href="#publish_dataself-datatype-data_type-data-data--void-1" class="hash-link" aria-label="Direct link to publish_data(self, DataType data_type, Data data) → void" title="Direct link to publish_data(self, DataType data_type, Data data) → void">​</a></h4>
<p>Publish the given data to the message bus.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>data_type</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.DataType"><em>DataType</em></a>) – The data type being published.</li>
<li><strong>data</strong> (<a href="../core/index.htm#nautilus_trader.core.Data"><em>Data</em></a>) – The data to publish.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="publish_signalself-str-name-value-uint64_t-ts_event0--void-1">publish_signal(self, str name, value, uint64_t ts_event=0) → void<a href="#publish_signalself-str-name-value-uint64_t-ts_event0--void-1" class="hash-link" aria-label="Direct link to publish_signal(self, str name, value, uint64_t ts_event=0) → void" title="Direct link to publish_signal(self, str name, value, uint64_t ts_event=0) → void">​</a></h4>
<p>Publish the given value as a signal to the message bus.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>name</strong> (<em>str</em>) – The name of the signal being published.
The signal name will be converted to title case, with each word capitalized
(e.g., ‘example’ becomes ‘SignalExample’).</li>
<li><strong>value</strong> (<em>object</em>) – The signal data to publish.</li>
<li><strong>ts_event</strong> (<em>uint64_t</em> <em>,</em> <em>optional</em>) – UNIX timestamp (nanoseconds) when the signal event occurred.
If <code>None</code> then will timestamp current time.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="query_orderself-order-order-clientid-client_idnone-dict-paramsnone--void-1">query_order(self, Order order, ClientId client_id=None, dict params=None) → void<a href="#query_orderself-order-order-clientid-client_idnone-dict-paramsnone--void-1" class="hash-link" aria-label="Direct link to query_order(self, Order order, ClientId client_id=None, dict params=None) → void" title="Direct link to query_order(self, Order order, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Query the given order with optional routing instructions.</p>
<p>A QueryOrder command will be created and then sent to the
ExecutionEngine.</p>
<p>Logs an error if no VenueOrderId has been assigned to the order.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>order</strong> (<a href="../model/orders/index.htm#nautilus_trader.model.orders.Order"><em>Order</em></a>) – The order to query.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="queue_for_executorself-func-callable-any-tuple-argsnone-dict-kwargsnone-1">queue_for_executor(self, func: Callable[..., Any], tuple args=None, dict kwargs=None)<a href="#queue_for_executorself-func-callable-any-tuple-argsnone-dict-kwargsnone-1" class="hash-link" aria-label="Direct link to queue_for_executor(self, func: Callable[..., Any], tuple args=None, dict kwargs=None)" title="Direct link to queue_for_executor(self, func: Callable[..., Any], tuple args=None, dict kwargs=None)">​</a></h4>
<p>Queues the callable func to be executed as fn(*args, **kwargs) sequentially.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>func</strong> (<em>Callable</em>) – The function to be executed.</li>
<li><strong>args</strong> (<em>positional arguments</em>) – The positional arguments for the call to func.</li>
<li><strong>kwargs</strong> (<em>arbitrary keyword arguments</em>) – The keyword arguments for the call to func.</li>
</ul>
</li>
<li><strong>Raises:</strong>
<strong>TypeError</strong> – If func is not of type Callable.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="queued_task_idsself--list-1">queued_task_ids(self) → list<a href="#queued_task_idsself--list-1" class="hash-link" aria-label="Direct link to queued_task_ids(self) → list" title="Direct link to queued_task_ids(self) → list">​</a></h4>
<p>Return the queued task identifiers.</p>
<ul>
<li><strong>Return type:</strong>
list[<a href="../common/index.htm#nautilus_trader.common.executor.TaskId">TaskId</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="registerself-traderid-trader_id-portfoliofacade-portfolio-messagebus-msgbus-cachefacade-cache-clock-clock--void-1">register(self, TraderId trader_id, PortfolioFacade portfolio, MessageBus msgbus, CacheFacade cache, Clock clock) → void<a href="#registerself-traderid-trader_id-portfoliofacade-portfolio-messagebus-msgbus-cachefacade-cache-clock-clock--void-1" class="hash-link" aria-label="Direct link to register(self, TraderId trader_id, PortfolioFacade portfolio, MessageBus msgbus, CacheFacade cache, Clock clock) → void" title="Direct link to register(self, TraderId trader_id, PortfolioFacade portfolio, MessageBus msgbus, CacheFacade cache, Clock clock) → void">​</a></h4>
<p>Register the strategy with a trader.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>trader_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.TraderId"><em>TraderId</em></a>) – The trader ID for the strategy.</li>
<li><strong>portfolio</strong> (<a href="../portfolio/index.htm#nautilus_trader.portfolio.PortfolioFacade"><em>PortfolioFacade</em></a>) – The read-only portfolio for the strategy.</li>
<li><strong>msgbus</strong> (<a href="../common/index.htm#nautilus_trader.common.component.MessageBus"><em>MessageBus</em></a>) – The message bus for the strategy.</li>
<li><strong>cache</strong> (<a href="../cache/index.htm#nautilus_trader.cache.base.CacheFacade"><em>CacheFacade</em></a>) – The read-only cache for the strategy.</li>
<li><strong>clock</strong> (<a href="../common/index.htm#nautilus_trader.common.component.Clock"><em>Clock</em></a>) – The clock for the strategy.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-148">WARNING<a href="#warning-148" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="register_baseself-portfoliofacade-portfolio-messagebus-msgbus-cachefacade-cache-clock-clock--void-2">register_base(self, PortfolioFacade portfolio, MessageBus msgbus, CacheFacade cache, Clock clock) → void<a href="#register_baseself-portfoliofacade-portfolio-messagebus-msgbus-cachefacade-cache-clock-clock--void-2" class="hash-link" aria-label="Direct link to register_base(self, PortfolioFacade portfolio, MessageBus msgbus, CacheFacade cache, Clock clock) → void" title="Direct link to register_base(self, PortfolioFacade portfolio, MessageBus msgbus, CacheFacade cache, Clock clock) → void">​</a></h4>
<p>Register with a trader.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>portfolio</strong> (<a href="../portfolio/index.htm#nautilus_trader.portfolio.PortfolioFacade"><em>PortfolioFacade</em></a>) – The read-only portfolio for the actor.</li>
<li><strong>msgbus</strong> (<a href="../common/index.htm#nautilus_trader.common.component.MessageBus"><em>MessageBus</em></a>) – The message bus for the actor.</li>
<li><strong>cache</strong> (<a href="../cache/index.htm#nautilus_trader.cache.base.CacheFacade"><em>CacheFacade</em></a>) – The read-only cache for the actor.</li>
<li><strong>clock</strong> (<a href="../common/index.htm#nautilus_trader.common.component.Clock"><em>Clock</em></a>) – The clock for the actor.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-149">WARNING<a href="#warning-149" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>System method (not intended to be called by user code).</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="register_executorself-loop-asyncioabstracteventloop-executor-executor--void-1">register_executor(self, loop: asyncio.AbstractEventLoop, executor: Executor) → void<a href="#register_executorself-loop-asyncioabstracteventloop-executor-executor--void-1" class="hash-link" aria-label="Direct link to register_executor(self, loop: asyncio.AbstractEventLoop, executor: Executor) → void" title="Direct link to register_executor(self, loop: asyncio.AbstractEventLoop, executor: Executor) → void">​</a></h4>
<p>Register the given Executor for the actor.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>loop</strong> (<em>asyncio.AbstractEventLoop</em>) – The event loop of the application.</li>
<li><strong>executor</strong> (<em>concurrent.futures.Executor</em>) – The executor to register.</li>
</ul>
</li>
<li><strong>Raises:</strong>
<strong>TypeError</strong> – If executor is not of type concurrent.futures.Executor</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="register_indicator_for_barsself-bartype-bar_type-indicator-indicator--void-1">register_indicator_for_bars(self, BarType bar_type, Indicator indicator) → void<a href="#register_indicator_for_barsself-bartype-bar_type-indicator-indicator--void-1" class="hash-link" aria-label="Direct link to register_indicator_for_bars(self, BarType bar_type, Indicator indicator) → void" title="Direct link to register_indicator_for_bars(self, BarType bar_type, Indicator indicator) → void">​</a></h4>
<p>Register the given indicator with the actor/strategy to receive bar data for the
given bar type.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>bar_type</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.BarType"><em>BarType</em></a>) – The bar type for bar updates.</li>
<li><strong>indicator</strong> (<a href="../indicators/index.htm#nautilus_trader.indicators.base.indicator.Indicator"><em>Indicator</em></a>) – The indicator to register.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="register_indicator_for_quote_ticksself-instrumentid-instrument_id-indicator-indicator--void-1">register_indicator_for_quote_ticks(self, InstrumentId instrument_id, Indicator indicator) → void<a href="#register_indicator_for_quote_ticksself-instrumentid-instrument_id-indicator-indicator--void-1" class="hash-link" aria-label="Direct link to register_indicator_for_quote_ticks(self, InstrumentId instrument_id, Indicator indicator) → void" title="Direct link to register_indicator_for_quote_ticks(self, InstrumentId instrument_id, Indicator indicator) → void">​</a></h4>
<p>Register the given indicator with the actor/strategy to receive quote tick
data for the given instrument ID.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument ID for tick updates.</li>
<li><strong>indicator</strong> (<a href="../indicators/index.htm#nautilus_trader.indicators.base.indicator.Indicator"><em>Indicator</em></a>) – The indicator to register.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="register_indicator_for_trade_ticksself-instrumentid-instrument_id-indicator-indicator--void-1">register_indicator_for_trade_ticks(self, InstrumentId instrument_id, Indicator indicator) → void<a href="#register_indicator_for_trade_ticksself-instrumentid-instrument_id-indicator-indicator--void-1" class="hash-link" aria-label="Direct link to register_indicator_for_trade_ticks(self, InstrumentId instrument_id, Indicator indicator) → void" title="Direct link to register_indicator_for_trade_ticks(self, InstrumentId instrument_id, Indicator indicator) → void">​</a></h4>
<p>Register the given indicator with the actor/strategy to receive trade tick
data for the given instrument ID.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument ID for tick updates.</li>
<li><strong>indicator</strong> (<em>indicator</em>) – The indicator to register.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="register_warning_eventself-type-event--void-1">register_warning_event(self, type event) → void<a href="#register_warning_eventself-type-event--void-1" class="hash-link" aria-label="Direct link to register_warning_event(self, type event) → void" title="Direct link to register_warning_event(self, type event) → void">​</a></h4>
<p>Register the given event type for warning log levels.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>event</strong> (<em>type</em>) – The event class to register.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="registered_indicators-1">registered_indicators<a href="#registered_indicators-1" class="hash-link" aria-label="Direct link to registered_indicators" title="Direct link to registered_indicators">​</a></h4>
<p>Return the registered indicators for the strategy.</p>
<ul>
<li><strong>Return type:</strong>
list[<a href="../indicators/index.htm#nautilus_trader.indicators.base.indicator.Indicator">Indicator</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="request_aggregated_barsself-list-bar_types-datetime-startnone-datetime-endnone-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-bool-include_external_datafalse-bool-update_subscriptionsfalse-update_catalog-bool--false-dict-paramsnone--uuid4-1">request_aggregated_bars(self, list bar_types, datetime start=None, datetime end=None, int limit=0, ClientId client_id=None, callback: Callable[[UUID4], None] | None = None, bool include_external_data=False, bool update_subscriptions=False, update_catalog: bool = False, dict params=None) → <a href="../core/index.htm#nautilus_trader.core.UUID4">UUID4</a><a href="#request_aggregated_barsself-list-bar_types-datetime-startnone-datetime-endnone-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-bool-include_external_datafalse-bool-update_subscriptionsfalse-update_catalog-bool--false-dict-paramsnone--uuid4-1" class="hash-link" aria-label="Direct link to request_aggregated_barsself-list-bar_types-datetime-startnone-datetime-endnone-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-bool-include_external_datafalse-bool-update_subscriptionsfalse-update_catalog-bool--false-dict-paramsnone--uuid4-1" title="Direct link to request_aggregated_barsself-list-bar_types-datetime-startnone-datetime-endnone-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-bool-include_external_datafalse-bool-update_subscriptionsfalse-update_catalog-bool--false-dict-paramsnone--uuid4-1">​</a></h4>
<p>Request historical aggregated Bar data for multiple bar types.
The first bar is used to determine which market data type will be queried.
This can either be quotes, trades or bars. If bars are queried,
the first bar type needs to have a composite bar that is external (i.e. not internal/aggregated).
This external bar type will be queried.</p>
<p>If end is <code>None</code> then will request up to the most recent data.</p>
<p>Once the response is received, the bar data is forwarded from the message bus
to the on_historical_data handler. Any tick data used for aggregation is also
forwarded to the on_historical_data handler.</p>
<p>If the request fails, then an error is logged.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>bar_types</strong> (<em>list</em> <em>[</em><a href="../model/data/index.htm#nautilus_trader.model.data.BarType"><em>BarType</em></a> <em>]</em>) – The list of bar types for the request. Composite bars can also be used and need to
figure in the list after a BarType on which it depends.</li>
<li><strong>start</strong> (<em>datetime</em> <em>,</em> <em>optional</em>) – The start datetime (UTC) of request time range.
The inclusiveness depends on individual data client implementation.</li>
<li><strong>end</strong> (<em>datetime</em> <em>,</em> <em>optional</em>) – The end datetime (UTC) of request time range.
The inclusiveness depends on individual data client implementation.</li>
<li><strong>limit</strong> (<em>int</em> <em>,</em> <em>optional</em>) – The limit on the amount of data received (quote ticks, trade ticks or bars).</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>callback</strong> (<em>Callable</em> <em>[</em> <em>[</em><a href="../core/index.htm#nautilus_trader.core.UUID4"><em>UUID4</em></a> <em>]</em> <em>,</em> <em>None</em> <em>]</em> <em>,</em> <em>optional</em>) – The registered callback, to be called with the request ID when the response has
completed processing.</li>
<li><strong>include_external_data</strong> (<em>bool</em> <em>,</em> <em>default False</em>) – If True, includes the queried external data in the response.</li>
<li><strong>update_subscriptions</strong> (<em>bool</em> <em>,</em> <em>default False</em>) – If True, updates the aggregators of any existing or future subscription with the queried external data.</li>
<li><strong>update_catalog</strong> (<em>bool</em> <em>,</em> <em>optional</em>) – Whether to update a catalog with the received data.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
<li><strong>Returns:</strong>
The request_id for the request.</li>
<li><strong>Return type:</strong>
<a href="../core/index.htm#nautilus_trader.core.UUID4">UUID4</a></li>
<li><strong>Raises:</strong>
<ul>
<li><strong>ValueError</strong> – If start is not None and &gt; current timestamp (now).</li>
<li><strong>ValueError</strong> – If end is not None and &gt; current timestamp (now).</li>
<li><strong>ValueError</strong> – If start and end are not None and start is &gt;= end.</li>
<li><strong>ValueError</strong> – If bar_types is empty.</li>
<li><strong>TypeError</strong> – If callback is not None and not of type Callable.</li>
<li><strong>TypeError</strong> – If bar_types is empty or contains elements not of type BarType.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="request_barsself-bartype-bar_type-datetime-startnone-datetime-endnone-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4-1">request_bars(self, BarType bar_type, datetime start=None, datetime end=None, int limit=0, ClientId client_id=None, callback: Callable[[UUID4], None] | None = None, update_catalog: bool = False, dict params=None) → <a href="../core/index.htm#nautilus_trader.core.UUID4">UUID4</a><a href="#request_barsself-bartype-bar_type-datetime-startnone-datetime-endnone-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4-1" class="hash-link" aria-label="Direct link to request_barsself-bartype-bar_type-datetime-startnone-datetime-endnone-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4-1" title="Direct link to request_barsself-bartype-bar_type-datetime-startnone-datetime-endnone-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4-1">​</a></h4>
<p>Request historical Bar data.</p>
<p>If end is <code>None</code> then will request up to the most recent data.</p>
<p>Once the response is received, the bar data is forwarded from the message bus
to the on_historical_data handler.</p>
<p>If the request fails, then an error is logged.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>bar_type</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.BarType"><em>BarType</em></a>) – The bar type for the request.</li>
<li><strong>start</strong> (<em>datetime</em> <em>,</em> <em>optional</em>) – The start datetime (UTC) of request time range.
The inclusiveness depends on individual data client implementation.</li>
<li><strong>end</strong> (<em>datetime</em> <em>,</em> <em>optional</em>) – The end datetime (UTC) of request time range.
The inclusiveness depends on individual data client implementation.</li>
<li><strong>limit</strong> (<em>int</em> <em>,</em> <em>optional</em>) – The limit on the amount of bars received.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>callback</strong> (<em>Callable</em> <em>[</em> <em>[</em><a href="../core/index.htm#nautilus_trader.core.UUID4"><em>UUID4</em></a> <em>]</em> <em>,</em> <em>None</em> <em>]</em> <em>,</em> <em>optional</em>) – The registered callback, to be called with the request ID when the response has
completed processing.</li>
<li><strong>update_catalog</strong> (<em>bool</em> <em>,</em> <em>optional</em>) – Whether to update a catalog with the received data.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
<li><strong>Returns:</strong>
The request_id for the request.</li>
<li><strong>Return type:</strong>
<a href="../core/index.htm#nautilus_trader.core.UUID4">UUID4</a></li>
<li><strong>Raises:</strong>
<ul>
<li><strong>ValueError</strong> – If start is not None and &gt; current timestamp (now).</li>
<li><strong>ValueError</strong> – If end is not None and &gt; current timestamp (now).</li>
<li><strong>ValueError</strong> – If start and end are not None and start is &gt;= end.</li>
<li><strong>TypeError</strong> – If callback is not None and not of type Callable.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="request_dataself-datatype-data_type-clientid-client_id-instrumentid-instrument_idnone-datetime-startnone-datetime-endnone-int-limit0-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4-1">request_data(self, DataType data_type, ClientId client_id, InstrumentId instrument_id=None, datetime start=None, datetime end=None, int limit=0, callback: Callable[[UUID4], None] | None = None, update_catalog: bool = False, dict params=None) → <a href="../core/index.htm#nautilus_trader.core.UUID4">UUID4</a><a href="#request_dataself-datatype-data_type-clientid-client_id-instrumentid-instrument_idnone-datetime-startnone-datetime-endnone-int-limit0-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4-1" class="hash-link" aria-label="Direct link to request_dataself-datatype-data_type-clientid-client_id-instrumentid-instrument_idnone-datetime-startnone-datetime-endnone-int-limit0-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4-1" title="Direct link to request_dataself-datatype-data_type-clientid-client_id-instrumentid-instrument_idnone-datetime-startnone-datetime-endnone-int-limit0-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4-1">​</a></h4>
<p>Request custom data for the given data type from the given data client.</p>
<p>Once the response is received, the data is forwarded from the message bus
to the on_historical_data handler.</p>
<p>If the request fails, then an error is logged.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>data_type</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.DataType"><em>DataType</em></a>) – The data type for the request.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a>) – The data client ID.</li>
<li><strong>start</strong> (<em>datetime</em> <em>,</em> <em>optional</em>) – The start datetime (UTC) of request time range.
The inclusiveness depends on individual data client implementation.</li>
<li><strong>end</strong> (<em>datetime</em> <em>,</em> <em>optional</em>) – The end datetime (UTC) of request time range.
The inclusiveness depends on individual data client implementation.</li>
<li><strong>limit</strong> (<em>int</em> <em>,</em> <em>optional</em>) – The limit on the amount of data points received.</li>
<li><strong>callback</strong> (<em>Callable</em> <em>[</em> <em>[</em><a href="../core/index.htm#nautilus_trader.core.UUID4"><em>UUID4</em></a> <em>]</em> <em>,</em> <em>None</em> <em>]</em> <em>,</em> <em>optional</em>) – The registered callback, to be called with the request ID when the response has
completed processing.</li>
<li><strong>update_catalog</strong> (<em>bool</em> <em>,</em> <em>optional</em>) – Whether to update a catalog with the received data.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
<li><strong>Returns:</strong>
The request_id for the request.</li>
<li><strong>Return type:</strong>
<a href="../core/index.htm#nautilus_trader.core.UUID4">UUID4</a></li>
<li><strong>Raises:</strong>
<strong>TypeError</strong> – If callback is not None and not of type Callable.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="request_instrumentself-instrumentid-instrument_id-datetime-startnone-datetime-endnone-clientid-client_idnone-callback-callableuuid4-noane--none--none-update_catalog-bool--false-dict-paramsnone--uuid4-1">request_instrument(self, InstrumentId instrument_id, datetime start=None, datetime end=None, ClientId client_id=None, callback: Callable[[UUID4], Noane] | None = None, update_catalog: bool = False, dict params=None) → <a href="../core/index.htm#nautilus_trader.core.UUID4">UUID4</a><a href="#request_instrumentself-instrumentid-instrument_id-datetime-startnone-datetime-endnone-clientid-client_idnone-callback-callableuuid4-noane--none--none-update_catalog-bool--false-dict-paramsnone--uuid4-1" class="hash-link" aria-label="Direct link to request_instrumentself-instrumentid-instrument_id-datetime-startnone-datetime-endnone-clientid-client_idnone-callback-callableuuid4-noane--none--none-update_catalog-bool--false-dict-paramsnone--uuid4-1" title="Direct link to request_instrumentself-instrumentid-instrument_id-datetime-startnone-datetime-endnone-clientid-client_idnone-callback-callableuuid4-noane--none--none-update_catalog-bool--false-dict-paramsnone--uuid4-1">​</a></h4>
<p>Request Instrument data for the given instrument ID.</p>
<p>If end is <code>None</code> then will request up to the most recent data.</p>
<p>Once the response is received, the instrument data is forwarded from the message bus
to the on_instrument handler.</p>
<p>If the request fails, then an error is logged.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument ID for the request.</li>
<li><strong>start</strong> (<em>datetime</em> <em>,</em> <em>optional</em>) – The start datetime (UTC) of request time range.
The inclusiveness depends on individual data client implementation.</li>
<li><strong>end</strong> (<em>datetime</em> <em>,</em> <em>optional</em>) – The end datetime (UTC) of request time range.
The inclusiveness depends on individual data client implementation.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>callback</strong> (<em>Callable</em> <em>[</em> <em>[</em><a href="../core/index.htm#nautilus_trader.core.UUID4"><em>UUID4</em></a> <em>]</em> <em>,</em> <em>None</em> <em>]</em> <em>,</em> <em>optional</em>) – The registered callback, to be called with the request ID when the response has
completed processing.</li>
<li><strong>update_catalog</strong> (<em>bool</em> <em>,</em> <em>optional</em>) – Whether to update a catalog with the received data.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
<li><strong>Returns:</strong>
The request_id for the request.</li>
<li><strong>Return type:</strong>
<a href="../core/index.htm#nautilus_trader.core.UUID4">UUID4</a></li>
<li><strong>Raises:</strong>
<ul>
<li><strong>ValueError</strong> – If start is not None and &gt; current timestamp (now).</li>
<li><strong>ValueError</strong> – If end is not None and &gt; current timestamp (now).</li>
<li><strong>ValueError</strong> – If start and end are not None and start is &gt;= end.</li>
<li><strong>TypeError</strong> – If callback is not None and not of type Callable.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="request_instrumentsself-venue-venue-datetime-startnone-datetime-endnone-clientid-client_idnone-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4-1">request_instruments(self, Venue venue, datetime start=None, datetime end=None, ClientId client_id=None, callback: Callable[[UUID4], None] | None = None, update_catalog: bool = False, dict params=None) → <a href="../core/index.htm#nautilus_trader.core.UUID4">UUID4</a><a href="#request_instrumentsself-venue-venue-datetime-startnone-datetime-endnone-clientid-client_idnone-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4-1" class="hash-link" aria-label="Direct link to request_instrumentsself-venue-venue-datetime-startnone-datetime-endnone-clientid-client_idnone-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4-1" title="Direct link to request_instrumentsself-venue-venue-datetime-startnone-datetime-endnone-clientid-client_idnone-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4-1">​</a></h4>
<p>Request all Instrument data for the given venue.</p>
<p>If end is <code>None</code> then will request up to the most recent data.</p>
<p>Once the response is received, the instrument data is forwarded from the message bus
to the on_instrument handler.</p>
<p>If the request fails, then an error is logged.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>venue</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.Venue"><em>Venue</em></a>) – The venue for the request.</li>
<li><strong>start</strong> (<em>datetime</em> <em>,</em> <em>optional</em>) – The start datetime (UTC) of request time range.
The inclusiveness depends on individual data client implementation.</li>
<li><strong>end</strong> (<em>datetime</em> <em>,</em> <em>optional</em>) – The end datetime (UTC) of request time range.
The inclusiveness depends on individual data client implementation.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>callback</strong> (<em>Callable</em> <em>[</em> <em>[</em><a href="../core/index.htm#nautilus_trader.core.UUID4"><em>UUID4</em></a> <em>]</em> <em>,</em> <em>None</em> <em>]</em> <em>,</em> <em>optional</em>) – The registered callback, to be called with the request ID when the response has
completed processing.</li>
<li><strong>update_catalog</strong> (<em>bool</em> <em>,</em> <em>optional</em>) – Whether to update a catalog with the received data.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
<li><strong>Returns:</strong>
The request_id for the request.</li>
<li><strong>Return type:</strong>
<a href="../core/index.htm#nautilus_trader.core.UUID4">UUID4</a></li>
<li><strong>Raises:</strong>
<ul>
<li><strong>ValueError</strong> – If start is not None and &gt; current timestamp (now).</li>
<li><strong>ValueError</strong> – If end is not None and &gt; current timestamp (now).</li>
<li><strong>ValueError</strong> – If start and end are not None and start is &gt;= end.</li>
<li><strong>TypeError</strong> – If callback is not None and not of type Callable.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="request_order_book_snapshotself-instrumentid-instrument_id-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-dict-paramsnone--uuid4-1">request_order_book_snapshot(self, InstrumentId instrument_id, int limit=0, ClientId client_id=None, callback: Callable[[UUID4], None] | None = None, dict params=None) → <a href="../core/index.htm#nautilus_trader.core.UUID4">UUID4</a><a href="#request_order_book_snapshotself-instrumentid-instrument_id-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-dict-paramsnone--uuid4-1" class="hash-link" aria-label="Direct link to request_order_book_snapshotself-instrumentid-instrument_id-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-dict-paramsnone--uuid4-1" title="Direct link to request_order_book_snapshotself-instrumentid-instrument_id-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-dict-paramsnone--uuid4-1">​</a></h4>
<p>Request an order book snapshot.</p>
<p>Once the response is received, the order book data is forwarded from the message bus
to the on_historical_data handler.</p>
<p>If the request fails, then an error is logged.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument ID for the order book snapshot request.</li>
<li><strong>limit</strong> (<em>int</em> <em>,</em> <em>optional</em>) – The limit on the depth of the order book snapshot.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If None, it will be inferred from the venue in the instrument ID.</li>
<li><strong>callback</strong> (<em>Callable</em> <em>[</em> <em>[</em><a href="../core/index.htm#nautilus_trader.core.UUID4"><em>UUID4</em></a> <em>]</em> <em>,</em> <em>None</em> <em>]</em> <em>,</em> <em>optional</em>) – The registered callback, to be called with the request ID when the response has completed processing.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
<li><strong>Returns:</strong>
The request_id for the request.</li>
<li><strong>Return type:</strong>
<a href="../core/index.htm#nautilus_trader.core.UUID4">UUID4</a></li>
<li><strong>Raises:</strong>
<ul>
<li><strong>ValueError</strong> – If the instrument_id is None.</li>
<li><strong>TypeError</strong> – If callback is not None and not of type Callable.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="request_quote_ticksself-instrumentid-instrument_id-datetime-startnone-datetime-endnone-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4-1">request_quote_ticks(self, InstrumentId instrument_id, datetime start=None, datetime end=None, int limit=0, ClientId client_id=None, callback: Callable[[UUID4], None] | None = None, update_catalog: bool = False, dict params=None) → <a href="../core/index.htm#nautilus_trader.core.UUID4">UUID4</a><a href="#request_quote_ticksself-instrumentid-instrument_id-datetime-startnone-datetime-endnone-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4-1" class="hash-link" aria-label="Direct link to request_quote_ticksself-instrumentid-instrument_id-datetime-startnone-datetime-endnone-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4-1" title="Direct link to request_quote_ticksself-instrumentid-instrument_id-datetime-startnone-datetime-endnone-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4-1">​</a></h4>
<p>Request historical QuoteTick data.</p>
<p>If end is <code>None</code> then will request up to the most recent data.</p>
<p>Once the response is received, the quote tick data is forwarded from the message bus
to the on_historical_data handler.</p>
<p>If the request fails, then an error is logged.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The tick instrument ID for the request.</li>
<li><strong>start</strong> (<em>datetime</em> <em>,</em> <em>optional</em>) – The start datetime (UTC) of request time range.
The inclusiveness depends on individual data client implementation.</li>
<li><strong>end</strong> (<em>datetime</em> <em>,</em> <em>optional</em>) – The end datetime (UTC) of request time range.
The inclusiveness depends on individual data client implementation.</li>
<li><strong>limit</strong> (<em>int</em> <em>,</em> <em>optional</em>) – The limit on the amount of quote ticks received.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>callback</strong> (<em>Callable</em> <em>[</em> <em>[</em><a href="../core/index.htm#nautilus_trader.core.UUID4"><em>UUID4</em></a> <em>]</em> <em>,</em> <em>None</em> <em>]</em> <em>,</em> <em>optional</em>) – The registered callback, to be called with the request ID when the response has
completed processing.</li>
<li><strong>update_catalog</strong> (<em>bool</em> <em>,</em> <em>optional</em>) – Whether to update a catalog with the received data.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
<li><strong>Returns:</strong>
The request_id for the request.</li>
<li><strong>Return type:</strong>
<a href="../core/index.htm#nautilus_trader.core.UUID4">UUID4</a></li>
<li><strong>Raises:</strong>
<ul>
<li><strong>ValueError</strong> – If start is not None and &gt; current timestamp (now).</li>
<li><strong>ValueError</strong> – If end is not None and &gt; current timestamp (now).</li>
<li><strong>ValueError</strong> – If start and end are not None and start is &gt;= end.</li>
<li><strong>TypeError</strong> – If callback is not None and not of type Callable.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="request_trade_ticksself-instrumentid-instrument_id-datetime-startnone-datetime-endnone-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4-1">request_trade_ticks(self, InstrumentId instrument_id, datetime start=None, datetime end=None, int limit=0, ClientId client_id=None, callback: Callable[[UUID4], None] | None = None, update_catalog: bool = False, dict params=None) → <a href="../core/index.htm#nautilus_trader.core.UUID4">UUID4</a><a href="#request_trade_ticksself-instrumentid-instrument_id-datetime-startnone-datetime-endnone-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4-1" class="hash-link" aria-label="Direct link to request_trade_ticksself-instrumentid-instrument_id-datetime-startnone-datetime-endnone-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4-1" title="Direct link to request_trade_ticksself-instrumentid-instrument_id-datetime-startnone-datetime-endnone-int-limit0-clientid-client_idnone-callback-callableuuid4-none--none--none-update_catalog-bool--false-dict-paramsnone--uuid4-1">​</a></h4>
<p>Request historical TradeTick data.</p>
<p>If end is <code>None</code> then will request up to the most recent data.</p>
<p>Once the response is received, the trade tick data is forwarded from the message bus
to the on_historical_data handler.</p>
<p>If the request fails, then an error is logged.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The tick instrument ID for the request.</li>
<li><strong>start</strong> (<em>datetime</em> <em>,</em> <em>optional</em>) – The start datetime (UTC) of request time range.
The inclusiveness depends on individual data client implementation.</li>
<li><strong>end</strong> (<em>datetime</em> <em>,</em> <em>optional</em>) – The end datetime (UTC) of request time range.
The inclusiveness depends on individual data client implementation.</li>
<li><strong>limit</strong> (<em>int</em> <em>,</em> <em>optional</em>) – The limit on the amount of trade ticks received.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>callback</strong> (<em>Callable</em> <em>[</em> <em>[</em><a href="../core/index.htm#nautilus_trader.core.UUID4"><em>UUID4</em></a> <em>]</em> <em>,</em> <em>None</em> <em>]</em> <em>,</em> <em>optional</em>) – The registered callback, to be called with the request ID when the response has
completed processing.</li>
<li><strong>update_catalog</strong> (<em>bool</em> <em>,</em> <em>optional</em>) – Whether to update a catalog with the received data.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
<li><strong>Returns:</strong>
The request_id for the request.</li>
<li><strong>Return type:</strong>
<a href="../core/index.htm#nautilus_trader.core.UUID4">UUID4</a></li>
<li><strong>Raises:</strong>
<ul>
<li><strong>ValueError</strong> – If start is not None and &gt; current timestamp (now).</li>
<li><strong>ValueError</strong> – If end is not None and &gt; current timestamp (now).</li>
<li><strong>ValueError</strong> – If start and end are not None and start is &gt;= end.</li>
<li><strong>TypeError</strong> – If callback is not None and not of type Callable.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="resetself--void-1">reset(self) → void<a href="#resetself--void-1" class="hash-link" aria-label="Direct link to reset(self) → void" title="Direct link to reset(self) → void">​</a></h4>
<p>Reset the component.</p>
<p>All stateful fields are reset to their initial value.</p>
<p>While executing on_reset() any exception will be logged and reraised, then the component
will remain in a <code>RESETTING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-150">WARNING<a href="#warning-150" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="resumeself--void-1">resume(self) → void<a href="#resumeself--void-1" class="hash-link" aria-label="Direct link to resume(self) → void" title="Direct link to resume(self) → void">​</a></h4>
<p>Resume the component.</p>
<p>While executing on_resume() any exception will be logged and reraised, then the component
will remain in a <code>RESUMING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-151">WARNING<a href="#warning-151" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="run_in_executorself-func-callable-any-tuple-argsnone-dict-kwargsnone-1">run_in_executor(self, func: Callable[..., Any], tuple args=None, dict kwargs=None)<a href="#run_in_executorself-func-callable-any-tuple-argsnone-dict-kwargsnone-1" class="hash-link" aria-label="Direct link to run_in_executor(self, func: Callable[..., Any], tuple args=None, dict kwargs=None)" title="Direct link to run_in_executor(self, func: Callable[..., Any], tuple args=None, dict kwargs=None)">​</a></h4>
<p>Schedules the callable func to be executed as fn(*args, **kwargs).</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>func</strong> (<em>Callable</em>) – The function to be executed.</li>
<li><strong>args</strong> (<em>positional arguments</em>) – The positional arguments for the call to func.</li>
<li><strong>kwargs</strong> (<em>arbitrary keyword arguments</em>) – The keyword arguments for the call to func.</li>
</ul>
</li>
<li><strong>Returns:</strong>
The unique task identifier for the execution.
This also corresponds to any future objects memory address.</li>
<li><strong>Return type:</strong>
<a href="../common/index.htm#nautilus_trader.common.executor.TaskId">TaskId</a></li>
<li><strong>Raises:</strong>
<strong>TypeError</strong> – If func is not of type Callable.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="saveself--dict-1">save(self) → dict<a href="#saveself--dict-1" class="hash-link" aria-label="Direct link to save(self) → dict" title="Direct link to save(self) → dict">​</a></h4>
<p>Return the actor/strategy state dictionary to be saved.</p>
<p>Calls on_save.</p>
<ul>
<li><strong>Returns:</strong>
The strategy state to save.</li>
<li><strong>Return type:</strong>
dict[str, bytes]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-152">WARNING<a href="#warning-152" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Exceptions raised will be caught, logged, and reraised.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="shutdown_systemself-str-reasonnone--void-1">shutdown_system(self, str reason=None) → void<a href="#shutdown_systemself-str-reasonnone--void-1" class="hash-link" aria-label="Direct link to shutdown_system(self, str reason=None) → void" title="Direct link to shutdown_system(self, str reason=None) → void">​</a></h4>
<p>Initiate a system-wide shutdown by generating and publishing a ShutdownSystem command.</p>
<p>The command is handled by the system’s NautilusKernel, which will invoke either stop (synchronously)
or stop_async (asynchronously) depending on the execution context and the presence of an active event loop.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>reason</strong> (<em>str</em> <em>,</em> <em>optional</em>) – The reason for issuing the shutdown command.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="startself--void-1">start(self) → void<a href="#startself--void-1" class="hash-link" aria-label="Direct link to start(self) → void" title="Direct link to start(self) → void">​</a></h4>
<p>Start the component.</p>
<p>While executing on_start() any exception will be logged and reraised, then the component
will remain in a <code>STARTING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-153">WARNING<a href="#warning-153" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="state-1">state<a href="#state-1" class="hash-link" aria-label="Direct link to state" title="Direct link to state">​</a></h4>
<p>ComponentState</p>
<p>Return the components current state.</p>
<ul>
<li><strong>Return type:</strong>
ComponentState</li>
<li><strong>Type:</strong>
Component.state</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="stopself--void-1">stop(self) → void<a href="#stopself--void-1" class="hash-link" aria-label="Direct link to stop(self) → void" title="Direct link to stop(self) → void">​</a></h4>
<p>Stop the component.</p>
<p>While executing on_stop() any exception will be logged and reraised, then the component
will remain in a <code>STOPPING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-154">WARNING<a href="#warning-154" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="submit_orderself-order-order-positionid-position_idnone-clientid-client_idnone-dict-paramsnone--void-1">submit_order(self, Order order, PositionId position_id=None, ClientId client_id=None, dict params=None) → void<a href="#submit_orderself-order-order-positionid-position_idnone-clientid-client_idnone-dict-paramsnone--void-1" class="hash-link" aria-label="Direct link to submit_order(self, Order order, PositionId position_id=None, ClientId client_id=None, dict params=None) → void" title="Direct link to submit_order(self, Order order, PositionId position_id=None, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Submit the given order with optional position ID, execution algorithm
and routing instructions.</p>
<p>A SubmitOrder command will be created and sent to <strong>either</strong> an
ExecAlgorithm, the OrderEmulator or the RiskEngine (depending whether
the order is emulated and/or has an exec_algorithm_id specified).</p>
<p>If the client order ID is duplicate, then the order will be denied.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>order</strong> (<a href="../model/orders/index.htm#nautilus_trader.model.orders.Order"><em>Order</em></a>) – The order to submit.</li>
<li><strong>position_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.PositionId"><em>PositionId</em></a> <em>,</em> <em>optional</em>) – The position ID to submit the order against. If a position does not
yet exist, then any position opened will have this identifier assigned.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific execution client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
<li><strong>Raises:</strong>
<strong>ValueError</strong> – If order.status is not <code>INITIALIZED</code>.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-155">WARNING<a href="#warning-155" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>If a position_id is passed and a position does not yet exist, then any
position opened by the order will have this position ID assigned. This may
not be what you intended.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="submit_order_listself-orderlist-order_list-positionid-position_idnone-clientid-client_idnone-dict-paramsnone--void-1">submit_order_list(self, OrderList order_list, PositionId position_id=None, ClientId client_id=None, dict params=None) → void<a href="#submit_order_listself-orderlist-order_list-positionid-position_idnone-clientid-client_idnone-dict-paramsnone--void-1" class="hash-link" aria-label="Direct link to submit_order_list(self, OrderList order_list, PositionId position_id=None, ClientId client_id=None, dict params=None) → void" title="Direct link to submit_order_list(self, OrderList order_list, PositionId position_id=None, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Submit the given order list with optional position ID, execution algorithm
and routing instructions.</p>
<p>A SubmitOrderList command will be created and sent to <strong>either</strong> the
OrderEmulator, or the RiskEngine (depending whether an order is emulated).</p>
<p>If the order list ID is duplicate, or any client order ID is duplicate,
then all orders will be denied.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>order_list</strong> (<a href="../model/orders/index.htm#nautilus_trader.model.orders.OrderList"><em>OrderList</em></a>) – The order list to submit.</li>
<li><strong>position_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.PositionId"><em>PositionId</em></a> <em>,</em> <em>optional</em>) – The position ID to submit the order against. If a position does not
yet exist, then any position opened will have this identifier assigned.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific execution client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
<li><strong>Raises:</strong>
<strong>ValueError</strong> – If any order.status is not <code>INITIALIZED</code>.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-156">WARNING<a href="#warning-156" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>If a position_id is passed and a position does not yet exist, then any
position opened by an order will have this position ID assigned. This may
not be what you intended.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_barsself-bartype-bar_type-clientid-client_idnone-bool-await_partialfalse-bool-update_catalogfalse-dict-paramsnone--void-1">subscribe_bars(self, BarType bar_type, ClientId client_id=None, bool await_partial=False, bool update_catalog=False, dict params=None) → void<a href="#subscribe_barsself-bartype-bar_type-clientid-client_idnone-bool-await_partialfalse-bool-update_catalogfalse-dict-paramsnone--void-1" class="hash-link" aria-label="Direct link to subscribe_bars(self, BarType bar_type, ClientId client_id=None, bool await_partial=False, bool update_catalog=False, dict params=None) → void" title="Direct link to subscribe_bars(self, BarType bar_type, ClientId client_id=None, bool await_partial=False, bool update_catalog=False, dict params=None) → void">​</a></h4>
<p>Subscribe to streaming Bar data for the given bar type.</p>
<p>Once subscribed, any matching bar data published on the message bus is forwarded
to the on_bar handler.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>bar_type</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.BarType"><em>BarType</em></a>) – The bar type to subscribe to.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>await_partial</strong> (<em>bool</em> <em>,</em> <em>default False</em>) – If the bar aggregator should await the arrival of a historical partial bar prior
to actively aggregating new bars.</li>
<li><strong>update_catalog</strong> (<em>bool</em> <em>,</em> <em>optional</em>) – Whether to update a catalog with the received data.
Only useful when downloading data during a backtest.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_dataself-datatype-data_type-clientid-client_idnone-instrumentid-instrument_idnone-bool-update_catalogfalse-dict-paramsnone--void-1">subscribe_data(self, DataType data_type, ClientId client_id=None, InstrumentId instrument_id=None, bool update_catalog=False, dict params=None) → void<a href="#subscribe_dataself-datatype-data_type-clientid-client_idnone-instrumentid-instrument_idnone-bool-update_catalogfalse-dict-paramsnone--void-1" class="hash-link" aria-label="Direct link to subscribe_data(self, DataType data_type, ClientId client_id=None, InstrumentId instrument_id=None, bool update_catalog=False, dict params=None) → void" title="Direct link to subscribe_data(self, DataType data_type, ClientId client_id=None, InstrumentId instrument_id=None, bool update_catalog=False, dict params=None) → void">​</a></h4>
<p>Subscribe to data of the given data type.</p>
<p>Once subscribed, any matching data published on the message bus is forwarded
to the on_data handler.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>data_type</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.DataType"><em>DataType</em></a>) – The data type to subscribe to.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The data client ID. If supplied then a Subscribe command will be
sent to the corresponding data client.</li>
<li><strong>update_catalog</strong> (<em>bool</em> <em>,</em> <em>optional</em>) – Whether to update a catalog with the received data.
Only useful when downloading data during a backtest.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_index_pricesself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void-1">subscribe_index_prices(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void<a href="#subscribe_index_pricesself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void-1" class="hash-link" aria-label="Direct link to subscribe_index_prices(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void" title="Direct link to subscribe_index_prices(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Subscribe to streaming IndexPriceUpdate data for the given instrument ID.</p>
<p>Once subscribed, any matching index price updates published on the message bus are forwarded
to the on_index_price handler.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument to subscribe to.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_instrumentself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void-1">subscribe_instrument(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void<a href="#subscribe_instrumentself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void-1" class="hash-link" aria-label="Direct link to subscribe_instrument(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void" title="Direct link to subscribe_instrument(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Subscribe to update Instrument data for the given instrument ID.</p>
<p>Once subscribed, any matching instrument data published on the message bus is forwarded
to the on_instrument handler.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument ID for the subscription.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_instrument_closeself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void-1">subscribe_instrument_close(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void<a href="#subscribe_instrument_closeself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void-1" class="hash-link" aria-label="Direct link to subscribe_instrument_close(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void" title="Direct link to subscribe_instrument_close(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Subscribe to close updates for the given instrument ID.</p>
<p>Once subscribed, any matching instrument close data published on the message bus is forwarded
to the on_instrument_close handler.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument to subscribe to status updates for.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_instrument_statusself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void-1">subscribe_instrument_status(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void<a href="#subscribe_instrument_statusself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void-1" class="hash-link" aria-label="Direct link to subscribe_instrument_status(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void" title="Direct link to subscribe_instrument_status(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Subscribe to status updates for the given instrument ID.</p>
<p>Once subscribed, any matching instrument status data published on the message bus is forwarded
to the on_instrument_status handler.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument to subscribe to status updates for.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_instrumentsself-venue-venue-clientid-client_idnone-dict-paramsnone--void-1">subscribe_instruments(self, Venue venue, ClientId client_id=None, dict params=None) → void<a href="#subscribe_instrumentsself-venue-venue-clientid-client_idnone-dict-paramsnone--void-1" class="hash-link" aria-label="Direct link to subscribe_instruments(self, Venue venue, ClientId client_id=None, dict params=None) → void" title="Direct link to subscribe_instruments(self, Venue venue, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Subscribe to update Instrument data for the given venue.</p>
<p>Once subscribed, any matching instrument data published on the message bus is forwarded
the on_instrument handler.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>venue</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.Venue"><em>Venue</em></a>) – The venue for the subscription.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_mark_pricesself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void-1">subscribe_mark_prices(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void<a href="#subscribe_mark_pricesself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void-1" class="hash-link" aria-label="Direct link to subscribe_mark_prices(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void" title="Direct link to subscribe_mark_prices(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Subscribe to streaming MarkPriceUpdate data for the given instrument ID.</p>
<p>Once subscribed, any matching mark price updates published on the message bus are forwarded
to the on_mark_price handler.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument to subscribe to.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_order_book_at_intervalself-instrumentid-instrument_id-booktype-book_typebooktypel2_mbp-int-depth0-int-interval_ms1000-clientid-client_idnone-bool-managedtrue-dict-paramsnone--void-1">subscribe_order_book_at_interval(self, InstrumentId instrument_id, BookType book_type=BookType.L2_MBP, int depth=0, int interval_ms=1000, ClientId client_id=None, bool managed=True, dict params=None) → void<a href="#subscribe_order_book_at_intervalself-instrumentid-instrument_id-booktype-book_typebooktypel2_mbp-int-depth0-int-interval_ms1000-clientid-client_idnone-bool-managedtrue-dict-paramsnone--void-1" class="hash-link" aria-label="Direct link to subscribe_order_book_at_interval(self, InstrumentId instrument_id, BookType book_type=BookType.L2_MBP, int depth=0, int interval_ms=1000, ClientId client_id=None, bool managed=True, dict params=None) → void" title="Direct link to subscribe_order_book_at_interval(self, InstrumentId instrument_id, BookType book_type=BookType.L2_MBP, int depth=0, int interval_ms=1000, ClientId client_id=None, bool managed=True, dict params=None) → void">​</a></h4>
<p>Subscribe to an OrderBook at a specified interval for the given instrument ID.</p>
<p>Once subscribed, any matching order book updates published on the message bus are forwarded
to the on_order_book handler.</p>
<p>The DataEngine will only maintain one order book for each instrument.
Because of this - the level, depth and params for the stream will be set
as per the last subscription request (this will also affect all subscribers).</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The order book instrument ID to subscribe to.</li>
<li><strong>book_type</strong> (BookType {<code>L1_MBP</code>, <code>L2_MBP</code>, <code>L3_MBO</code>}) – The order book type.</li>
<li><strong>depth</strong> (<em>int</em> <em>,</em> <em>optional</em>) – The maximum depth for the order book. A depth of 0 is maximum depth.</li>
<li><strong>interval_ms</strong> (<em>int</em> <em>,</em> <em>default 1000</em>) – The order book snapshot interval (milliseconds).</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>managed</strong> (<em>bool</em> <em>,</em> <em>default True</em>) – If an order book should be managed by the data engine based on the subscribed feed.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
<li><strong>Raises:</strong>
<ul>
<li><strong>ValueError</strong> – If depth is negative (&lt; 0).</li>
<li><strong>ValueError</strong> – If interval_ms is not positive (&gt; 0).</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-157">WARNING<a href="#warning-157" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Consider subscribing to order book deltas if you need intervals less than 100 milliseconds.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_order_book_deltasself-instrumentid-instrument_id-booktype-book_typebooktypel2_mbp-int-depth0-clientid-client_idnone-bool-managedtrue-bool-pyo3_conversionfalse-dict-paramsnone--void-1">subscribe_order_book_deltas(self, InstrumentId instrument_id, BookType book_type=BookType.L2_MBP, int depth=0, ClientId client_id=None, bool managed=True, bool pyo3_conversion=False, dict params=None) → void<a href="#subscribe_order_book_deltasself-instrumentid-instrument_id-booktype-book_typebooktypel2_mbp-int-depth0-clientid-client_idnone-bool-managedtrue-bool-pyo3_conversionfalse-dict-paramsnone--void-1" class="hash-link" aria-label="Direct link to subscribe_order_book_deltas(self, InstrumentId instrument_id, BookType book_type=BookType.L2_MBP, int depth=0, ClientId client_id=None, bool managed=True, bool pyo3_conversion=False, dict params=None) → void" title="Direct link to subscribe_order_book_deltas(self, InstrumentId instrument_id, BookType book_type=BookType.L2_MBP, int depth=0, ClientId client_id=None, bool managed=True, bool pyo3_conversion=False, dict params=None) → void">​</a></h4>
<p>Subscribe to the order book data stream, being a snapshot then deltas
for the given instrument ID.</p>
<p>Once subscribed, any matching order book data published on the message bus is forwarded
to the on_order_book_deltas handler.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The order book instrument ID to subscribe to.</li>
<li><strong>book_type</strong> (BookType {<code>L1_MBP</code>, <code>L2_MBP</code>, <code>L3_MBO</code>}) – The order book type.</li>
<li><strong>depth</strong> (<em>int</em> <em>,</em> <em>optional</em>) – The maximum depth for the order book. A depth of 0 is maximum depth.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>managed</strong> (<em>bool</em> <em>,</em> <em>default True</em>) – If an order book should be managed by the data engine based on the subscribed feed.</li>
<li><strong>pyo3_conversion</strong> (<em>bool</em> <em>,</em> <em>default False</em>) – If received deltas should be converted to nautilus_pyo3.OrderBookDeltas
prior to being passed to the on_order_book_deltas handler.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_order_book_depthself-instrumentid-instrument_id-booktype-book_typebooktypel2_mbp-int-depth0-clientid-client_idnone-bool-managedtrue-bool-pyo3_conversionfalse-dict-paramsnone--void-1">subscribe_order_book_depth(self, InstrumentId instrument_id, BookType book_type=BookType.L2_MBP, int depth=0, ClientId client_id=None, bool managed=True, bool pyo3_conversion=False, dict params=None) → void<a href="#subscribe_order_book_depthself-instrumentid-instrument_id-booktype-book_typebooktypel2_mbp-int-depth0-clientid-client_idnone-bool-managedtrue-bool-pyo3_conversionfalse-dict-paramsnone--void-1" class="hash-link" aria-label="Direct link to subscribe_order_book_depth(self, InstrumentId instrument_id, BookType book_type=BookType.L2_MBP, int depth=0, ClientId client_id=None, bool managed=True, bool pyo3_conversion=False, dict params=None) → void" title="Direct link to subscribe_order_book_depth(self, InstrumentId instrument_id, BookType book_type=BookType.L2_MBP, int depth=0, ClientId client_id=None, bool managed=True, bool pyo3_conversion=False, dict params=None) → void">​</a></h4>
<p>Subscribe to the order book depth stream for the given instrument ID.</p>
<p>Once subscribed, any matching order book data published on the message bus is forwarded
to the on_order_book_depth handler.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The order book instrument ID to subscribe to.</li>
<li><strong>book_type</strong> (BookType {<code>L1_MBP</code>, <code>L2_MBP</code>, <code>L3_MBO</code>}) – The order book type.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>managed</strong> (<em>bool</em> <em>,</em> <em>default True</em>) – If an order book should be managed by the data engine based on the subscribed feed.</li>
<li><strong>pyo3_conversion</strong> (<em>bool</em> <em>,</em> <em>default False</em>) – If received deltas should be converted to nautilus_pyo3.OrderBookDepth
prior to being passed to the on_order_book_depth handler.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_quote_ticksself-instrumentid-instrument_id-clientid-client_idnone-bool-update_catalogfalse-dict-paramsnone--void-1">subscribe_quote_ticks(self, InstrumentId instrument_id, ClientId client_id=None, bool update_catalog=False, dict params=None) → void<a href="#subscribe_quote_ticksself-instrumentid-instrument_id-clientid-client_idnone-bool-update_catalogfalse-dict-paramsnone--void-1" class="hash-link" aria-label="Direct link to subscribe_quote_ticks(self, InstrumentId instrument_id, ClientId client_id=None, bool update_catalog=False, dict params=None) → void" title="Direct link to subscribe_quote_ticks(self, InstrumentId instrument_id, ClientId client_id=None, bool update_catalog=False, dict params=None) → void">​</a></h4>
<p>Subscribe to streaming QuoteTick data for the given instrument ID.</p>
<p>Once subscribed, any matching quote tick data published on the message bus is forwarded
to the on_quote_tick handler.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The tick instrument to subscribe to.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>update_catalog</strong> (<em>bool</em> <em>,</em> <em>optional</em>) – Whether to update a catalog with the received data.
Only useful when downloading data during a backtest.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_signalself-str-name--void-1">subscribe_signal(self, str name=&#x27;&#x27;) → void<a href="#subscribe_signalself-str-name--void-1" class="hash-link" aria-label="Direct link to subscribe_signal(self, str name=&#x27;&#x27;) → void" title="Direct link to subscribe_signal(self, str name=&#x27;&#x27;) → void">​</a></h4>
<p>Subscribe to a specific signal by name, or to all signals if no name is provided.</p>
<p>Once subscribed, any matching signal data published on the message bus is forwarded
to the on_signal handler.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>name</strong> (<em>str</em> <em>,</em> <em>optional</em>) – The name of the signal to subscribe to. If not provided or an empty
string is passed, the subscription will include all signals.
The signal name is case-insensitive and will be capitalized
(e.g., ‘example’ becomes ‘SignalExample*’).</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_trade_ticksself-instrumentid-instrument_id-clientid-client_idnone-bool-update_catalogfalse-dict-paramsnone--void-1">subscribe_trade_ticks(self, InstrumentId instrument_id, ClientId client_id=None, bool update_catalog=False, dict params=None) → void<a href="#subscribe_trade_ticksself-instrumentid-instrument_id-clientid-client_idnone-bool-update_catalogfalse-dict-paramsnone--void-1" class="hash-link" aria-label="Direct link to subscribe_trade_ticks(self, InstrumentId instrument_id, ClientId client_id=None, bool update_catalog=False, dict params=None) → void" title="Direct link to subscribe_trade_ticks(self, InstrumentId instrument_id, ClientId client_id=None, bool update_catalog=False, dict params=None) → void">​</a></h4>
<p>Subscribe to streaming TradeTick data for the given instrument ID.</p>
<p>Once subscribed, any matching trade tick data published on the message bus is forwarded
to the on_trade_tick handler.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The tick instrument to subscribe to.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>update_catalog</strong> (<em>bool</em> <em>,</em> <em>optional</em>) – Whether to update a catalog with the received data.
Only useful when downloading data during a backtest.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="to_importable_configself--importablestrategyconfig-1">to_importable_config(self) → <a href="../config/index.htm#nautilus_trader.trading.config.ImportableStrategyConfig">ImportableStrategyConfig</a><a href="#to_importable_configself--importablestrategyconfig-1" class="hash-link" aria-label="Direct link to to_importable_configself--importablestrategyconfig-1" title="Direct link to to_importable_configself--importablestrategyconfig-1">​</a></h4>
<p>Returns an importable configuration for this strategy.</p>
<ul>
<li><strong>Return type:</strong>
<a href="../config/index.htm#nautilus_trader.trading.config.ImportableStrategyConfig">ImportableStrategyConfig</a></li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="trader_id-1">trader_id<a href="#trader_id-1" class="hash-link" aria-label="Direct link to trader_id" title="Direct link to trader_id">​</a></h4>
<p>The trader ID associated with the component.</p>
<ul>
<li><strong>Returns:</strong>
TraderId</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="type-1">type<a href="#type-1" class="hash-link" aria-label="Direct link to type" title="Direct link to type">​</a></h4>
<p>The components type.</p>
<ul>
<li><strong>Returns:</strong>
type</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_barsself-bartype-bar_type-clientid-client_idnone-dict-paramsnone--void-1">unsubscribe_bars(self, BarType bar_type, ClientId client_id=None, dict params=None) → void<a href="#unsubscribe_barsself-bartype-bar_type-clientid-client_idnone-dict-paramsnone--void-1" class="hash-link" aria-label="Direct link to unsubscribe_bars(self, BarType bar_type, ClientId client_id=None, dict params=None) → void" title="Direct link to unsubscribe_bars(self, BarType bar_type, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Unsubscribe from streaming Bar data for the given bar type.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>bar_type</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.BarType"><em>BarType</em></a>) – The bar type to unsubscribe from.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_dataself-datatype-data_type-clientid-client_idnone-instrumentid-instrument_idnone-dict-paramsnone--void-1">unsubscribe_data(self, DataType data_type, ClientId client_id=None, InstrumentId instrument_id=None, dict params=None) → void<a href="#unsubscribe_dataself-datatype-data_type-clientid-client_idnone-instrumentid-instrument_idnone-dict-paramsnone--void-1" class="hash-link" aria-label="Direct link to unsubscribe_data(self, DataType data_type, ClientId client_id=None, InstrumentId instrument_id=None, dict params=None) → void" title="Direct link to unsubscribe_data(self, DataType data_type, ClientId client_id=None, InstrumentId instrument_id=None, dict params=None) → void">​</a></h4>
<p>Unsubscribe from data of the given data type.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>data_type</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.DataType"><em>DataType</em></a>) – The data type to unsubscribe from.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The data client ID. If supplied then an Unsubscribe command will
be sent to the data client.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_index_pricesself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void-1">unsubscribe_index_prices(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void<a href="#unsubscribe_index_pricesself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void-1" class="hash-link" aria-label="Direct link to unsubscribe_index_prices(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void" title="Direct link to unsubscribe_index_prices(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Unsubscribe from streaming IndexPriceUpdate data for the given instrument ID.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument to subscribe to.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_instrumentself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void-1">unsubscribe_instrument(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void<a href="#unsubscribe_instrumentself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void-1" class="hash-link" aria-label="Direct link to unsubscribe_instrument(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void" title="Direct link to unsubscribe_instrument(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Unsubscribe from update Instrument data for the given instrument ID.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument to unsubscribe from.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_instrument_statusself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void-1">unsubscribe_instrument_status(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void<a href="#unsubscribe_instrument_statusself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void-1" class="hash-link" aria-label="Direct link to unsubscribe_instrument_status(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void" title="Direct link to unsubscribe_instrument_status(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Unsubscribe to status updates of the given venue.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument to unsubscribe to status updates for.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_instrumentsself-venue-venue-clientid-client_idnone-dict-paramsnone--void-1">unsubscribe_instruments(self, Venue venue, ClientId client_id=None, dict params=None) → void<a href="#unsubscribe_instrumentsself-venue-venue-clientid-client_idnone-dict-paramsnone--void-1" class="hash-link" aria-label="Direct link to unsubscribe_instruments(self, Venue venue, ClientId client_id=None, dict params=None) → void" title="Direct link to unsubscribe_instruments(self, Venue venue, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Unsubscribe from update Instrument data for the given venue.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>venue</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.Venue"><em>Venue</em></a>) – The venue for the subscription.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_mark_pricesself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void-1">unsubscribe_mark_prices(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void<a href="#unsubscribe_mark_pricesself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void-1" class="hash-link" aria-label="Direct link to unsubscribe_mark_prices(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void" title="Direct link to unsubscribe_mark_prices(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Unsubscribe from streaming MarkPriceUpdate data for the given instrument ID.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument to subscribe to.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_order_book_at_intervalself-instrumentid-instrument_id-int-interval_ms1000-clientid-client_idnone-dict-paramsnone--void-1">unsubscribe_order_book_at_interval(self, InstrumentId instrument_id, int interval_ms=1000, ClientId client_id=None, dict params=None) → void<a href="#unsubscribe_order_book_at_intervalself-instrumentid-instrument_id-int-interval_ms1000-clientid-client_idnone-dict-paramsnone--void-1" class="hash-link" aria-label="Direct link to unsubscribe_order_book_at_interval(self, InstrumentId instrument_id, int interval_ms=1000, ClientId client_id=None, dict params=None) → void" title="Direct link to unsubscribe_order_book_at_interval(self, InstrumentId instrument_id, int interval_ms=1000, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Unsubscribe from an OrderBook at a specified interval for the given instrument ID.</p>
<p>The interval must match the previously subscribed interval.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The order book instrument to subscribe to.</li>
<li><strong>interval_ms</strong> (<em>int</em> <em>,</em> <em>default 1000</em>) – The order book snapshot interval (milliseconds).</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_order_book_deltasself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void-1">unsubscribe_order_book_deltas(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void<a href="#unsubscribe_order_book_deltasself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void-1" class="hash-link" aria-label="Direct link to unsubscribe_order_book_deltas(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void" title="Direct link to unsubscribe_order_book_deltas(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Unsubscribe the order book deltas stream for the given instrument ID.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The order book instrument to subscribe to.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_order_book_depthself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void-1">unsubscribe_order_book_depth(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void<a href="#unsubscribe_order_book_depthself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void-1" class="hash-link" aria-label="Direct link to unsubscribe_order_book_depth(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void" title="Direct link to unsubscribe_order_book_depth(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Unsubscribe the order book depth stream for the given instrument ID.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The order book instrument to subscribe to.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_quote_ticksself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void-1">unsubscribe_quote_ticks(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void<a href="#unsubscribe_quote_ticksself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void-1" class="hash-link" aria-label="Direct link to unsubscribe_quote_ticks(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void" title="Direct link to unsubscribe_quote_ticks(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Unsubscribe from streaming QuoteTick data for the given instrument ID.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The tick instrument to unsubscribe from.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_trade_ticksself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void-1">unsubscribe_trade_ticks(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void<a href="#unsubscribe_trade_ticksself-instrumentid-instrument_id-clientid-client_idnone-dict-paramsnone--void-1" class="hash-link" aria-label="Direct link to unsubscribe_trade_ticks(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void" title="Direct link to unsubscribe_trade_ticks(self, InstrumentId instrument_id, ClientId client_id=None, dict params=None) → void">​</a></h4>
<p>Unsubscribe from streaming TradeTick data for the given instrument ID.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The tick instrument ID to unsubscribe from.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a> <em>,</em> <em>optional</em>) – The specific client ID for the command.
If <code>None</code> then will be inferred from the venue in the instrument ID.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional parameters potentially used by a specific client.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="update_syntheticself-syntheticinstrument-synthetic--void-1">update_synthetic(self, SyntheticInstrument synthetic) → void<a href="#update_syntheticself-syntheticinstrument-synthetic--void-1" class="hash-link" aria-label="Direct link to update_synthetic(self, SyntheticInstrument synthetic) → void" title="Direct link to update_synthetic(self, SyntheticInstrument synthetic) → void">​</a></h4>
<p>Update the synthetic instrument in the cache.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>synthetic</strong> (<a href="../model/instruments/index.htm#nautilus_trader.model.instruments.SyntheticInstrument"><em>SyntheticInstrument</em></a>) – The synthetic instrument to update in the cache.</li>
<li><strong>Raises:</strong>
<strong>KeyError</strong> – If synthetic does not already exist in the cache.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="use_uuid_client_order_ids-1">use_uuid_client_order_ids<a href="#use_uuid_client_order_ids-1" class="hash-link" aria-label="Direct link to use_uuid_client_order_ids" title="Direct link to use_uuid_client_order_ids">​</a></h4>
<p>If UUID4’s should be used for client order ID values.</p>
<ul>
<li><strong>Returns:</strong>
bool</li>
</ul>
<p><a id="module-nautilus_trader.trading.trader"></a></p>
<p>The Trader class is intended to manage a fleet of trading strategies within a running
instance of the platform.</p>
<p>A running instance could be either a test/backtest or live implementation - the
Trader will operate in the same way.</p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="class-trader-1"><em>class</em> Trader<a href="#class-trader-1" class="hash-link" aria-label="Direct link to class-trader-1" title="Direct link to class-trader-1">​</a></h3>
<p>Bases: <a href="../common/index.htm#nautilus_trader.common.component.Component"><code>Component</code></a></p>
<p>Provides a trader for managing a fleet of actors, execution algorithms and trading
strategies.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>trader_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.TraderId"><em>TraderId</em></a>) – The ID for the trader.</li>
<li><strong>instance_id</strong> (<a href="../core/index.htm#nautilus_trader.core.UUID4"><em>UUID4</em></a>) – The instance ID for the trader.</li>
<li><strong>msgbus</strong> (<a href="../common/index.htm#nautilus_trader.common.component.MessageBus"><em>MessageBus</em></a>) – The message bus for the trader.</li>
<li><strong>cache</strong> (<a href="../cache/index.htm#nautilus_trader.cache.Cache"><em>Cache</em></a>) – The cache for the trader.</li>
<li><strong>portfolio</strong> (<a href="../portfolio/index.htm#nautilus_trader.portfolio.Portfolio"><em>Portfolio</em></a>) – The portfolio for the trader.</li>
<li><strong>data_engine</strong> (<a href="../data/index.htm#nautilus_trader.data.engine.DataEngine"><em>DataEngine</em></a>) – The data engine for the trader.</li>
<li><strong>risk_engine</strong> (<a href="../risk/index.htm#nautilus_trader.risk.engine.RiskEngine"><em>RiskEngine</em></a>) – The risk engine for the trader.</li>
<li><strong>exec_engine</strong> (<a href="../execution/index.htm#nautilus_trader.execution.engine.ExecutionEngine"><em>ExecutionEngine</em></a>) – The execution engine for the trader.</li>
<li><strong>clock</strong> (<a href="../common/index.htm#nautilus_trader.common.component.Clock"><em>Clock</em></a>) – The clock for the trader.</li>
<li><strong>environment</strong> (Environment { <code>BACKTEST</code>, <code>SANDBOX</code>, <code>LIVE</code> }) – The environment context.</li>
<li><strong>has_controller</strong> (<em>bool</em> <em>,</em> <em>default False</em>) – If the trader has a controller.</li>
<li><strong>loop</strong> (<em>asyncio.AbstractEventLoop</em> <em>,</em> <em>optional</em>) – The event loop for the trader.</li>
</ul>
</li>
<li><strong>Raises:</strong>
<ul>
<li><strong>ValueError</strong> – If portfolio is not equal to the exec_engine portfolio.</li>
<li><strong>ValueError</strong> – If strategies is <code>None</code>.</li>
<li><strong>ValueError</strong> – If strategies is empty.</li>
<li><strong>TypeError</strong> – If strategies contains a type other than Strategy.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="property-instance_id--uuid4-1"><em>property</em> instance_id <em>: <a href="../core/index.htm#nautilus_trader.core.uuid.UUID4">UUID4</a></em><a href="#property-instance_id--uuid4-1" class="hash-link" aria-label="Direct link to property-instance_id--uuid4-1" title="Direct link to property-instance_id--uuid4-1">​</a></h4>
<p>Return the traders instance ID.</p>
<ul>
<li><strong>Return type:</strong>
<a href="../core/index.htm#nautilus_trader.core.UUID4">UUID4</a></li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="actors--listactor-1">actors() → list[<a href="../common/index.htm#nautilus_trader.common.actor.Actor">Actor</a>]<a href="#actors--listactor-1" class="hash-link" aria-label="Direct link to actors--listactor-1" title="Direct link to actors--listactor-1">​</a></h4>
<p>Return the actors loaded in the trader.</p>
<ul>
<li><strong>Return type:</strong>
list[<a href="../common/index.htm#nautilus_trader.common.actor.Actor">Actor</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="strategies--liststrategy-1">strategies() → list[<a href="#nautilus_trader.trading.strategy.Strategy">Strategy</a>]<a href="#strategies--liststrategy-1" class="hash-link" aria-label="Direct link to strategies--liststrategy-1" title="Direct link to strategies--liststrategy-1">​</a></h4>
<p>Return the strategies loaded in the trader.</p>
<ul>
<li><strong>Return type:</strong>
list[<a href="#nautilus_trader.trading.Strategy">Strategy</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="exec_algorithms--listany-1">exec_algorithms() → list[Any]<a href="#exec_algorithms--listany-1" class="hash-link" aria-label="Direct link to exec_algorithms() → list[Any]" title="Direct link to exec_algorithms() → list[Any]">​</a></h4>
<p>Return the execution algorithms loaded in the trader.</p>
<ul>
<li><strong>Return type:</strong>
list[ExecAlgorithms]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="actor_ids--listcomponentid-1">actor_ids() → list[<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ComponentId">ComponentId</a>]<a href="#actor_ids--listcomponentid-1" class="hash-link" aria-label="Direct link to actor_ids--listcomponentid-1" title="Direct link to actor_ids--listcomponentid-1">​</a></h4>
<p>Return the actor IDs loaded in the trader.</p>
<ul>
<li><strong>Return type:</strong>
list[<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ComponentId">ComponentId</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="strategy_ids--liststrategyid-1">strategy_ids() → list[<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.StrategyId">StrategyId</a>]<a href="#strategy_ids--liststrategyid-1" class="hash-link" aria-label="Direct link to strategy_ids--liststrategyid-1" title="Direct link to strategy_ids--liststrategyid-1">​</a></h4>
<p>Return the strategy IDs loaded in the trader.</p>
<ul>
<li><strong>Return type:</strong>
list[<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.StrategyId">StrategyId</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="exec_algorithm_ids--listexecalgorithmid-1">exec_algorithm_ids() → list[<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ExecAlgorithmId">ExecAlgorithmId</a>]<a href="#exec_algorithm_ids--listexecalgorithmid-1" class="hash-link" aria-label="Direct link to exec_algorithm_ids--listexecalgorithmid-1" title="Direct link to exec_algorithm_ids--listexecalgorithmid-1">​</a></h4>
<p>Return the execution algorithm IDs loaded in the trader.</p>
<ul>
<li><strong>Return type:</strong>
list[<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ExecAlgorithmId">ExecAlgorithmId</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="actor_states--dictcomponentid-str-1">actor_states() → dict[<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ComponentId">ComponentId</a>, str]<a href="#actor_states--dictcomponentid-str-1" class="hash-link" aria-label="Direct link to actor_states--dictcomponentid-str-1" title="Direct link to actor_states--dictcomponentid-str-1">​</a></h4>
<p>Return the traders actor states.</p>
<ul>
<li><strong>Return type:</strong>
dict[<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ComponentId">ComponentId</a>, str]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="strategy_states--dictstrategyid-str-1">strategy_states() → dict[<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.StrategyId">StrategyId</a>, str]<a href="#strategy_states--dictstrategyid-str-1" class="hash-link" aria-label="Direct link to strategy_states--dictstrategyid-str-1" title="Direct link to strategy_states--dictstrategyid-str-1">​</a></h4>
<p>Return the traders strategy states.</p>
<ul>
<li><strong>Return type:</strong>
dict[<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.StrategyId">StrategyId</a>, str]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="exec_algorithm_states--dictexecalgorithmid-str-1">exec_algorithm_states() → dict[<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ExecAlgorithmId">ExecAlgorithmId</a>, str]<a href="#exec_algorithm_states--dictexecalgorithmid-str-1" class="hash-link" aria-label="Direct link to exec_algorithm_states--dictexecalgorithmid-str-1" title="Direct link to exec_algorithm_states--dictexecalgorithmid-str-1">​</a></h4>
<p>Return the traders execution algorithm states.</p>
<ul>
<li><strong>Return type:</strong>
dict[<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ExecAlgorithmId">ExecAlgorithmId</a>, str]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="add_actoractor-actor--none-1">add_actor(actor: <a href="../common/index.htm#nautilus_trader.common.actor.Actor">Actor</a>) → None<a href="#add_actoractor-actor--none-1" class="hash-link" aria-label="Direct link to add_actoractor-actor--none-1" title="Direct link to add_actoractor-actor--none-1">​</a></h4>
<p>Add the given custom component to the trader.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>actor</strong> (<a href="../common/index.htm#nautilus_trader.common.actor.Actor"><em>Actor</em></a>) – The actor to add and register.</li>
<li><strong>Raises:</strong>
<ul>
<li><strong>ValueError</strong> – If actor.state is <code>RUNNING</code> or <code>DISPOSED</code>.</li>
<li><strong>RuntimeError</strong> – If actor.id already exists in the trader.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="add_actorsactors-listactor--none-1">add_actors(actors: list[<a href="../common/index.htm#nautilus_trader.common.actor.Actor">Actor</a>]) → None<a href="#add_actorsactors-listactor--none-1" class="hash-link" aria-label="Direct link to add_actorsactors-listactor--none-1" title="Direct link to add_actorsactors-listactor--none-1">  ​</a></h4>
<p>Add the given actors to the trader.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>actors</strong> (<em>list</em> *[*<em>TradingStrategies</em> <em>]</em>) – The actors to add and register.</li>
<li><strong>Raises:</strong>
<strong>ValueError</strong> – If actors is <code>None</code> or empty.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="add_strategystrategy-strategy--none-1">add_strategy(strategy: <a href="#nautilus_trader.trading.strategy.Strategy">Strategy</a>) → None<a href="#add_strategystrategy-strategy--none-1" class="hash-link" aria-label="Direct link to add_strategystrategy-strategy--none-1" title="Direct link to add_strategystrategy-strategy--none-1">​</a></h4>
<p>Add the given trading strategy to the trader.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>strategy</strong> (<a href="#nautilus_trader.trading.Strategy"><em>Strategy</em></a>) – The trading strategy to add and register.</li>
<li><strong>Raises:</strong>
<ul>
<li><strong>ValueError</strong> – If strategy.state is <code>RUNNING</code> or <code>DISPOSED</code>.</li>
<li><strong>RuntimeError</strong> – If strategy.id already exists in the trader.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="add_strategiesstrategies-liststrategy--none-1">add_strategies(strategies: list[<a href="#nautilus_trader.trading.strategy.Strategy">Strategy</a>]) → None<a href="#add_strategiesstrategies-liststrategy--none-1" class="hash-link" aria-label="Direct link to add_strategiesstrategies-liststrategy--none-1" title="Direct link to add_strategiesstrategies-liststrategy--none-1">​</a></h4>
<p>Add the given trading strategies to the trader.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>strategies</strong> (<em>list</em> *[*<em>TradingStrategies</em> <em>]</em>) – The trading strategies to add and register.</li>
<li><strong>Raises:</strong>
<strong>ValueError</strong> – If strategies is <code>None</code> or empty.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="add_exec_algorithmexec_algorithm-any--none-1">add_exec_algorithm(exec_algorithm: Any) → None<a href="#add_exec_algorithmexec_algorithm-any--none-1" class="hash-link" aria-label="Direct link to add_exec_algorithm(exec_algorithm: Any) → None" title="Direct link to add_exec_algorithm(exec_algorithm: Any) → None">​</a></h4>
<p>Add the given execution algorithm to the trader.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>exec_algorithm</strong> (<a href="../execution/index.htm#nautilus_trader.execution.algorithm.ExecAlgorithm"><em>ExecAlgorithm</em></a>) – The execution algorithm to add and register.</li>
<li><strong>Raises:</strong>
<ul>
<li><strong>KeyError</strong> – If exec_algorithm.id already exists in the trader.</li>
<li><strong>ValueError</strong> – If exec_algorithm.state is <code>RUNNING</code> or <code>DISPOSED</code>.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="add_exec_algorithmsexec_algorithms-listany--none-1">add_exec_algorithms(exec_algorithms: list[Any]) → None<a href="#add_exec_algorithmsexec_algorithms-listany--none-1" class="hash-link" aria-label="Direct link to add_exec_algorithms(exec_algorithms: list[Any]) → None" title="Direct link to add_exec_algorithms(exec_algorithms: list[Any]) → None">​</a></h4>
<p>Add the given execution algorithms to the trader.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>exec_algorithms</strong> (<em>list</em> <em>[</em><a href="../execution/index.htm#nautilus_trader.execution.algorithm.ExecAlgorithm"><em>ExecAlgorithm</em></a> <em>]</em>) – The execution algorithms to add and register.</li>
<li><strong>Raises:</strong>
<strong>ValueError</strong> – If exec_algorithms is <code>None</code> or empty.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="start_actoractor_id-componentid--none-1">start_actor(actor_id: <a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ComponentId">ComponentId</a>) → None<a href="#start_actoractor_id-componentid--none-1" class="hash-link" aria-label="Direct link to start_actoractor_id-componentid--none-1" title="Direct link to start_actoractor_id-componentid--none-1">​</a></h4>
<p>Start the actor with the given actor_id.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>actor_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ComponentId"><em>ComponentId</em></a>) – The component ID to start.</li>
<li><strong>Raises:</strong>
<strong>ValueError</strong> – If an actor with the given actor_id is not found.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="start_strategystrategy_id-strategyid--none-1">start_strategy(strategy_id: <a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.StrategyId">StrategyId</a>) → None<a href="#start_strategystrategy_id-strategyid--none-1" class="hash-link" aria-label="Direct link to start_strategystrategy_id-strategyid--none-1" title="Direct link to start_strategystrategy_id-strategyid--none-1">​</a></h4>
<p>Start the strategy with the given strategy_id.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>strategy_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.StrategyId"><em>StrategyId</em></a>) – The strategy ID to start.</li>
<li><strong>Raises:</strong>
<strong>ValueError</strong> – If a strategy with the given strategy_id is not found.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="stop_actoractor_id-componentid--none-1">stop_actor(actor_id: <a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ComponentId">ComponentId</a>) → None<a href="#stop_actoractor_id-componentid--none-1" class="hash-link" aria-label="Direct link to stop_actoractor_id-componentid--none-1" title="Direct link to stop_actoractor_id-componentid--none-1">​</a></h4>
<p>Stop the actor with the given actor_id.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>actor_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ComponentId"><em>ComponentId</em></a>) – The actor ID to stop.</li>
<li><strong>Raises:</strong>
<strong>ValueError</strong> – If an actor with the given actor_id is not found.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="stop_strategystrategy_id-strategyid--none-1">stop_strategy(strategy_id: <a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.StrategyId">StrategyId</a>) → None<a href="#stop_strategystrategy_id-strategyid--none-1" class="hash-link" aria-label="Direct link to stop_strategystrategy_id-strategyid--none-1" title="Direct link to stop_strategystrategy_id-strategyid--none-1">​</a></h4>
<p>Stop the strategy with the given strategy_id.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>strategy_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.StrategyId"><em>StrategyId</em></a>) – The strategy ID to stop.</li>
<li><strong>Raises:</strong>
<strong>ValueError</strong> – If a strategy with the given strategy_id is not found.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="remove_actoractor_id-componentid--none-1">remove_actor(actor_id: <a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ComponentId">ComponentId</a>) → None<a href="#remove_actoractor_id-componentid--none-1" class="hash-link" aria-label="Direct link to remove_actoractor_id-componentid--none-1" title="Direct link to remove_actoractor_id-componentid--none-1">​</a></h4>
<p>Remove the actor with the given actor_id.</p>
<p>Will stop the actor first if state is <code>RUNNING</code>.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>actor_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ComponentId"><em>ComponentId</em></a>) – The actor ID to remove.</li>
<li><strong>Raises:</strong>
<strong>ValueError</strong> – If an actor with the given actor_id is not found.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="remove_strategystrategy_id-strategyid--none-1">remove_strategy(strategy_id: <a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.StrategyId">StrategyId</a>) → None<a href="#remove_strategystrategy_id-strategyid--none-1" class="hash-link" aria-label="Direct link to remove_strategystrategy_id-strategyid--none-1" title="Direct link to remove_strategystrategy_id-strategyid--none-1">​</a></h4>
<p>Remove the strategy with the given strategy_id.</p>
<p>Will stop the strategy first if state is <code>RUNNING</code>.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>strategy_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.StrategyId"><em>StrategyId</em></a>) – The strategy ID to remove.</li>
<li><strong>Raises:</strong>
<strong>ValueError</strong> – If a strategy with the given strategy_id is not found.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="clear_actors--none-1">clear_actors() → None<a href="#clear_actors--none-1" class="hash-link" aria-label="Direct link to clear_actors() → None" title="Direct link to clear_actors() → None">​</a></h4>
<p>Dispose and clear all actors held by the trader.</p>
<ul>
<li><strong>Raises:</strong>
<strong>ValueError</strong> – If state is <code>RUNNING</code>.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="clear_strategies--none-1">clear_strategies() → None<a href="#clear_strategies--none-1" class="hash-link" aria-label="Direct link to clear_strategies() → None" title="Direct link to clear_strategies() → None">​</a></h4>
<p>Dispose and clear all strategies held by the trader.</p>
<ul>
<li><strong>Raises:</strong>
<strong>ValueError</strong> – If state is <code>RUNNING</code>.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="clear_exec_algorithms--none-1">clear_exec_algorithms() → None<a href="#clear_exec_algorithms--none-1" class="hash-link" aria-label="Direct link to clear_exec_algorithms() → None" title="Direct link to clear_exec_algorithms() → None">​</a></h4>
<p>Dispose and clear all execution algorithms held by the trader.</p>
<ul>
<li><strong>Raises:</strong>
<strong>ValueError</strong> – If state is <code>RUNNING</code>.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribetopic-str-handler-callableany-none--none-1">subscribe(topic: str, handler: Callable[[Any], None]) → None<a href="#subscribetopic-str-handler-callableany-none--none-1" class="hash-link" aria-label="Direct link to subscribe(topic: str, handler: Callable[[Any], None]) → None" title="Direct link to subscribe(topic: str, handler: Callable[[Any], None]) → None">​</a></h4>
<p>Subscribe to the given message topic with the given callback handler.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>topic</strong> (<em>str</em>) – The topic for the subscription. May include wildcard glob patterns.</li>
<li><strong>handler</strong> (<em>Callable</em> <em>[</em> *[*<em>Any</em> <em>]</em> <em>,</em> <em>None</em> <em>]</em>) – The handler for the subscription.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribetopic-str-handler-callableany-none--none-1">unsubscribe(topic: str, handler: Callable[[Any], None]) → None<a href="#unsubscribetopic-str-handler-callableany-none--none-1" class="hash-link" aria-label="Direct link to unsubscribe(topic: str, handler: Callable[[Any], None]) → None" title="Direct link to unsubscribe(topic: str, handler: Callable[[Any], None]) → None">​</a></h4>
<p>Unsubscribe the given handler from the given message topic.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>topic</strong> (<em>str</em> <em>,</em> <em>optional</em>) – The topic to unsubscribe from. May include wildcard glob patterns.</li>
<li><strong>handler</strong> (<em>Callable</em> <em>[</em> *[*<em>Any</em> <em>]</em> <em>,</em> <em>None</em> <em>]</em>) – The handler for the subscription.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="save--none-1">save() → None<a href="#save--none-1" class="hash-link" aria-label="Direct link to save() → None" title="Direct link to save() → None">​</a></h4>
<p>Save all actor and strategy states to the cache.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="load--none-1">load() → None<a href="#load--none-1" class="hash-link" aria-label="Direct link to load() → None" title="Direct link to load() → None">​</a></h4>
<p>Load all actor and strategy states from the cache.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="check_residuals--none-1">check_residuals() → None<a href="#check_residuals--none-1" class="hash-link" aria-label="Direct link to check_residuals() → None" title="Direct link to check_residuals() → None">​</a></h4>
<p>Check for residual open state such as open orders or open positions.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="generate_orders_report--dataframe-1">generate_orders_report() → DataFrame<a href="#generate_orders_report--dataframe-1" class="hash-link" aria-label="Direct link to generate_orders_report() → DataFrame" title="Direct link to generate_orders_report() → DataFrame">​</a></h4>
<p>Generate an orders report.</p>
<ul>
<li><strong>Return type:</strong>
pd.DataFrame</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="generate_order_fills_report--dataframe-1">generate_order_fills_report() → DataFrame<a href="#generate_order_fills_report--dataframe-1" class="hash-link" aria-label="Direct link to generate_order_fills_report() → DataFrame" title="Direct link to generate_order_fills_report() → DataFrame">​</a></h4>
<p>Generate an order fills report.</p>
<ul>
<li><strong>Return type:</strong>
pd.DataFrame</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="generate_fills_report--dataframe-1">generate_fills_report() → DataFrame<a href="#generate_fills_report--dataframe-1" class="hash-link" aria-label="Direct link to generate_fills_report() → DataFrame" title="Direct link to generate_fills_report() → DataFrame">​</a></h4>
<p>Generate a fills report.</p>
<ul>
<li><strong>Return type:</strong>
pd.DataFrame</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="generate_positions_report--dataframe-1">generate_positions_report() → DataFrame<a href="#generate_positions_report--dataframe-1" class="hash-link" aria-label="Direct link to generate_positions_report() → DataFrame" title="Direct link to generate_positions_report() → DataFrame">​</a></h4>
<p>Generate a positions report.</p>
<ul>
<li><strong>Return type:</strong>
pd.DataFrame</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="generate_account_reportvenue-venue--dataframe-1">generate_account_report(venue: <a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.Venue">Venue</a>) → DataFrame<a href="#generate_account_reportvenue-venue--dataframe-1" class="hash-link" aria-label="Direct link to generate_account_reportvenue-venue--dataframe-1" title="Direct link to generate_account_reportvenue-venue--dataframe-1">​</a></h4>
<p>Generate an account report.</p>
<ul>
<li><strong>Return type:</strong>
pd.DataFrame</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="degradeself--void-2">degrade(self) → void<a href="#degradeself--void-2" class="hash-link" aria-label="Direct link to degrade(self) → void" title="Direct link to degrade(self) → void">​</a></h4>
<p>Degrade the component.</p>
<p>While executing on_degrade() any exception will be logged and reraised, then the component
will remain in a <code>DEGRADING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-158">WARNING<a href="#warning-158" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="disposeself--void-2">dispose(self) → void<a href="#disposeself--void-2" class="hash-link" aria-label="Direct link to dispose(self) → void" title="Direct link to dispose(self) → void">​</a></h4>
<p>Dispose of the component.</p>
<p>While executing on_dispose() any exception will be logged and reraised, then the component
will remain in a <code>DISPOSING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-159">WARNING<a href="#warning-159" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="faultself--void-2">fault(self) → void<a href="#faultself--void-2" class="hash-link" aria-label="Direct link to fault(self) → void" title="Direct link to fault(self) → void">​</a></h4>
<p>Fault the component.</p>
<p>Calling this method multiple times has the same effect as calling it once (it is idempotent).
Once called, it cannot be reversed, and no other methods should be called on this instance.</p>
<p>While executing on_fault() any exception will be logged and reraised, then the component
will remain in a <code>FAULTING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-160">WARNING<a href="#warning-160" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="classmethod-fully_qualified_namecls--str-3"><em>classmethod</em> fully_qualified_name(cls) → str<a href="#classmethod-fully_qualified_namecls--str-3" class="hash-link" aria-label="Direct link to classmethod-fully_qualified_namecls--str-3" title="Direct link to classmethod-fully_qualified_namecls--str-3">​</a></h4>
<p>Return the fully qualified name for the components class.</p>
<ul>
<li><strong>Return type:</strong>
str</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="id-2">id<a href="#id-2" class="hash-link" aria-label="Direct link to id" title="Direct link to id">​</a></h4>
<p>The components ID.</p>
<ul>
<li><strong>Returns:</strong>
ComponentId</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_degraded-2">is_degraded<a href="#is_degraded-2" class="hash-link" aria-label="Direct link to is_degraded" title="Direct link to is_degraded">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>DEGRADED</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_degraded</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_disposed-2">is_disposed<a href="#is_disposed-2" class="hash-link" aria-label="Direct link to is_disposed" title="Direct link to is_disposed">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>DISPOSED</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_disposed</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_faulted-2">is_faulted<a href="#is_faulted-2" class="hash-link" aria-label="Direct link to is_faulted" title="Direct link to is_faulted">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>FAULTED</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_faulted</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_initialized-2">is_initialized<a href="#is_initialized-2" class="hash-link" aria-label="Direct link to is_initialized" title="Direct link to is_initialized">​</a></h4>
<p>bool</p>
<p>Return whether the component has been initialized (component.state &gt;= <code>INITIALIZED</code>).</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_initialized</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_running-2">is_running<a href="#is_running-2" class="hash-link" aria-label="Direct link to is_running" title="Direct link to is_running">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>RUNNING</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_running</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_stopped-2">is_stopped<a href="#is_stopped-2" class="hash-link" aria-label="Direct link to is_stopped" title="Direct link to is_stopped">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>STOPPED</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_stopped</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="resetself--void-2">reset(self) → void<a href="#resetself--void-2" class="hash-link" aria-label="Direct link to reset(self) → void" title="Direct link to reset(self) → void">​</a></h4>
<p>Reset the component.</p>
<p>All stateful fields are reset to their initial value.</p>
<p>While executing on_reset() any exception will be logged and reraised, then the component
will remain in a <code>RESETTING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-161">WARNING<a href="#warning-161" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="resumeself--void-2">resume(self) → void<a href="#resumeself--void-2" class="hash-link" aria-label="Direct link to resume(self) → void" title="Direct link to resume(self) → void">​</a></h4>
<p>Resume the component.</p>
<p>While executing on_resume() any exception will be logged and reraised, then the component
will remain in a <code>RESUMING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-162">WARNING<a href="#warning-162" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="shutdown_systemself-str-reasonnone--void-2">shutdown_system(self, str reason=None) → void<a href="#shutdown_systemself-str-reasonnone--void-2" class="hash-link" aria-label="Direct link to shutdown_system(self, str reason=None) → void" title="Direct link to shutdown_system(self, str reason=None) → void">​</a></h4>
<p>Initiate a system-wide shutdown by generating and publishing a ShutdownSystem command.</p>
<p>The command is handled by the system’s NautilusKernel, which will invoke either stop (synchronously)
or stop_async (asynchronously) depending on the execution context and the presence of an active event loop.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>reason</strong> (<em>str</em> <em>,</em> <em>optional</em>) – The reason for issuing the shutdown command.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="startself--void-2">start(self) → void<a href="#startself--void-2" class="hash-link" aria-label="Direct link to start(self) → void" title="Direct link to start(self) → void">​</a></h4>
<p>Start the component.</p>
<p>While executing on_start() any exception will be logged and reraised, then the component
will remain in a <code>STARTING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-163">WARNING<a href="#warning-163" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="state-2">state<a href="#state-2" class="hash-link" aria-label="Direct link to state" title="Direct link to state">​</a></h4>
<p>ComponentState</p>
<p>Return the components current state.</p>
<ul>
<li><strong>Return type:</strong>
ComponentState</li>
<li><strong>Type:</strong>
Component.state</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="stopself--void-2">stop(self) → void<a href="#stopself--void-2" class="hash-link" aria-label="Direct link to stop(self) → void" title="Direct link to stop(self) → void">​</a></h4>
<p>Stop the component.</p>
<p>While executing on_stop() any exception will be logged and reraised, then the component
will remain in a <code>STOPPING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-164">WARNING<a href="#warning-164" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="trader_id-2">trader_id<a href="#trader_id-2" class="hash-link" aria-label="Direct link to trader_id" title="Direct link to trader_id">​</a></h4>
<p>The trader ID associated with the component.</p>
<ul>
<li><strong>Returns:</strong>
TraderId</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="type-2">type<a href="#type-2" class="hash-link" aria-label="Direct link to type" title="Direct link to type">​</a></h4>
<p>The components type.</p>
<ul>
<li><strong>Returns:</strong>
type</li>
</ul></div></article><nav class="docusaurus-mt-lg pagination-nav" aria-label="Docs pages"><a class="pagination-nav__link pagination-nav__link--prev" href="../system/index.htm"><div class="pagination-nav__sublabel">Previous</div><div class="pagination-nav__label">System</div></a><a class="pagination-nav__link pagination-nav__link--next" href="../../developer_guide/index.htm"><div class="pagination-nav__sublabel">Next</div><div class="pagination-nav__label">Developer Guide</div></a></nav></div></div><div class="col col--3"><div class="tableOfContents_bqdL thin-scrollbar theme-doc-toc-desktop"><ul class="table-of-contents table-of-contents__left-border"><li><a href="#class-controller" class="table-of-contents__link toc-highlight"><em>class</em> Controller</a></li><li><a href="#class-strategy" class="table-of-contents__link toc-highlight"><em>class</em> Strategy</a></li><li><a href="#class-trader" class="table-of-contents__link toc-highlight"><em>class</em> Trader</a></li><li><a href="#class-controller-1" class="table-of-contents__link toc-highlight"><em>class</em> Controller</a></li><li><a href="#class-newsimpact" class="table-of-contents__link toc-highlight"><em>class</em> NewsImpact</a></li><li><a href="#class-newsevent" class="table-of-contents__link toc-highlight"><em>class</em> NewsEvent</a></li><li><a href="#class-economicnewseventfilter" class="table-of-contents__link toc-highlight"><em>class</em> EconomicNewsEventFilter</a></li><li><a href="#class-strategy-1" class="table-of-contents__link toc-highlight"><em>class</em> Strategy</a></li><li><a href="#class-trader-1" class="table-of-contents__link toc-highlight"><em>class</em> Trader</a></li></ul></div></div></div><div class="footer-wrapper MuiBox-root css-0"><div class="social-footer-box MuiBox-root css-0"><style data-emotion="css 17rjyz3">.css-17rjyz3{-webkit-text-decoration:underline;text-decoration:underline;text-decoration-color:rgba(25, 118, 210, 0.4);padding:12px;margin-right:10px;}.css-17rjyz3:hover{text-decoration-color:inherit;}</style><style data-emotion="css jl1bw5">.css-jl1bw5{margin:0;font:inherit;color:#1976d2;-webkit-text-decoration:underline;text-decoration:underline;text-decoration-color:rgba(25, 118, 210, 0.4);padding:12px;margin-right:10px;}.css-jl1bw5:hover{text-decoration-color:inherit;}</style><a class="MuiTypography-root MuiTypography-inherit MuiLink-root MuiLink-underlineAlways github-footer css-jl1bw5" href="https://github.com/nautechsystems/nautilus_trader" target="_blank"></a><a class="MuiTypography-root MuiTypography-inherit MuiLink-root MuiLink-underlineAlways discord-footer css-jl1bw5" href="https://discord.gg/NautilusTrader" target="_blank"></a><a class="MuiTypography-root MuiTypography-inherit MuiLink-root MuiLink-underlineAlways linkedin-footer css-jl1bw5" href="https://www.linkedin.com/company/nautechsystems/" target="_blank"></a><a class="MuiTypography-root MuiTypography-inherit MuiLink-root MuiLink-underlineAlways x-footer css-jl1bw5" href="https://twitter.com/NautilusTrader" target="_blank"></a></div><div class="footer-copyright">© 2025 Nautech Systems Pty Ltd. All rights reserved.</div></div></div></div></main></div></div></div></div>
</body>
</html>