<!doctype html>
<html lang="en" dir="ltr" class="docs-wrapper plugin-docs plugin-id-default docs-version-nightly docs-doc-page docs-doc-id-api_reference/live" data-has-hydrated="false">
<head>
<meta charset="UTF-8">
<meta name="generator" content="Docusaurus v3.8.1">
<title data-rh="true">Live | NautilusTrader Documentation</title><meta data-rh="true" name="viewport" content="width=device-width,initial-scale=1"><meta data-rh="true" name="twitter:card" content="summary_large_image"><meta data-rh="true" property="og:image" content="https://nautilustrader.io/docs/img/docusaurus-social-card.jpg"><meta data-rh="true" name="twitter:image" content="https://nautilustrader.io/docs/img/docusaurus-social-card.jpg"><meta data-rh="true" property="og:url" content="https://nautilustrader.io/docs/nightly/api_reference/live"><meta data-rh="true" property="og:locale" content="en"><meta data-rh="true" name="docusaurus_locale" content="en"><meta data-rh="true" name="docsearch:language" content="en"><meta data-rh="true" name="keywords" content="Open-source trading platform, Algorithmic trading software, Event-driven backtesting, Live trading with no code changes, Trade any asset class, Low-latency trading execution, Python API for trading strategies, Custom market data integration, Futures and options trading, Crypto spot and derivatives trading, Equities trading simulation, FX spot trading, Sports betting markets trading, Fast backtesting strategies, Advanced trading orders, Rust-based trading platform, High-performance trading system, Nanosecond resolution market simulation, Trading across multiple venues, Trading platform for hedge funds, Seamless data integration, Customizable trading strategies, AI and ML trading strategies, Nautilus trading platform, Multi-venue trading, Unlimited backtesting strategies, Fast trading execution solutions, Realistic market simulations, Seamless trading API integration, NautilusTrader Documentation, Docs, NautilusTrader Docs"><meta data-rh="true" name="title" content="NautilusTrader Documentation"><meta data-rh="true" name="og:title" content="NautilusTrader Documentation"><meta data-rh="true" name="og:description" content="NautilusTrader is a high-performance platform for automating trading strategies, built on the powerful Nautilus framework for backtesting and real-time trading."><meta data-rh="true" name="og:image" content="img/preview.png"><meta data-rh="true" name="og:url" content="https://nautilustrader.io/docs"><meta data-rh="true" name="docusaurus_version" content="nightly"><meta data-rh="true" name="docusaurus_tag" content="docs-default-nightly"><meta data-rh="true" name="docsearch:version" content="nightly"><meta data-rh="true" name="docsearch:docusaurus_tag" content="docs-default-nightly"><meta data-rh="true" property="og:title" content="Live | NautilusTrader Documentation"><meta data-rh="true" name="description" content="The live subpackage groups all engine and client implementations for live trading."><meta data-rh="true" property="og:description" content="The live subpackage groups all engine and client implementations for live trading."><link data-rh="true" rel="icon" href="../../../img/shell.ico"><link data-rh="true" rel="canonical" href="index.htm"><link data-rh="true" rel="alternate" href="index.htm" hreflang="en"><link data-rh="true" rel="alternate" href="index.htm" hreflang="x-default"><link data-rh="true" rel="preconnect" href="https://CWRKEEL01M-dsn.algolia.net" crossorigin="anonymous"><script data-rh="true" type="application/ld+json">{"@context":"https://schema.org","@type":"BreadcrumbList","itemListElement":[{"@type":"ListItem","position":1,"name":"Python API","item":"https://nautilustrader.io/docs/nightly/api_reference/"},{"@type":"ListItem","position":2,"name":"Live","item":"https://nautilustrader.io/docs/nightly/api_reference/live"}]}</script><link rel="search" type="application/opensearchdescription+xml" title="NautilusTrader Documentation" href="../../../opensearch.xml">
<script>!function(){var t=window.location.pathname;if(t.startsWith("/docs")&&!t.startsWith("/docs/latest")&&!t.startsWith("/docs/nightly")){var s=t.replace("/docs","/docs/latest");window.location.href=s}}()</script>
<link rel="preconnect" href="https://www.google-analytics.com">
<link rel="preconnect" href="https://www.googletagmanager.com">
<script async src="https://www.googletagmanager.com/gtag/js?id=G-TR4XK597XK"></script>
<script>function gtag(){dataLayer.push(arguments)}window.dataLayer=window.dataLayer||[],gtag("js",new Date),gtag("config","G-TR4XK597XK",{anonymize_ip:!0})</script><link rel="stylesheet" href="../../../assets/css/styles.0f0f692e.css">
<script src="../../../assets/js/runtime~main.92b727d5.js" defer="defer"></script>
<script src="../../../assets/js/main.1cd42d85.js" defer="defer"></script>
</head>
<body class="navigation-with-keyboard">
<svg xmlns="http://www.w3.org/2000/svg" style="display: none;"><defs>
<symbol id="theme-svg-external-link" viewbox="0 0 24 24"><path fill="currentColor" d="M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z"></path></symbol>
</defs></svg>
<script>!function(){var t="dark";var e=function(){try{return new URLSearchParams(window.location.search).get("docusaurus-theme")}catch(t){}}()||function(){try{return window.localStorage.getItem("theme")}catch(t){}}();document.documentElement.setAttribute("data-theme",e||t),document.documentElement.setAttribute("data-theme-choice",e||t)}(),function(){try{const c=new URLSearchParams(window.location.search).entries();for(var[t,e]of c)if(t.startsWith("docusaurus-data-")){var a=t.replace("docusaurus-data-","data-");document.documentElement.setAttribute(a,e)}}catch(t){}}()</script><div id="__docusaurus"><div role="region" aria-label="Skip to main content"><a class="skipToContent_fXgn" href="#__docusaurus_skipToContent_fallback">Skip to main content</a></div><nav aria-label="Main" class="theme-layout-navbar navbar navbar--fixed-top navbarHideable_m1mJ"><div class="navbar__inner"><div class="theme-layout-navbar-left navbar__items"><button aria-label="Toggle navigation bar" aria-expanded="false" class="navbar__toggle clean-btn" type="button"><svg width="30" height="30" viewbox="0 0 30 30" aria-hidden="true"><path stroke="currentColor" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" d="M4 7h22M4 15h22M4 23h22"></path></svg></button><a href="../../../../index.htm" target="_blank" rel="noopener noreferrer" class="navbar__brand"><div class="navbar__logo"><img src="../../../img/nt-black-large.webp" alt="NautilusTrader Logo" class="themedComponent_mlkZ themedComponent--light_NVdE"><img src="../../../img/nt-white-large.webp" alt="NautilusTrader Logo" class="themedComponent_mlkZ themedComponent--dark_xIcU"></div><b class="navbar__title text--truncate"></b></a><div class="navbar__item dropdown dropdown--hoverable"><a href="#" aria-haspopup="true" aria-expanded="false" role="button" class="navbar__link">Version</a><ul class="dropdown__menu"><li><a class="dropdown__link" href="../../../latest/index.htm">latest</a></li><li><a aria-current="page" class="dropdown__link dropdown__link--active" href="../../index.htm">nightly</a></li></ul></div><div class="navbarSearchContainer_Bca1"><button type="button" class="DocSearch DocSearch-Button" aria-label="Search (Command+K)"><span class="DocSearch-Button-Container"><svg width="20" height="20" class="DocSearch-Search-Icon" viewbox="0 0 20 20" aria-hidden="true"><path d="M14.386 14.386l4.0877 4.0877-4.0877-4.0877c-2.9418 2.9419-7.7115 2.9419-10.6533 0-2.9419-2.9418-2.9419-7.7115 0-10.6533 2.9418-2.9419 7.7115-2.9419 10.6533 0 2.9419 2.9418 2.9419 7.7115 0 10.6533z" stroke="currentColor" fill="none" fill-rule="evenodd" stroke-linecap="round" stroke-linejoin="round"></path></svg><span class="DocSearch-Button-Placeholder">Search</span></span><span class="DocSearch-Button-Keys"></span></button></div></div><div class="theme-layout-navbar-right navbar__items navbar__items--right"><a href="https://github.com/nautechsystems/nautilus_trader" target="_blank" rel="noopener noreferrer" class="navbar__item navbar__link header-github-link common-social" aria-label="GitHub repository"></a><a href="https://discord.gg/NautilusTrader" target="_blank" rel="noopener noreferrer" class="navbar__item navbar__link header-discord-link common-social" aria-label="Discord"></a><a href="https://www.linkedin.com/company/nautechsystems/" target="_blank" rel="noopener noreferrer" class="navbar__item navbar__link header-linkedin-link common-social" aria-label="Linkedin"></a><a href="https://twitter.com/NautilusTrader" target="_blank" rel="noopener noreferrer" class="navbar__item navbar__link header-x-link common-social" aria-label="X"></a><div class="toggleContainer_T22x colorModeToggle_DEke"><button class="clean-btn toggleButton_yw5v toggleButtonDisabled_BJd7" type="button" disabled="" title="Switch between dark and light mode (currently light mode)" aria-label="Switch between dark and light mode (currently light mode)" aria-live="polite"><div class="switch_Ms1n"><span class="iconWrapper_FHql"><style data-emotion="css lp52so">.css-lp52so{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;width:1em;height:1em;display:inline-block;fill:currentColor;-webkit-flex-shrink:0;-ms-flex-negative:0;flex-shrink:0;-webkit-transition:fill 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;transition:fill 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;font-size:1.5rem;color:black;font-size:14px;}</style><svg class="MuiSvgIcon-root MuiSvgIcon-fontSizeMedium lightToggleIcon_SFTY css-lp52so" focusable="false" aria-hidden="true" viewbox="0 0 24 24" data-testid="LightModeIcon"><path d="M12 7c-2.76 0-5 2.24-5 5s2.24 5 5 5 5-2.24 5-5-2.24-5-5-5M2 13h2c.55 0 1-.45 1-1s-.45-1-1-1H2c-.55 0-1 .45-1 1s.45 1 1 1m18 0h2c.55 0 1-.45 1-1s-.45-1-1-1h-2c-.55 0-1 .45-1 1s.45 1 1 1M11 2v2c0 .55.45 1 1 1s1-.45 1-1V2c0-.55-.45-1-1-1s-1 .45-1 1m0 18v2c0 .55.45 1 1 1s1-.45 1-1v-2c0-.55-.45-1-1-1s-1 .45-1 1M5.99 4.58c-.39-.39-1.03-.39-1.41 0-.39.39-.39 1.03 0 1.41l1.06 1.06c.39.39 1.03.39 1.41 0s.39-1.03 0-1.41zm12.37 12.37c-.39-.39-1.03-.39-1.41 0-.39.39-.39 1.03 0 1.41l1.06 1.06c.39.39 1.03.39 1.41 0 .39-.39.39-1.03 0-1.41zm1.06-10.96c.39-.39.39-1.03 0-1.41-.39-.39-1.03-.39-1.41 0l-1.06 1.06c-.39.39-.39 1.03 0 1.41s1.03.39 1.41 0zM7.05 18.36c.39-.39.39-1.03 0-1.41-.39-.39-1.03-.39-1.41 0l-1.06 1.06c-.39.39-.39 1.03 0 1.41s1.03.39 1.41 0z"></path></svg><style data-emotion="css 13m6tje">.css-13m6tje{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;width:1em;height:1em;display:inline-block;fill:currentColor;-webkit-flex-shrink:0;-ms-flex-negative:0;flex-shrink:0;-webkit-transition:fill 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;transition:fill 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;font-size:1.5rem;color:white;font-size:14px;}</style><svg class="MuiSvgIcon-root MuiSvgIcon-fontSizeMedium darkToggleIcon_ekgs css-13m6tje" focusable="false" aria-hidden="true" viewbox="0 0 24 24" data-testid="DarkModeIcon"><path d="M12 3c-4.97 0-9 4.03-9 9s4.03 9 9 9 9-4.03 9-9c0-.46-.04-.92-.1-1.36-.98 1.37-2.58 2.26-4.4 2.26-2.98 0-5.4-2.42-5.4-5.4 0-1.81.89-3.42 2.26-4.4-.44-.06-.9-.1-1.36-.1"></path></svg></span></div></button></div></div></div><div role="presentation" class="navbar-sidebar__backdrop"></div></nav><div id="__docusaurus_skipToContent_fallback" class="theme-layout-main main-wrapper mainWrapper_z2l0"><div class="docsWrapper_hBAB"><button aria-label="Scroll back to top" class="clean-btn theme-back-to-top-button backToTopButton_sjWU" type="button"></button><div class="docRoot_UBD9"><aside class="theme-doc-sidebar-container docSidebarContainer_YfHR"><div class="sidebarViewport_aRkj"><div class="sidebar_njMd sidebarWithHideableNavbar_wUlq"><a href="../../../../index.htm" target="_blank" rel="noopener noreferrer" tabindex="-1" class="sidebarLogo_isFc"><img src="../../../img/nt-black-large.webp" alt="NautilusTrader Logo" class="themedComponent_mlkZ themedComponent--light_NVdE"><img src="../../../img/nt-white-large.webp" alt="NautilusTrader Logo" class="themedComponent_mlkZ themedComponent--dark_xIcU"><b></b></a><nav aria-label="Docs sidebar" class="menu thin-scrollbar menu_SIkG"><ul class="theme-doc-sidebar-menu menu__list"><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-1 menu__list-item"><a class="menu__link" href="../../index.htm">NautilusTrader Documentation</a></li><li class="theme-doc-sidebar-item-category theme-doc-sidebar-item-category-level-1 menu__list-item menu__list-item--collapsed"><div class="menu__list-item-collapsible"><a class="menu__link menu__link--sublist" href="../../getting_started/index.htm">Getting Started</a><button aria-label="Expand sidebar category &#x27;Getting Started&#x27;" aria-expanded="false" type="button" class="clean-btn menu__caret"></button></div></li><li class="theme-doc-sidebar-item-category theme-doc-sidebar-item-category-level-1 menu__list-item menu__list-item--collapsed"><div class="menu__list-item-collapsible"><a class="menu__link menu__link--sublist" href="../../concepts/index.htm">Concepts</a><button aria-label="Expand sidebar category &#x27;Concepts&#x27;" aria-expanded="false" type="button" class="clean-btn menu__caret"></button></div></li><li class="theme-doc-sidebar-item-category theme-doc-sidebar-item-category-level-1 menu__list-item menu__list-item--collapsed"><div class="menu__list-item-collapsible"><a class="menu__link menu__link--sublist" href="../../tutorials/index.htm">Tutorials</a><button aria-label="Expand sidebar category &#x27;Tutorials&#x27;" aria-expanded="false" type="button" class="clean-btn menu__caret"></button></div></li><li class="theme-doc-sidebar-item-category theme-doc-sidebar-item-category-level-1 menu__list-item menu__list-item--collapsed"><div class="menu__list-item-collapsible"><a class="menu__link menu__link--sublist" href="../../integrations/index.htm">Integrations</a><button aria-label="Expand sidebar category &#x27;Integrations&#x27;" aria-expanded="false" type="button" class="clean-btn menu__caret"></button></div></li><li class="theme-doc-sidebar-item-category theme-doc-sidebar-item-category-level-1 menu__list-item"><div class="menu__list-item-collapsible"><a class="menu__link menu__link--sublist menu__link--active" href="../index.htm">Python API</a><button aria-label="Collapse sidebar category &#x27;Python API&#x27;" aria-expanded="true" type="button" class="clean-btn menu__caret"></button></div><ul class="menu__list"><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-2 menu__list-item"><a class="menu__link" tabindex="0" href="../accounting/index.htm">Accounting</a></li><li class="theme-doc-sidebar-item-category theme-doc-sidebar-item-category-level-2 menu__list-item menu__list-item--collapsed"><div class="menu__list-item-collapsible"><a class="menu__link menu__link--sublist" tabindex="0" href="../adapters/index.htm">Adapters</a><button aria-label="Expand sidebar category &#x27;Adapters&#x27;" aria-expanded="false" type="button" class="clean-btn menu__caret"></button></div></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-2 menu__list-item"><a class="menu__link" tabindex="0" href="../analysis/index.htm">Analysis</a></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-2 menu__list-item"><a class="menu__link" tabindex="0" href="../backtest/index.htm">Backtest</a></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-2 menu__list-item"><a class="menu__link" tabindex="0" href="../cache/index.htm">Cache</a></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-2 menu__list-item"><a class="menu__link" tabindex="0" href="../common/index.htm">Common</a></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-2 menu__list-item"><a class="menu__link" tabindex="0" href="../config/index.htm">Config</a></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-2 menu__list-item"><a class="menu__link" tabindex="0" href="../core/index.htm">Core</a></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-2 menu__list-item"><a class="menu__link" tabindex="0" href="../data/index.htm">Data</a></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-2 menu__list-item"><a class="menu__link" tabindex="0" href="../execution/index.htm">Execution</a></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-2 menu__list-item"><a class="menu__link" tabindex="0" href="../indicators/index.htm">Indicators</a></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-2 menu__list-item"><a class="menu__link menu__link--active" aria-current="page" tabindex="0" href="index.htm">Live</a></li><li class="theme-doc-sidebar-item-category theme-doc-sidebar-item-category-level-2 menu__list-item menu__list-item--collapsed"><div class="menu__list-item-collapsible"><a class="menu__link menu__link--sublist" tabindex="0" href="../model/index.htm">Model</a><button aria-label="Expand sidebar category &#x27;Model&#x27;" aria-expanded="false" type="button" class="clean-btn menu__caret"></button></div></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-2 menu__list-item"><a class="menu__link" tabindex="0" href="../persistence/index.htm">Persistence</a></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-2 menu__list-item"><a class="menu__link" tabindex="0" href="../portfolio/index.htm">Portfolio</a></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-2 menu__list-item"><a class="menu__link" tabindex="0" href="../risk/index.htm">Risk</a></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-2 menu__list-item"><a class="menu__link" tabindex="0" href="../serialization/index.htm">Serialization</a></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-2 menu__list-item"><a class="menu__link" tabindex="0" href="../system/index.htm">System</a></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-2 menu__list-item"><a class="menu__link" tabindex="0" href="../trading/index.htm">Trading</a></li></ul></li><li class="theme-doc-sidebar-item-link theme-doc-sidebar-item-link-level-1 menu__list-item"><a href="../../../core-nightly/index.htm" target="_blank" rel="noopener noreferrer" class="menu__link menuExternalLink_NmtK">Rust API<svg width="13.5" height="13.5" aria-hidden="true" class="iconExternalLink_nPIU"><use href="#theme-svg-external-link"></use></svg></a></li><li class="theme-doc-sidebar-item-category theme-doc-sidebar-item-category-level-1 menu__list-item menu__list-item--collapsed"><div class="menu__list-item-collapsible"><a class="menu__link menu__link--sublist" href="../../developer_guide/index.htm">Developer Guide</a><button aria-label="Expand sidebar category &#x27;Developer Guide&#x27;" aria-expanded="false" type="button" class="clean-btn menu__caret"></button></div></li></ul></nav></div></div></aside><main class="docMainContainer_TBSr"><div class="container padding-top--md padding-bottom--lg"><div><div class="row"><div class="col docItemCol_VOVn"><div class="docItemContainer_Djhp"><article><nav class="theme-doc-breadcrumbs breadcrumbsContainer_Z_bl" aria-label="Breadcrumbs"><ul class="breadcrumbs"><li class="breadcrumbs__item"><a class="breadcrumbs__link" href="../index.htm"><span>Python API</span></a></li><li class="breadcrumbs__item breadcrumbs__item--active"><span class="breadcrumbs__link">Live</span></li></ul></nav><span class="theme-doc-version-badge badge badge--secondary">Version: nightly</span><div class="tocCollapsible_ETCw theme-doc-toc-mobile tocMobile_ITEo"><button type="button" class="clean-btn tocCollapsibleButton_TO0P">On this page</button></div><div class="theme-doc-markdown markdown"><header><h1>Live</h1></header>
<p>The live subpackage groups all engine and client implementations for live trading.</p>
<p>Generally a common event loop is passed into each live engine to support the overarching
design of a single efficient event loop, by default
<a href="https://github.com/MagicStack/uvloop" target="_blank" rel="noopener noreferrer">uvloop</a>.</p>
<p><a id="module-nautilus_trader.live.data_client"></a></p>
<p>The LiveDataClient class is responsible for interfacing with a particular API which
may be presented directly by a venue, or through a broker intermediary.</p>
<p>It could also be possible to write clients for specialized data providers.</p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="class-livedataclient"><em>class</em> LiveDataClient<a href="#class-livedataclient" class="hash-link" aria-label="Direct link to class-livedataclient" title="Direct link to class-livedataclient">​</a></h3>
<p>Bases: <a href="../data/index.htm#nautilus_trader.data.client.DataClient"><code>DataClient</code></a></p>
<p>The base class for all live data clients.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>loop</strong> (<em>asyncio.AbstractEventLoop</em>) – The event loop for the client.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a>) – The client ID.</li>
<li><strong>venue</strong> (Venue or <code>None</code>) – The client venue. If multi-venue then can be <code>None</code>.</li>
<li><strong>msgbus</strong> (<a href="../common/index.htm#nautilus_trader.common.component.MessageBus"><em>MessageBus</em></a>) – The message bus for the client.</li>
<li><strong>cache</strong> (<a href="../cache/index.htm#nautilus_trader.cache.Cache"><em>Cache</em></a>) – The cache for the client.</li>
<li><strong>clock</strong> (<a href="../common/index.htm#nautilus_trader.common.component.LiveClock"><em>LiveClock</em></a>) – The clock for the client.</li>
<li><strong>config</strong> (<a href="../config/index.htm#nautilus_trader.common.config.NautilusConfig"><em>NautilusConfig</em></a> <em>,</em> <em>optional</em>) – The configuration for the instance.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning">WARNING<a href="#warning" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>This class should not be used directly, but through a concrete subclass.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="async-run_after_delaydelay-float-coro-coroutine--none"><em>async</em> run_after_delay(delay: float, coro: Coroutine) → None<a href="#async-run_after_delaydelay-float-coro-coroutine--none" class="hash-link" aria-label="Direct link to async-run_after_delaydelay-float-coro-coroutine--none" title="Direct link to async-run_after_delaydelay-float-coro-coroutine--none">​</a></h4>
<p>Run the given coroutine after a delay.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>delay</strong> (<em>float</em>) – The delay (seconds) before running the coroutine.</li>
<li><strong>coro</strong> (<em>Coroutine</em>) – The coroutine to run after the initial delay.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="create_taskcoro-collectionsabccoroutine-log_msg-str--none--none-actions-collectionsabccallable--none--none-success_msg-str--none--none-success_color-nautilus_tradercorerustcommonlogcolor--logcolornormal-0--task">create_task(coro: ~collections.abc.Coroutine, log_msg: str | None = None, actions: ~collections.abc.Callable | None = None, success_msg: str | None = None, success_color: ~nautilus_trader.core.rust.common.LogColor = &lt;LogColor.NORMAL: 0&gt;) → Task<a href="#create_taskcoro-collectionsabccoroutine-log_msg-str--none--none-actions-collectionsabccallable--none--none-success_msg-str--none--none-success_color-nautilus_tradercorerustcommonlogcolor--logcolornormal-0--task" class="hash-link" aria-label="Direct link to create_task(coro: ~collections.abc.Coroutine, log_msg: str | None = None, actions: ~collections.abc.Callable | None = None, success_msg: str | None = None, success_color: ~nautilus_trader.core.rust.common.LogColor = &lt;LogColor.NORMAL: 0&gt;) → Task" title="Direct link to create_task(coro: ~collections.abc.Coroutine, log_msg: str | None = None, actions: ~collections.abc.Callable | None = None, success_msg: str | None = None, success_color: ~nautilus_trader.core.rust.common.LogColor = &lt;LogColor.NORMAL: 0&gt;) → Task">​</a></h4>
<p>Run the given coroutine with error handling and optional callback actions when
done.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>coro</strong> (<em>Coroutine</em>) – The coroutine to run.</li>
<li><strong>log_msg</strong> (<em>str</em> <em>,</em> <em>optional</em>) – The log message for the task.</li>
<li><strong>actions</strong> (<em>Callable</em> <em>,</em> <em>optional</em>) – The actions callback to run when the coroutine is done.</li>
<li><strong>success_msg</strong> (<em>str</em> <em>,</em> <em>optional</em>) – The log message to write on actions success.</li>
<li><strong>success_color</strong> (LogColor, default <code>NORMAL</code>) – The log message color for actions success.</li>
</ul>
</li>
<li><strong>Return type:</strong>
asyncio.Task</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="connect--none">connect() → None<a href="#connect--none" class="hash-link" aria-label="Direct link to connect() → None" title="Direct link to connect() → None">​</a></h4>
<p>Connect the client.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="disconnect--none">disconnect() → None<a href="#disconnect--none" class="hash-link" aria-label="Direct link to disconnect() → None" title="Direct link to disconnect() → None">​</a></h4>
<p>Disconnect the client.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribeself-subscribedata-command--void">subscribe(self, SubscribeData command) → void<a href="#subscribeself-subscribedata-command--void" class="hash-link" aria-label="Direct link to subscribe(self, SubscribeData command) → void" title="Direct link to subscribe(self, SubscribeData command) → void">​</a></h4>
<p>Subscribe to data for the given data type.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>data_type</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.DataType"><em>DataType</em></a>) – The data type for the subscription.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribeself-unsubscribedata-command--void">unsubscribe(self, UnsubscribeData command) → void<a href="#unsubscribeself-unsubscribedata-command--void" class="hash-link" aria-label="Direct link to unsubscribe(self, UnsubscribeData command) → void" title="Direct link to unsubscribe(self, UnsubscribeData command) → void">​</a></h4>
<p>Unsubscribe from data for the given data type.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>data_type</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.DataType"><em>DataType</em></a>) – The data type for the subscription.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="requestself-requestdata-request--void">request(self, RequestData request) → void<a href="#requestself-requestdata-request--void" class="hash-link" aria-label="Direct link to request(self, RequestData request) → void" title="Direct link to request(self, RequestData request) → void">​</a></h4>
<p>Request data for the given data type.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>request</strong> (<a href="../data/index.htm#nautilus_trader.data.messages.RequestData"><em>RequestData</em></a>) – The message for the data request.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="degradeself--void">degrade(self) → void<a href="#degradeself--void" class="hash-link" aria-label="Direct link to degrade(self) → void" title="Direct link to degrade(self) → void">​</a></h4>
<p>Degrade the component.</p>
<p>While executing on_degrade() any exception will be logged and reraised, then the component
will remain in a <code>DEGRADING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-1">WARNING<a href="#warning-1" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="disposeself--void">dispose(self) → void<a href="#disposeself--void" class="hash-link" aria-label="Direct link to dispose(self) → void" title="Direct link to dispose(self) → void">​</a></h4>
<p>Dispose of the component.</p>
<p>While executing on_dispose() any exception will be logged and reraised, then the component
will remain in a <code>DISPOSING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-2">WARNING<a href="#warning-2" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="faultself--void">fault(self) → void<a href="#faultself--void" class="hash-link" aria-label="Direct link to fault(self) → void" title="Direct link to fault(self) → void">​</a></h4>
<p>Fault the component.</p>
<p>Calling this method multiple times has the same effect as calling it once (it is idempotent).
Once called, it cannot be reversed, and no other methods should be called on this instance.</p>
<p>While executing on_fault() any exception will be logged and reraised, then the component
will remain in a <code>FAULTING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-3">WARNING<a href="#warning-3" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="classmethod-fully_qualified_namecls--str"><em>classmethod</em> fully_qualified_name(cls) → str<a href="#classmethod-fully_qualified_namecls--str" class="hash-link" aria-label="Direct link to classmethod-fully_qualified_namecls--str" title="Direct link to classmethod-fully_qualified_namecls--str">​</a></h4>
<p>Return the fully qualified name for the components class.</p>
<ul>
<li><strong>Return type:</strong>
str</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="id">id<a href="#id" class="hash-link" aria-label="Direct link to id" title="Direct link to id">​</a></h4>
<p>The components ID.</p>
<ul>
<li><strong>Returns:</strong>
ComponentId</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_connected">is_connected<a href="#is_connected" class="hash-link" aria-label="Direct link to is_connected" title="Direct link to is_connected">​</a></h4>
<p>If the client is connected.</p>
<ul>
<li><strong>Returns:</strong>
bool</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_degraded">is_degraded<a href="#is_degraded" class="hash-link" aria-label="Direct link to is_degraded" title="Direct link to is_degraded">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>DEGRADED</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_degraded</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_disposed">is_disposed<a href="#is_disposed" class="hash-link" aria-label="Direct link to is_disposed" title="Direct link to is_disposed">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>DISPOSED</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_disposed</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_faulted">is_faulted<a href="#is_faulted" class="hash-link" aria-label="Direct link to is_faulted" title="Direct link to is_faulted">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>FAULTED</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_faulted</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_initialized">is_initialized<a href="#is_initialized" class="hash-link" aria-label="Direct link to is_initialized" title="Direct link to is_initialized">​</a></h4>
<p>bool</p>
<p>Return whether the component has been initialized (component.state &gt;= <code>INITIALIZED</code>).</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_initialized</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_running">is_running<a href="#is_running" class="hash-link" aria-label="Direct link to is_running" title="Direct link to is_running">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>RUNNING</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_running</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_stopped">is_stopped<a href="#is_stopped" class="hash-link" aria-label="Direct link to is_stopped" title="Direct link to is_stopped">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>STOPPED</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_stopped</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="resetself--void">reset(self) → void<a href="#resetself--void" class="hash-link" aria-label="Direct link to reset(self) → void" title="Direct link to reset(self) → void">​</a></h4>
<p>Reset the component.</p>
<p>All stateful fields are reset to their initial value.</p>
<p>While executing on_reset() any exception will be logged and reraised, then the component
will remain in a <code>RESETTING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-4">WARNING<a href="#warning-4" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="resumeself--void">resume(self) → void<a href="#resumeself--void" class="hash-link" aria-label="Direct link to resume(self) → void" title="Direct link to resume(self) → void">​</a></h4>
<p>Resume the component.</p>
<p>While executing on_resume() any exception will be logged and reraised, then the component
will remain in a <code>RESUMING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-5">WARNING<a href="#warning-5" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="shutdown_systemself-str-reasonnone--void">shutdown_system(self, str reason=None) → void<a href="#shutdown_systemself-str-reasonnone--void" class="hash-link" aria-label="Direct link to shutdown_system(self, str reason=None) → void" title="Direct link to shutdown_system(self, str reason=None) → void">​</a></h4>
<p>Initiate a system-wide shutdown by generating and publishing a ShutdownSystem command.</p>
<p>The command is handled by the system’s NautilusKernel, which will invoke either stop (synchronously)
or stop_async (asynchronously) depending on the execution context and the presence of an active event loop.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>reason</strong> (<em>str</em> <em>,</em> <em>optional</em>) – The reason for issuing the shutdown command.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="startself--void">start(self) → void<a href="#startself--void" class="hash-link" aria-label="Direct link to start(self) → void" title="Direct link to start(self) → void">​</a></h4>
<p>Start the component.</p>
<p>While executing on_start() any exception will be logged and reraised, then the component
will remain in a <code>STARTING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-6">WARNING<a href="#warning-6" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="state">state<a href="#state" class="hash-link" aria-label="Direct link to state" title="Direct link to state">​</a></h4>
<p>ComponentState</p>
<p>Return the components current state.</p>
<ul>
<li><strong>Return type:</strong>
ComponentState</li>
<li><strong>Type:</strong>
Component.state</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="stopself--void">stop(self) → void<a href="#stopself--void" class="hash-link" aria-label="Direct link to stop(self) → void" title="Direct link to stop(self) → void">​</a></h4>
<p>Stop the component.</p>
<p>While executing on_stop() any exception will be logged and reraised, then the component
will remain in a <code>STOPPING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-7">WARNING<a href="#warning-7" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribed_custom_dataself--list">subscribed_custom_data(self) → list<a href="#subscribed_custom_dataself--list" class="hash-link" aria-label="Direct link to subscribed_custom_data(self) → list" title="Direct link to subscribed_custom_data(self) → list">​</a></h4>
<p>Return the custom data types subscribed to.</p>
<ul>
<li><strong>Return type:</strong>
list[<a href="../model/data/index.htm#nautilus_trader.model.data.DataType">DataType</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="trader_id">trader_id<a href="#trader_id" class="hash-link" aria-label="Direct link to trader_id" title="Direct link to trader_id">​</a></h4>
<p>The trader ID associated with the component.</p>
<ul>
<li><strong>Returns:</strong>
TraderId</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="type">type<a href="#type" class="hash-link" aria-label="Direct link to type" title="Direct link to type">​</a></h4>
<p>The components type.</p>
<ul>
<li><strong>Returns:</strong>
type</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="venue">venue<a href="#venue" class="hash-link" aria-label="Direct link to venue" title="Direct link to venue">​</a></h4>
<p>The clients venue ID (if applicable).</p>
<ul>
<li><strong>Returns:</strong>
Venue or <code>None</code></li>
</ul>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="class-livemarketdataclient"><em>class</em> LiveMarketDataClient<a href="#class-livemarketdataclient" class="hash-link" aria-label="Direct link to class-livemarketdataclient" title="Direct link to class-livemarketdataclient">​</a></h3>
<p>Bases: <a href="../data/index.htm#nautilus_trader.data.client.MarketDataClient"><code>MarketDataClient</code></a></p>
<p>The base class for all live data clients.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>loop</strong> (<em>asyncio.AbstractEventLoop</em>) – The event loop for the client.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a>) – The client ID.</li>
<li><strong>venue</strong> (Venue or <code>None</code>) – The client venue. If multi-venue then can be <code>None</code>.</li>
<li><strong>msgbus</strong> (<a href="../common/index.htm#nautilus_trader.common.component.MessageBus"><em>MessageBus</em></a>) – The message bus for the client.</li>
<li><strong>cache</strong> (<a href="../cache/index.htm#nautilus_trader.cache.Cache"><em>Cache</em></a>) – The cache for the client.</li>
<li><strong>clock</strong> (<a href="../common/index.htm#nautilus_trader.common.component.LiveClock"><em>LiveClock</em></a>) – The clock for the client.</li>
<li><strong>instrument_provider</strong> (<a href="../common/index.htm#nautilus_trader.common.providers.InstrumentProvider"><em>InstrumentProvider</em></a>) – The instrument provider for the client.</li>
<li><strong>config</strong> (<a href="../config/index.htm#nautilus_trader.common.config.NautilusConfig"><em>NautilusConfig</em></a> <em>,</em> <em>optional</em>) – The configuration for the instance.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-8">WARNING<a href="#warning-8" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>This class should not be used directly, but through a concrete subclass.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="async-run_after_delaydelay-float-coro-coroutine--none-1"><em>async</em> run_after_delay(delay: float, coro: Coroutine) → None<a href="#async-run_after_delaydelay-float-coro-coroutine--none-1" class="hash-link" aria-label="Direct link to async-run_after_delaydelay-float-coro-coroutine--none-1" title="Direct link to async-run_after_delaydelay-float-coro-coroutine--none-1">​</a></h4>
<p>Run the given coroutine after a delay.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>delay</strong> (<em>float</em>) – The delay (seconds) before running the coroutine.</li>
<li><strong>coro</strong> (<em>Coroutine</em>) – The coroutine to run after the initial delay.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="create_taskcoro-collectionsabccoroutine-log_msg-str--none--none-actions-collectionsabccallable--none--none-success_msg-str--none--none-success_color-nautilus_tradercorerustcommonlogcolor--logcolornormal-0--task--none">create_task(coro: ~collections.abc.Coroutine, log_msg: str | None = None, actions: ~collections.abc.Callable | None = None, success_msg: str | None = None, success_color: ~nautilus_trader.core.rust.common.LogColor = &lt;LogColor.NORMAL: 0&gt;) → Task | None<a href="#create_taskcoro-collectionsabccoroutine-log_msg-str--none--none-actions-collectionsabccallable--none--none-success_msg-str--none--none-success_color-nautilus_tradercorerustcommonlogcolor--logcolornormal-0--task--none" class="hash-link" aria-label="Direct link to create_task(coro: ~collections.abc.Coroutine, log_msg: str | None = None, actions: ~collections.abc.Callable | None = None, success_msg: str | None = None, success_color: ~nautilus_trader.core.rust.common.LogColor = &lt;LogColor.NORMAL: 0&gt;) → Task | None" title="Direct link to create_task(coro: ~collections.abc.Coroutine, log_msg: str | None = None, actions: ~collections.abc.Callable | None = None, success_msg: str | None = None, success_color: ~nautilus_trader.core.rust.common.LogColor = &lt;LogColor.NORMAL: 0&gt;) → Task | None">​</a></h4>
<p>Run the given coroutine with error handling and optional callback actions when
done.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>coro</strong> (<em>Coroutine</em>) – The coroutine to run.</li>
<li><strong>log_msg</strong> (<em>str</em> <em>,</em> <em>optional</em>) – The log message for the task.</li>
<li><strong>actions</strong> (<em>Callable</em> <em>,</em> <em>optional</em>) – The actions callback to run when the coroutine is done.</li>
<li><strong>success_msg</strong> (<em>str</em> <em>,</em> <em>optional</em>) – The log message to write on actions success.</li>
<li><strong>success_color</strong> (LogColor, default <code>NORMAL</code>) – The log message color for actions success.</li>
</ul>
</li>
<li><strong>Return type:</strong>
asyncio.Task</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="connect--none-1">connect() → None<a href="#connect--none-1" class="hash-link" aria-label="Direct link to connect() → None" title="Direct link to connect() → None">​</a></h4>
<p>Connect the client.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="disconnect--none-1">disconnect() → None<a href="#disconnect--none-1" class="hash-link" aria-label="Direct link to disconnect() → None" title="Direct link to disconnect() → None">​</a></h4>
<p>Disconnect the client.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribeself-subscribedata-command--void-1">subscribe(self, SubscribeData command) → void<a href="#subscribeself-subscribedata-command--void-1" class="hash-link" aria-label="Direct link to subscribe(self, SubscribeData command) → void" title="Direct link to subscribe(self, SubscribeData command) → void">​</a></h4>
<p>Subscribe to data for the given data type.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>data_type</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.DataType"><em>DataType</em></a>) – The data type for the subscription.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional params for the subscription.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_instrumentsself-subscribeinstruments-command--void">subscribe_instruments(self, SubscribeInstruments command) → void<a href="#subscribe_instrumentsself-subscribeinstruments-command--void" class="hash-link" aria-label="Direct link to subscribe_instruments(self, SubscribeInstruments command) → void" title="Direct link to subscribe_instruments(self, SubscribeInstruments command) → void">​</a></h4>
<p>Subscribe to all Instrument data.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional params for the subscription.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_instrumentself-subscribeinstrument-command--void">subscribe_instrument(self, SubscribeInstrument command) → void<a href="#subscribe_instrumentself-subscribeinstrument-command--void" class="hash-link" aria-label="Direct link to subscribe_instrument(self, SubscribeInstrument command) → void" title="Direct link to subscribe_instrument(self, SubscribeInstrument command) → void">​</a></h4>
<p>Subscribe to the Instrument with the given instrument ID.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional params for the subscription.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_order_book_deltasself-subscribeorderbook-command--void">subscribe_order_book_deltas(self, SubscribeOrderBook command) → void<a href="#subscribe_order_book_deltasself-subscribeorderbook-command--void" class="hash-link" aria-label="Direct link to subscribe_order_book_deltas(self, SubscribeOrderBook command) → void" title="Direct link to subscribe_order_book_deltas(self, SubscribeOrderBook command) → void">​</a></h4>
<p>Subscribe to OrderBookDeltas data for the given instrument ID.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The order book instrument to subscribe to.</li>
<li><strong>book_type</strong> (BookType {<code>L1_MBP</code>, <code>L2_MBP</code>, <code>L3_MBO</code>}) – The order book type.</li>
<li><strong>depth</strong> (<em>int</em> <em>,</em> <em>optional</em> <em>,</em> <em>default None</em>) – The maximum depth for the subscription.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional params for the subscription.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_order_book_snapshotsself-subscribeorderbook-command--void">subscribe_order_book_snapshots(self, SubscribeOrderBook command) → void<a href="#subscribe_order_book_snapshotsself-subscribeorderbook-command--void" class="hash-link" aria-label="Direct link to subscribe_order_book_snapshots(self, SubscribeOrderBook command) → void" title="Direct link to subscribe_order_book_snapshots(self, SubscribeOrderBook command) → void">​</a></h4>
<p>Subscribe to OrderBook snapshots data for the given instrument ID.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The order book instrument to subscribe to.</li>
<li><strong>book_type</strong> (BookType {<code>L1_MBP</code>, <code>L2_MBP</code>, <code>L3_MBO</code>}) – The order book level.</li>
<li><strong>depth</strong> (<em>int</em> <em>,</em> <em>optional</em>) – The maximum depth for the order book. A depth of 0 is maximum depth.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional params for the subscription.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_quote_ticksself-subscribequoteticks-command--void">subscribe_quote_ticks(self, SubscribeQuoteTicks command) → void<a href="#subscribe_quote_ticksself-subscribequoteticks-command--void" class="hash-link" aria-label="Direct link to subscribe_quote_ticks(self, SubscribeQuoteTicks command) → void" title="Direct link to subscribe_quote_ticks(self, SubscribeQuoteTicks command) → void">​</a></h4>
<p>Subscribe to QuoteTick data for the given instrument ID.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The tick instrument to subscribe to.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional params for the subscription.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_trade_ticksself-subscribetradeticks-command--void">subscribe_trade_ticks(self, SubscribeTradeTicks command) → void<a href="#subscribe_trade_ticksself-subscribetradeticks-command--void" class="hash-link" aria-label="Direct link to subscribe_trade_ticks(self, SubscribeTradeTicks command) → void" title="Direct link to subscribe_trade_ticks(self, SubscribeTradeTicks command) → void">​</a></h4>
<p>Subscribe to TradeTick data for the given instrument ID.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The tick instrument to subscribe to.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional params for the subscription.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_mark_pricesself-subscribemarkprices-command--void">subscribe_mark_prices(self, SubscribeMarkPrices command) → void<a href="#subscribe_mark_pricesself-subscribemarkprices-command--void" class="hash-link" aria-label="Direct link to subscribe_mark_prices(self, SubscribeMarkPrices command) → void" title="Direct link to subscribe_mark_prices(self, SubscribeMarkPrices command) → void">​</a></h4>
<p>Subscribe to MarkPriceUpdate data for the given instrument ID.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>)  – The instrument to subscribe to.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional params for the subscription.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_index_pricesself-subscribeindexprices-command--void">subscribe_index_prices(self, SubscribeIndexPrices command) → void<a href="#subscribe_index_pricesself-subscribeindexprices-command--void" class="hash-link" aria-label="Direct link to subscribe_index_prices(self, SubscribeIndexPrices command) → void" title="Direct link to subscribe_index_prices(self, SubscribeIndexPrices command) → void">​</a></h4>
<p>Subscribe to IndexPriceUpdate data for the given instrument ID.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument to subscribe to.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional params for the subscription.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_barsself-subscribebars-command--void">subscribe_bars(self, SubscribeBars command) → void<a href="#subscribe_barsself-subscribebars-command--void" class="hash-link" aria-label="Direct link to subscribe_bars(self, SubscribeBars command) → void" title="Direct link to subscribe_bars(self, SubscribeBars command) → void">​</a></h4>
<p>Subscribe to Bar data for the given bar type.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>bar_type</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.BarType"><em>BarType</em></a>) – The bar type to subscribe to.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional params for the subscription.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_instrument_statusself-subscribeinstrumentstatus-command--void">subscribe_instrument_status(self, SubscribeInstrumentStatus command) → void<a href="#subscribe_instrument_statusself-subscribeinstrumentstatus-command--void" class="hash-link" aria-label="Direct link to subscribe_instrument_status(self, SubscribeInstrumentStatus command) → void" title="Direct link to subscribe_instrument_status(self, SubscribeInstrumentStatus command) → void">​</a></h4>
<p>Subscribe to InstrumentStatus data for the given instrument ID.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The tick instrument to subscribe to.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional params for the subscription.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribe_instrument_closeself-subscribeinstrumentclose-command--void">subscribe_instrument_close(self, SubscribeInstrumentClose command) → void<a href="#subscribe_instrument_closeself-subscribeinstrumentclose-command--void" class="hash-link" aria-label="Direct link to subscribe_instrument_close(self, SubscribeInstrumentClose command) → void" title="Direct link to subscribe_instrument_close(self, SubscribeInstrumentClose command) → void">​</a></h4>
<p>Subscribe to InstrumentClose updates for the given instrument ID.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The tick instrument to subscribe to.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional params for the subscription.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribeself-unsubscribedata-command--void-1">unsubscribe(self, UnsubscribeData command) → void<a href="#unsubscribeself-unsubscribedata-command--void-1" class="hash-link" aria-label="Direct link to unsubscribe(self, UnsubscribeData command) → void" title="Direct link to unsubscribe(self, UnsubscribeData command) → void">​</a></h4>
<p>Unsubscribe from data for the given data type.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>data_type</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.DataType"><em>DataType</em></a>) – The data type for the subscription.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional params for the subscription.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_instrumentsself-unsubscribeinstruments-command--void">unsubscribe_instruments(self, UnsubscribeInstruments command) → void<a href="#unsubscribe_instrumentsself-unsubscribeinstruments-command--void" class="hash-link" aria-label="Direct link to unsubscribe_instruments(self, UnsubscribeInstruments command) → void" title="Direct link to unsubscribe_instruments(self, UnsubscribeInstruments command) → void">​</a></h4>
<p>Unsubscribe from all Instrument data.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional params for the subscription.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_instrumentself-unsubscribeinstrument-command--void">unsubscribe_instrument(self, UnsubscribeInstrument command) → void<a href="#unsubscribe_instrumentself-unsubscribeinstrument-command--void" class="hash-link" aria-label="Direct link to unsubscribe_instrument(self, UnsubscribeInstrument command) → void" title="Direct link to unsubscribe_instrument(self, UnsubscribeInstrument command) → void">​</a></h4>
<p>Unsubscribe from Instrument data for the given instrument ID.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument to unsubscribe from.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional params for the subscription.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_order_book_deltasself-unsubscribeorderbook-command--void">unsubscribe_order_book_deltas(self, UnsubscribeOrderBook command) → void<a href="#unsubscribe_order_book_deltasself-unsubscribeorderbook-command--void" class="hash-link" aria-label="Direct link to unsubscribe_order_book_deltas(self, UnsubscribeOrderBook command) → void" title="Direct link to unsubscribe_order_book_deltas(self, UnsubscribeOrderBook command) → void">​</a></h4>
<p>Unsubscribe from OrderBookDeltas data for the given instrument ID.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The order book instrument to unsubscribe from.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional params for the subscription.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_order_book_snapshotsself-unsubscribeorderbook-command--void">unsubscribe_order_book_snapshots(self, UnsubscribeOrderBook command) → void<a href="#unsubscribe_order_book_snapshotsself-unsubscribeorderbook-command--void" class="hash-link" aria-label="Direct link to unsubscribe_order_book_snapshots(self, UnsubscribeOrderBook command) → void" title="Direct link to unsubscribe_order_book_snapshots(self, UnsubscribeOrderBook command) → void">​</a></h4>
<p>Unsubscribe from OrderBook snapshots data for the given instrument ID.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The order book instrument to unsubscribe from.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional params for the subscription.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_quote_ticksself-unsubscribequoteticks-command--void">unsubscribe_quote_ticks(self, UnsubscribeQuoteTicks command) → void<a href="#unsubscribe_quote_ticksself-unsubscribequoteticks-command--void" class="hash-link" aria-label="Direct link to unsubscribe_quote_ticks(self, UnsubscribeQuoteTicks command) → void" title="Direct link to unsubscribe_quote_ticks(self, UnsubscribeQuoteTicks command) → void">​</a></h4>
<p>Unsubscribe from QuoteTick data for the given instrument ID.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The tick instrument to unsubscribe from.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional params for the subscription.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_trade_ticksself-unsubscribetradeticks-command--void">unsubscribe_trade_ticks(self, UnsubscribeTradeTicks command) → void<a href="#unsubscribe_trade_ticksself-unsubscribetradeticks-command--void" class="hash-link" aria-label="Direct link to unsubscribe_trade_ticks(self, UnsubscribeTradeTicks command) → void" title="Direct link to unsubscribe_trade_ticks(self, UnsubscribeTradeTicks command) → void">​</a></h4>
<p>Unsubscribe from TradeTick data for the given instrument ID.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The tick instrument to unsubscribe from.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional params for the subscription.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_mark_pricesself-unsubscribemarkprices-command--void">unsubscribe_mark_prices(self, UnsubscribeMarkPrices command) → void<a href="#unsubscribe_mark_pricesself-unsubscribemarkprices-command--void" class="hash-link" aria-label="Direct link to unsubscribe_mark_prices(self, UnsubscribeMarkPrices command) → void" title="Direct link to unsubscribe_mark_prices(self, UnsubscribeMarkPrices command) → void">​</a></h4>
<p>Unsubscribe from MarkPriceUpdate data for the given instrument ID.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument to subscribe to.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional params for the subscription.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_index_pricesself-unsubscribeindexprices-command--void">unsubscribe_index_prices(self, UnsubscribeIndexPrices command) → void<a href="#unsubscribe_index_pricesself-unsubscribeindexprices-command--void" class="hash-link" aria-label="Direct link to unsubscribe_index_prices(self, UnsubscribeIndexPrices command) → void" title="Direct link to unsubscribe_index_prices(self, UnsubscribeIndexPrices command) → void">​</a></h4>
<p>Unsubscribe from IndexPriceUpdate data for the given instrument ID.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument to subscribe to.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional params for the subscription.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_barsself-unsubscribebars-command--void">unsubscribe_bars(self, UnsubscribeBars command) → void<a href="#unsubscribe_barsself-unsubscribebars-command--void" class="hash-link" aria-label="Direct link to unsubscribe_bars(self, UnsubscribeBars command) → void" title="Direct link to unsubscribe_bars(self, UnsubscribeBars command) → void">​</a></h4>
<p>Unsubscribe from Bar data for the given bar type.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>bar_type</strong> (<a href="../model/data/index.htm#nautilus_trader.model.data.BarType"><em>BarType</em></a>) – The bar type to unsubscribe from.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional params for the subscription.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_instrument_statusself-unsubscribeinstrumentstatus-command--void">unsubscribe_instrument_status(self, UnsubscribeInstrumentStatus command) → void<a href="#unsubscribe_instrument_statusself-unsubscribeinstrumentstatus-command--void" class="hash-link" aria-label="Direct link to unsubscribe_instrument_status(self, UnsubscribeInstrumentStatus command) → void" title="Direct link to unsubscribe_instrument_status(self, UnsubscribeInstrumentStatus command) → void">​</a></h4>
<p>Unsubscribe from InstrumentStatus data for the given instrument ID.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument status updates to unsubscribe from.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional params for the subscription.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unsubscribe_instrument_closeself-unsubscribeinstrumentclose-command--void">unsubscribe_instrument_close(self, UnsubscribeInstrumentClose command) → void<a href="#unsubscribe_instrument_closeself-unsubscribeinstrumentclose-command--void" class="hash-link" aria-label="Direct link to unsubscribe_instrument_close(self, UnsubscribeInstrumentClose command) → void" title="Direct link to unsubscribe_instrument_close(self, UnsubscribeInstrumentClose command) → void">​</a></h4>
<p>Unsubscribe from InstrumentClose data for the given instrument ID.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The tick instrument to unsubscribe from.</li>
<li><strong>params</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>Any</em> <em>]</em> <em>,</em> <em>optional</em>) – Additional params for the subscription.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="requestself-requestdata-request--void-1">request(self, RequestData request) → void<a href="#requestself-requestdata-request--void-1" class="hash-link" aria-label="Direct link to request(self, RequestData request) → void" title="Direct link to request(self, RequestData request) → void">​</a></h4>
<p>Request data for the given data type.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>request</strong> (<a href="../data/index.htm#nautilus_trader.data.messages.RequestData"><em>RequestData</em></a>) – The message for the data request.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="request_instrumentself-requestinstrument-request--void">request_instrument(self, RequestInstrument request) → void<a href="#request_instrumentself-requestinstrument-request--void" class="hash-link" aria-label="Direct link to request_instrument(self, RequestInstrument request) → void" title="Direct link to request_instrument(self, RequestInstrument request) → void">​</a></h4>
<p>Request Instrument data for the given instrument ID.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>request</strong> (<a href="../data/index.htm#nautilus_trader.data.messages.RequestInstrument"><em>RequestInstrument</em></a>) – The message for the data request.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="request_instrumentsself-requestinstruments-request--void">request_instruments(self, RequestInstruments request) → void<a href="#request_instrumentsself-requestinstruments-request--void" class="hash-link" aria-label="Direct link to request_instruments(self, RequestInstruments request) → void" title="Direct link to request_instruments(self, RequestInstruments request) → void">​</a></h4>
<p>Request all Instrument data for the given venue.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>request</strong> (<a href="../data/index.htm#nautilus_trader.data.messages.RequestInstruments"><em>RequestInstruments</em></a>) – The message for the data request.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="request_quote_ticksself-requestquoteticks-request--void">request_quote_ticks(self, RequestQuoteTicks request) → void<a href="#request_quote_ticksself-requestquoteticks-request--void" class="hash-link" aria-label="Direct link to request_quote_ticks(self, RequestQuoteTicks request) → void" title="Direct link to request_quote_ticks(self, RequestQuoteTicks request) → void">​</a></h4>
<p>Request historical QuoteTick data.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>request</strong> (<a href="../data/index.htm#nautilus_trader.data.messages.RequestQuoteTicks"><em>RequestQuoteTicks</em></a>) – The message for the data request.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="request_trade_ticksself-requesttradeticks-request--void">request_trade_ticks(self, RequestTradeTicks request) → void<a href="#request_trade_ticksself-requesttradeticks-request--void" class="hash-link" aria-label="Direct link to request_trade_ticks(self, RequestTradeTicks request) → void" title="Direct link to request_trade_ticks(self, RequestTradeTicks request) → void">​</a></h4>
<p>Request historical TradeTick data.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>request</strong> (<a href="../data/index.htm#nautilus_trader.data.messages.RequestTradeTicks"><em>RequestTradeTicks</em></a>) – The message for the data request.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="request_barsself-requestbars-request--void">request_bars(self, RequestBars request) → void<a href="#request_barsself-requestbars-request--void" class="hash-link" aria-label="Direct link to request_bars(self, RequestBars request) → void" title="Direct link to request_bars(self, RequestBars request) → void">​</a></h4>
<p>Request historical Bar data. To load historical data from a catalog, you can pass a list[DataCatalogConfig] to the TradingNodeConfig or the BacktestEngineConfig.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>request</strong> (<a href="../data/index.htm#nautilus_trader.data.messages.RequestBars"><em>RequestBars</em></a>) – The message for the data request.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="request_order_book_snapshotself-requestorderbooksnapshot-request--void">request_order_book_snapshot(self, RequestOrderBookSnapshot request) → void<a href="#request_order_book_snapshotself-requestorderbooksnapshot-request--void" class="hash-link" aria-label="Direct link to request_order_book_snapshot(self, RequestOrderBookSnapshot request) → void" title="Direct link to request_order_book_snapshot(self, RequestOrderBookSnapshot request) → void">​</a></h4>
<p>Request order book snapshot data.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>request</strong> (<a href="../data/index.htm#nautilus_trader.data.messages.RequestOrderBookSnapshot"><em>RequestOrderBookSnapshot</em></a>) – The message for the data request.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="degradeself--void-1">degrade(self) → void<a href="#degradeself--void-1" class="hash-link" aria-label="Direct link to degrade(self) → void" title="Direct link to degrade(self) → void">​</a></h4>
<p>Degrade the component.</p>
<p>While executing on_degrade() any exception will be logged and reraised, then the component
will remain in a <code>DEGRADING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-9">WARNING<a href="#warning-9" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="disposeself--void-1">dispose(self) → void<a href="#disposeself--void-1" class="hash-link" aria-label="Direct link to dispose(self) → void" title="Direct link to dispose(self) → void">​</a></h4>
<p>Dispose of the component.</p>
<p>While executing on_dispose() any exception will be logged and reraised, then the component
will remain in a <code>DISPOSING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-10">WARNING<a href="#warning-10" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="faultself--void-1">fault(self) → void<a href="#faultself--void-1" class="hash-link" aria-label="Direct link to fault(self) → void" title="Direct link to fault(self) → void">​</a></h4>
<p>Fault the component.</p>
<p>Calling this method multiple times has the same effect as calling it once (it is idempotent).
Once called, it cannot be reversed, and no other methods should be called on this instance.</p>
<p>While executing on_fault() any exception will be logged and reraised, then the component
will remain in a <code>FAULTING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-11">WARNING<a href="#warning-11" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="classmethod-fully_qualified_namecls--str-1"><em>classmethod</em> fully_qualified_name(cls) → str<a href="#classmethod-fully_qualified_namecls--str-1" class="hash-link" aria-label="Direct link to classmethod-fully_qualified_namecls--str-1" title="Direct link to classmethod-fully_qualified_namecls--str-1">​</a></h4>
<p>Return the fully qualified name for the components class.</p>
<ul>
<li><strong>Return type:</strong>
str</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="id-1">id<a href="#id-1" class="hash-link" aria-label="Direct link to id" title="Direct link to id">​</a></h4>
<p>The components ID.</p>
<ul>
<li><strong>Returns:</strong>
ComponentId</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_connected-1">is_connected<a href="#is_connected-1" class="hash-link" aria-label="Direct link to is_connected" title="Direct link to is_connected">​</a></h4>
<p>If the client is connected.</p>
<ul>
<li><strong>Returns:</strong>
bool</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_degraded-1">is_degraded<a href="#is_degraded-1" class="hash-link" aria-label="Direct link to is_degraded" title="Direct link to is_degraded">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>DEGRADED</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_degraded</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_disposed-1">is_disposed<a href="#is_disposed-1" class="hash-link" aria-label="Direct link to is_disposed" title="Direct link to is_disposed">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>DISPOSED</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_disposed</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_faulted-1">is_faulted<a href="#is_faulted-1" class="hash-link" aria-label="Direct link to is_faulted" title="Direct link to is_faulted">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>FAULTED</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_faulted</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_initialized-1">is_initialized<a href="#is_initialized-1" class="hash-link" aria-label="Direct link to is_initialized" title="Direct link to is_initialized">​</a></h4>
<p>bool</p>
<p>Return whether the component has been initialized (component.state &gt;= <code>INITIALIZED</code>).</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_initialized</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_running-1">is_running<a href="#is_running-1" class="hash-link" aria-label="Direct link to is_running" title="Direct link to is_running">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>RUNNING</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_running</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_stopped-1">is_stopped<a href="#is_stopped-1" class="hash-link" aria-label="Direct link to is_stopped" title="Direct link to is_stopped">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>STOPPED</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_stopped</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="resetself--void-1">reset(self) → void<a href="#resetself--void-1" class="hash-link" aria-label="Direct link to reset(self) → void" title="Direct link to reset(self) → void">​</a></h4>
<p>Reset the component.</p>
<p>All stateful fields are reset to their initial value.</p>
<p>While executing on_reset() any exception will be logged and reraised, then the component
will remain in a <code>RESETTING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-12">WARNING<a href="#warning-12" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="resumeself--void-1">resume(self) → void<a href="#resumeself--void-1" class="hash-link" aria-label="Direct link to resume(self) → void" title="Direct link to resume(self) → void">​</a></h4>
<p>Resume the component.</p>
<p>While executing on_resume() any exception will be logged and reraised, then the component
will remain in a <code>RESUMING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-13">WARNING<a href="#warning-13" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="shutdown_systemself-str-reasonnone--void-1">shutdown_system(self, str reason=None) → void<a href="#shutdown_systemself-str-reasonnone--void-1" class="hash-link" aria-label="Direct link to shutdown_system(self, str reason=None) → void" title="Direct link to shutdown_system(self, str reason=None) → void">​</a></h4>
<p>Initiate a system-wide shutdown by generating and publishing a ShutdownSystem command.</p>
<p>The command is handled by the system’s NautilusKernel, which will invoke either stop (synchronously)
or stop_async (asynchronously) depending on the execution context and the presence of an active event loop.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>reason</strong> (<em>str</em> <em>,</em> <em>optional</em>) – The reason for issuing the shutdown command.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="startself--void-1">start(self) → void<a href="#startself--void-1" class="hash-link" aria-label="Direct link to start(self) → void" title="Direct link to start(self) → void">​</a></h4>
<p>Start the component.</p>
<p>While executing on_start() any exception will be logged and reraised, then the component
will remain in a <code>STARTING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-14">WARNING<a href="#warning-14" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="state-1">state<a href="#state-1" class="hash-link" aria-label="Direct link to state" title="Direct link to state">​</a></h4>
<p>ComponentState</p>
<p>Return the components current state.</p>
<ul>
<li><strong>Return type:</strong>
ComponentState</li>
<li><strong>Type:</strong>
Component.state</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="stopself--void-1">stop(self) → void<a href="#stopself--void-1" class="hash-link" aria-label="Direct link to stop(self) → void" title="Direct link to stop(self) → void">​</a></h4>
<p>Stop the component.</p>
<p>While executing on_stop() any exception will be logged and reraised, then the component
will remain in a <code>STOPPING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-15">WARNING<a href="#warning-15" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribed_barsself--list">subscribed_bars(self) → list<a href="#subscribed_barsself--list" class="hash-link" aria-label="Direct link to subscribed_bars(self) → list" title="Direct link to subscribed_bars(self) → list">​</a></h4>
<p>Return the bar types subscribed to.</p>
<ul>
<li><strong>Return type:</strong>
list[<a href="../model/data/index.htm#nautilus_trader.model.data.BarType">BarType</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribed_custom_dataself--list-1">subscribed_custom_data(self) → list<a href="#subscribed_custom_dataself--list-1" class="hash-link" aria-label="Direct link to subscribed_custom_data(self) → list" title="Direct link to subscribed_custom_data(self) → list">​</a></h4>
<p>Return the custom data types subscribed to.</p>
<ul>
<li><strong>Return type:</strong>
list[<a href="../model/data/index.htm#nautilus_trader.model.data.DataType">DataType</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribed_index_pricesself--list">subscribed_index_prices(self) → list<a href="#subscribed_index_pricesself--list" class="hash-link" aria-label="Direct link to subscribed_index_prices(self) → list" title="Direct link to subscribed_index_prices(self) → list">​</a></h4>
<p>Return the index price update instruments subscribed to.</p>
<ul>
<li><strong>Return type:</strong>
list[<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId">InstrumentId</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribed_instrument_closeself--list">subscribed_instrument_close(self) → list<a href="#subscribed_instrument_closeself--list" class="hash-link" aria-label="Direct link to subscribed_instrument_close(self) → list" title="Direct link to subscribed_instrument_close(self) → list">​</a></h4>
<p>Return the instrument closes subscribed to.</p>
<ul>
<li><strong>Return type:</strong>
list[<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId">InstrumentId</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribed_instrument_statusself--list">subscribed_instrument_status(self) → list<a href="#subscribed_instrument_statusself--list" class="hash-link" aria-label="Direct link to subscribed_instrument_status(self) → list" title="Direct link to subscribed_instrument_status(self) → list">​</a></h4>
<p>Return the status update instruments subscribed to.</p>
<ul>
<li><strong>Return type:</strong>
list[<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId">InstrumentId</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribed_instrumentsself--list">subscribed_instruments(self) → list<a href="#subscribed_instrumentsself--list" class="hash-link" aria-label="Direct link to subscribed_instruments(self) → list" title="Direct link to subscribed_instruments(self) → list">​</a></h4>
<p>Return the instruments subscribed to.</p>
<ul>
<li><strong>Return type:</strong>
list[<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId">InstrumentId</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribed_mark_pricesself--list">subscribed_mark_prices(self) → list<a href="#subscribed_mark_pricesself--list" class="hash-link" aria-label="Direct link to subscribed_mark_prices(self) → list" title="Direct link to subscribed_mark_prices(self) → list">​</a></h4>
<p>Return the mark price update instruments subscribed to.</p>
<ul>
<li><strong>Return type:</strong>
list[<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId">InstrumentId</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribed_order_book_deltasself--list">subscribed_order_book_deltas(self) → list<a href="#subscribed_order_book_deltasself--list" class="hash-link" aria-label="Direct link to subscribed_order_book_deltas(self) → list" title="Direct link to subscribed_order_book_deltas(self) → list">​</a></h4>
<p>Return the order book delta instruments subscribed to.</p>
<ul>
<li><strong>Return type:</strong>
list[<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId">InstrumentId</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribed_order_book_snapshotsself--list">subscribed_order_book_snapshots(self) → list<a href="#subscribed_order_book_snapshotsself--list" class="hash-link" aria-label="Direct link to subscribed_order_book_snapshots(self) → list" title="Direct link to subscribed_order_book_snapshots(self) → list">​</a></h4>
<p>Return the order book snapshot instruments subscribed to.</p>
<ul>
<li><strong>Return type:</strong>
list[<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId">InstrumentId</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribed_quote_ticksself--list">subscribed_quote_ticks(self) → list<a href="#subscribed_quote_ticksself--list" class="hash-link" aria-label="Direct link to subscribed_quote_ticks(self) → list" title="Direct link to subscribed_quote_ticks(self) → list">​</a></h4>
<p>Return the quote tick instruments subscribed to.</p>
<ul>
<li><strong>Return type:</strong>
list[<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId">InstrumentId</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribed_trade_ticksself--list">subscribed_trade_ticks(self) → list<a href="#subscribed_trade_ticksself--list" class="hash-link" aria-label="Direct link to subscribed_trade_ticks(self) → list" title="Direct link to subscribed_trade_ticks(self) → list">​</a></h4>
<p>Return the trade tick instruments subscribed to.</p>
<ul>
<li><strong>Return type:</strong>
list[<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId">InstrumentId</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="trader_id-1">trader_id<a href="#trader_id-1" class="hash-link" aria-label="Direct link to trader_id" title="Direct link to trader_id">​</a></h4>
<p>The trader ID associated with the component.</p>
<ul>
<li><strong>Returns:</strong>
TraderId</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="type-1">type<a href="#type-1" class="hash-link" aria-label="Direct link to type" title="Direct link to type">​</a></h4>
<p>The components type.</p>
<ul>
<li><strong>Returns:</strong>
type</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="venue-1">venue<a href="#venue-1" class="hash-link" aria-label="Direct link to venue" title="Direct link to venue">​</a></h4>
<p>The clients venue ID (if applicable).</p>
<ul>
<li><strong>Returns:</strong>
Venue or <code>None</code></li>
</ul>
<p><a id="module-nautilus_trader.live.data_engine"></a></p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="class-livedataengine"><em>class</em> LiveDataEngine<a href="#class-livedataengine" class="hash-link" aria-label="Direct link to class-livedataengine" title="Direct link to class-livedataengine">​</a></h3>
<p>Bases: <a href="../data/index.htm#nautilus_trader.data.engine.DataEngine"><code>DataEngine</code></a></p>
<p>Provides a high-performance asynchronous live data engine.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>loop</strong> (<em>asyncio.AbstractEventLoop</em>) – The event loop for the engine.</li>
<li><strong>msgbus</strong> (<a href="../common/index.htm#nautilus_trader.common.component.MessageBus"><em>MessageBus</em></a>) – The message bus for the engine.</li>
<li><strong>cache</strong> (<a href="../cache/index.htm#nautilus_trader.cache.Cache"><em>Cache</em></a>) – The cache for the engine.</li>
<li><strong>clock</strong> (<a href="../common/index.htm#nautilus_trader.common.component.LiveClock"><em>LiveClock</em></a>) – The clock for the engine.</li>
<li><strong>config</strong> (<a href="../config/index.htm#nautilus_trader.live.config.LiveDataEngineConfig"><em>LiveDataEngineConfig</em></a> <em>,</em> <em>optional</em>) – The configuration for the instance.</li>
</ul>
</li>
<li><strong>Raises:</strong>
<strong>TypeError</strong> – If config is not of type LiveDataEngineConfig.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="connect--none-2">connect() → None<a href="#connect--none-2" class="hash-link" aria-label="Direct link to connect() → None" title="Direct link to connect() → None">​</a></h4>
<p>Connect the engine by calling connect on all registered clients.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="disconnect--none-2">disconnect() → None<a href="#disconnect--none-2" class="hash-link" aria-label="Direct link to disconnect() → None" title="Direct link to disconnect() → None">​</a></h4>
<p>Disconnect the engine by calling disconnect on all registered clients.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="get_cmd_queue_task--task--none">get_cmd_queue_task() → Task | None<a href="#get_cmd_queue_task--task--none" class="hash-link" aria-label="Direct link to get_cmd_queue_task() → Task | None" title="Direct link to get_cmd_queue_task() → Task | None">​</a></h4>
<p>Return the internal command queue task for the engine.</p>
<ul>
<li><strong>Return type:</strong>
asyncio.Task or <code>None</code></li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="get_req_queue_task--task--none">get_req_queue_task() → Task | None<a href="#get_req_queue_task--task--none" class="hash-link" aria-label="Direct link to get_req_queue_task() → Task | None" title="Direct link to get_req_queue_task() → Task | None">​</a></h4>
<p>Return the internal request queue task for the engine.</p>
<ul>
<li><strong>Return type:</strong>
asyncio.Task or <code>None</code></li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="get_res_queue_task--task--none">get_res_queue_task() → Task | None<a href="#get_res_queue_task--task--none" class="hash-link" aria-label="Direct link to get_res_queue_task() → Task | None" title="Direct link to get_res_queue_task() → Task | None">​</a></h4>
<p>Return the internal response queue task for the engine.</p>
<ul>
<li><strong>Return type:</strong>
asyncio.Task or <code>None</code></li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="get_data_queue_task--task--none">get_data_queue_task() → Task | None<a href="#get_data_queue_task--task--none" class="hash-link" aria-label="Direct link to get_data_queue_task() → Task | None" title="Direct link to get_data_queue_task() → Task | None">​</a></h4>
<p>Return the internal data queue task for the engine.</p>
<ul>
<li><strong>Return type:</strong>
asyncio.Task or <code>None</code></li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="cmd_qsize--int">cmd_qsize() → int<a href="#cmd_qsize--int" class="hash-link" aria-label="Direct link to cmd_qsize() → int" title="Direct link to cmd_qsize() → int">​</a></h4>
<p>Return the number of DataCommand objects buffered on the internal queue.</p>
<ul>
<li><strong>Return type:</strong>
int</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="req_qsize--int">req_qsize() → int<a href="#req_qsize--int" class="hash-link" aria-label="Direct link to req_qsize() → int" title="Direct link to req_qsize() → int">​</a></h4>
<p>Return the number of RequestData objects buffered on the internal queue.</p>
<ul>
<li><strong>Return type:</strong>
int</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="res_qsize--int">res_qsize() → int<a href="#res_qsize--int" class="hash-link" aria-label="Direct link to res_qsize() → int" title="Direct link to res_qsize() → int">​</a></h4>
<p>Return the number of DataResponse objects buffered on the internal queue.</p>
<ul>
<li><strong>Return type:</strong>
int</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="data_qsize--int">data_qsize() → int<a href="#data_qsize--int" class="hash-link" aria-label="Direct link to data_qsize() → int" title="Direct link to data_qsize() → int">​</a></h4>
<p>Return the number of Data objects buffered on the internal queue.</p>
<ul>
<li><strong>Return type:</strong>
int</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="kill--none">kill() → None<a href="#kill--none" class="hash-link" aria-label="Direct link to kill() → None" title="Direct link to kill() → None">​</a></h4>
<p>Kill the engine by abruptly canceling the queue tasks and calling stop.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="executecommand-datacommand--none">execute(command: <a href="../data/index.htm#nautilus_trader.data.messages.DataCommand">DataCommand</a>) → None<a href="#executecommand-datacommand--none" class="hash-link" aria-label="Direct link to executecommand-datacommand--none" title="Direct link to executecommand-datacommand--none">​</a></h4>
<p>Execute the given data command.</p>
<p>If the internal queue is at or near capacity, it logs a warning (throttled)
and schedules an asynchronous put() operation. This ensures all messages are
eventually enqueued and processed without blocking the caller when the queue is full.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>command</strong> (<a href="../data/index.htm#nautilus_trader.data.messages.DataCommand"><em>DataCommand</em></a>) – The command to execute.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="requestrequest-requestdata--none">request(request: <a href="../data/index.htm#nautilus_trader.data.messages.RequestData">RequestData</a>) → None<a href="#requestrequest-requestdata--none" class="hash-link" aria-label="Direct link to requestrequest-requestdata--none" title="Direct link to requestrequest-requestdata--none">​</a></h4>
<p>Handle the given request.</p>
<p>If the internal queue is at or near capacity, it logs a warning (throttled)
and schedules an asynchronous put() operation. This ensures all messages are
eventually enqueued and processed without blocking the caller when the queue is full.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>request</strong> (<a href="../data/index.htm#nautilus_trader.data.messages.RequestData"><em>RequestData</em></a>) – The request to handle.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="responseresponse-dataresponse--none">response(response: <a href="../data/index.htm#nautilus_trader.data.messages.DataResponse">DataResponse</a>) → None<a href="#responseresponse-dataresponse--none" class="hash-link" aria-label="Direct link to responseresponse-dataresponse--none" title="Direct link to responseresponse-dataresponse--none">​</a></h4>
<p>Handle the given response.</p>
<p>If the internal queue is at or near capacity, it logs a warning (throttled)
and schedules an asynchronous put() operation. This ensures all messages are
eventually enqueued and processed without blocking the caller when the queue is full.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>response</strong> (<a href="../data/index.htm#nautilus_trader.data.messages.DataResponse"><em>DataResponse</em></a>) – The response to handle.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="processdata-data--none">process(data: <a href="../core/index.htm#nautilus_trader.core.Data">Data</a>) → None<a href="#processdata-data--none" class="hash-link" aria-label="Direct link to processdata-data--none" title="Direct link to processdata-data--none">​</a></h4>
<p>Process the given data message.</p>
<p>If the internal queue is at or near capacity, it logs a warning (throttled)
and schedules an asynchronous put() operation. This ensures all messages are
eventually enqueued and processed without blocking the caller when the queue is full.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>data</strong> (<a href="../core/index.htm#nautilus_trader.core.Data"><em>Data</em></a>) – The data to process.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-16">WARNING<a href="#warning-16" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>This method is not thread-safe and should only be called from the same thread the event
loop is running on. Calling it from a different thread may lead to unexpected behavior.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="check_connectedself--bool">check_connected(self) → bool<a href="#check_connectedself--bool" class="hash-link" aria-label="Direct link to check_connected(self) → bool" title="Direct link to check_connected(self) → bool">​</a></h4>
<p>Check all of the engines clients are connected.</p>
<ul>
<li><strong>Returns:</strong>
True if all clients connected, else False.</li>
<li><strong>Return type:</strong>
bool</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="check_disconnectedself--bool">check_disconnected(self) → bool<a href="#check_disconnectedself--bool" class="hash-link" aria-label="Direct link to check_disconnected(self) → bool" title="Direct link to check_disconnected(self) → bool">​</a></h4>
<p>Check all of the engines clients are disconnected.</p>
<ul>
<li><strong>Returns:</strong>
True if all clients disconnected, else False.</li>
<li><strong>Return type:</strong>
bool</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="command_count">command_count<a href="#command_count" class="hash-link" aria-label="Direct link to command_count" title="Direct link to command_count">​</a></h4>
<p>The total count of data commands received by the engine.</p>
<ul>
<li><strong>Returns:</strong>
int</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="data_count">data_count<a href="#data_count" class="hash-link" aria-label="Direct link to data_count" title="Direct link to data_count">​</a></h4>
<p>The total count of data stream objects received by the engine.</p>
<ul>
<li><strong>Returns:</strong>
int</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="debug">debug<a href="#debug" class="hash-link" aria-label="Direct link to debug" title="Direct link to debug">​</a></h4>
<p>If debug mode is active (will provide extra debug logging).</p>
<ul>
<li><strong>Returns:</strong>
bool</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="default_client">default_client<a href="#default_client" class="hash-link" aria-label="Direct link to default_client" title="Direct link to default_client">​</a></h4>
<p>ClientId | None</p>
<p>Return the default data client registered with the engine.</p>
<ul>
<li><strong>Return type:</strong>
ClientId or <code>None</code></li>
<li><strong>Type:</strong>
DataEngine.default_client</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="degradeself--void-2">degrade(self) → void<a href="#degradeself--void-2" class="hash-link" aria-label="Direct link to degrade(self) → void" title="Direct link to degrade(self) → void">​</a></h4>
<p>Degrade the component.</p>
<p>While executing on_degrade() any exception will be logged and reraised, then the component
will remain in a <code>DEGRADING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-17">WARNING<a href="#warning-17" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="deregister_clientself-dataclient-client--void">deregister_client(self, DataClient client) → void<a href="#deregister_clientself-dataclient-client--void" class="hash-link" aria-label="Direct link to deregister_client(self, DataClient client) → void" title="Direct link to deregister_client(self, DataClient client) → void">​</a></h4>
<p>Deregister the given data client from the data engine.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>client</strong> (<a href="../data/index.htm#nautilus_trader.data.client.DataClient"><em>DataClient</em></a>) – The data client to deregister.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="disposeself--void-2">dispose(self) → void<a href="#disposeself--void-2" class="hash-link" aria-label="Direct link to dispose(self) → void" title="Direct link to dispose(self) → void">​</a></h4>
<p>Dispose of the component.</p>
<p>While executing on_dispose() any exception will be logged and reraised, then the component
will remain in a <code>DISPOSING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-18">WARNING<a href="#warning-18" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="faultself--void-2">fault(self) → void<a href="#faultself--void-2" class="hash-link" aria-label="Direct link to fault(self) → void" title="Direct link to fault(self) → void">​</a></h4>
<p>Fault the component.</p>
<p>Calling this method multiple times has the same effect as calling it once (it is idempotent).
Once called, it cannot be reversed, and no other methods should be called on this instance.</p>
<p>While executing on_fault() any exception will be logged and reraised, then the component
will remain in a <code>FAULTING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-19">WARNING<a href="#warning-19" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="classmethod-fully_qualified_namecls--str-2"><em>classmethod</em> fully_qualified_name(cls) → str<a href="#classmethod-fully_qualified_namecls--str-2" class="hash-link" aria-label="Direct link to classmethod-fully_qualified_namecls--str-2" title="Direct link to classmethod-fully_qualified_namecls--str-2">​</a></h4>
<p>Return the fully qualified name for the components class.</p>
<ul>
<li><strong>Return type:</strong>
str</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="id-2">id<a href="#id-2" class="hash-link" aria-label="Direct link to id" title="Direct link to id">​</a></h4>
<p>The components ID.</p>
<ul>
<li><strong>Returns:</strong>
ComponentId</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_degraded-2">is_degraded<a href="#is_degraded-2" class="hash-link" aria-label="Direct link to is_degraded" title="Direct link to is_degraded">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>DEGRADED</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_degraded</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_disposed-2">is_disposed<a href="#is_disposed-2" class="hash-link" aria-label="Direct link to is_disposed" title="Direct link to is_disposed">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>DISPOSED</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_disposed</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_faulted-2">is_faulted<a href="#is_faulted-2" class="hash-link" aria-label="Direct link to is_faulted" title="Direct link to is_faulted">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>FAULTED</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_faulted</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_initialized-2">is_initialized<a href="#is_initialized-2" class="hash-link" aria-label="Direct link to is_initialized" title="Direct link to is_initialized">​</a></h4>
<p>bool</p>
<p>Return whether the component has been initialized (component.state &gt;= <code>INITIALIZED</code>).</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_initialized</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_running-2">is_running<a href="#is_running-2" class="hash-link" aria-label="Direct link to is_running" title="Direct link to is_running">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>RUNNING</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_running</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_stopped-2">is_stopped<a href="#is_stopped-2" class="hash-link" aria-label="Direct link to is_stopped" title="Direct link to is_stopped">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>STOPPED</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_stopped</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="register_catalogself-catalog-parquetdatacatalog-str-name-str--catalog_0--none">register_catalog(self, catalog: ParquetDataCatalog, str name: str = &#x27;catalog_0&#x27;) → None<a href="#register_catalogself-catalog-parquetdatacatalog-str-name-str--catalog_0--none" class="hash-link" aria-label="Direct link to register_catalog(self, catalog: ParquetDataCatalog, str name: str = &#x27;catalog_0&#x27;) → None" title="Direct link to register_catalog(self, catalog: ParquetDataCatalog, str name: str = &#x27;catalog_0&#x27;) → None">​</a></h4>
<p>Register the given data catalog with the engine.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>catalog</strong> (<a href="../persistence/index.htm#nautilus_trader.persistence.catalog.parquet.ParquetDataCatalog"><em>ParquetDataCatalog</em></a>) – The data catalog to register.</li>
<li><strong>name</strong> (<em>str</em> <em>,</em> <em>default &#x27;catalog_0&#x27;</em>) – The name of the catalog to register.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="register_clientself-dataclient-client--void">register_client(self, DataClient client) → void<a href="#register_clientself-dataclient-client--void" class="hash-link" aria-label="Direct link to register_client(self, DataClient client) → void" title="Direct link to register_client(self, DataClient client) → void">​</a></h4>
<p>Register the given data client with the data engine.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>client</strong> (<a href="../data/index.htm#nautilus_trader.data.client.DataClient"><em>DataClient</em></a>) – The client to register.</li>
<li><strong>Raises:</strong>
<strong>ValueError</strong> – If client is already registered.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="register_default_clientself-dataclient-client--void">register_default_client(self, DataClient client) → void<a href="#register_default_clientself-dataclient-client--void" class="hash-link" aria-label="Direct link to register_default_client(self, DataClient client) → void" title="Direct link to register_default_client(self, DataClient client) → void">​</a></h4>
<p>Register the given client as the default routing client (when a specific
venue routing cannot be found).</p>
<p>Any existing default routing client will be overwritten.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>client</strong> (<a href="../data/index.htm#nautilus_trader.data.client.DataClient"><em>DataClient</em></a>) – The client to register.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="register_venue_routingself-dataclient-client-venue-venue--void">register_venue_routing(self, DataClient client, Venue venue) → void<a href="#register_venue_routingself-dataclient-client-venue-venue--void" class="hash-link" aria-label="Direct link to register_venue_routing(self, DataClient client, Venue venue) → void" title="Direct link to register_venue_routing(self, DataClient client, Venue venue) → void">​</a></h4>
<p>Register the given client to route messages to the given venue.</p>
<p>Any existing client in the routing map for the given venue will be
overwritten.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>venue</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.Venue"><em>Venue</em></a>) – The venue to route messages to.</li>
<li><strong>client</strong> (<a href="../data/index.htm#nautilus_trader.data.client.DataClient"><em>DataClient</em></a>) – The client for the venue routing.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="registered_clients">registered_clients<a href="#registered_clients" class="hash-link" aria-label="Direct link to registered_clients" title="Direct link to registered_clients">​</a></h4>
<p>list[ClientId]</p>
<p>Return the execution clients registered with the engine.</p>
<ul>
<li><strong>Return type:</strong>
list[<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId">ClientId</a>]</li>
<li><strong>Type:</strong>
DataEngine.registered_clients</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="request_count">request_count<a href="#request_count" class="hash-link" aria-label="Direct link to request_count" title="Direct link to request_count">​</a></h4>
<p>The total count of data requests received by the engine.</p>
<ul>
<li><strong>Returns:</strong>
int</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="resetself--void-2">reset(self) → void<a href="#resetself--void-2" class="hash-link" aria-label="Direct link to reset(self) → void" title="Direct link to reset(self) → void">​</a></h4>
<p>Reset the component.</p>
<p>All stateful fields are reset to their initial value.</p>
<p>While executing on_reset() any exception will be logged and reraised, then the component
will remain in a <code>RESETTING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-20">WARNING<a href="#warning-20" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="response_count">response_count<a href="#response_count" class="hash-link" aria-label="Direct link to response_count" title="Direct link to response_count">​</a></h4>
<p>The total count of data responses received by the engine.</p>
<ul>
<li><strong>Returns:</strong>
int</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="resumeself--void-2">resume(self) → void<a href="#resumeself--void-2" class="hash-link" aria-label="Direct link to resume(self) → void" title="Direct link to resume(self) → void">​</a></h4>
<p>Resume the component.</p>
<p>While executing on_resume() any exception will be logged and reraised, then the component
will remain in a <code>RESUMING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-21">WARNING<a href="#warning-21" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="routing_map">routing_map<a href="#routing_map" class="hash-link" aria-label="Direct link to routing_map" title="Direct link to routing_map">​</a></h4>
<p>dict[Venue, DataClient]</p>
<p>Return the default data client registered with the engine.</p>
<ul>
<li><strong>Return type:</strong>
ClientId or <code>None</code></li>
<li><strong>Type:</strong>
DataEngine.routing_map</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="shutdown_systemself-str-reasonnone--void-2">shutdown_system(self, str reason=None) → void<a href="#shutdown_systemself-str-reasonnone--void-2" class="hash-link" aria-label="Direct link to shutdown_system(self, str reason=None) → void" title="Direct link to shutdown_system(self, str reason=None) → void">​</a></h4>
<p>Initiate a system-wide shutdown by generating and publishing a ShutdownSystem command.</p>
<p>The command is handled by the system’s NautilusKernel, which will invoke either stop (synchronously)
or stop_async (asynchronously) depending on the execution context and the presence of an active event loop.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>reason</strong> (<em>str</em> <em>,</em> <em>optional</em>) – The reason for issuing the shutdown command.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="startself--void-2">start(self) → void<a href="#startself--void-2" class="hash-link" aria-label="Direct link to start(self) → void" title="Direct link to start(self) → void">​</a></h4>
<p>Start the component.</p>
<p>While executing on_start() any exception will be logged and reraised, then the component
will remain in a <code>STARTING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-22">WARNING<a href="#warning-22" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="state-2">state<a href="#state-2" class="hash-link" aria-label="Direct link to state" title="Direct link to state">​</a></h4>
<p>ComponentState</p>
<p>Return the components current state.</p>
<ul>
<li><strong>Return type:</strong>
ComponentState</li>
<li><strong>Type:</strong>
Component.state</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="stopself--void-2">stop(self) → void<a href="#stopself--void-2" class="hash-link" aria-label="Direct link to stop(self) → void" title="Direct link to stop(self) → void">​</a></h4>
<p>Stop the component.</p>
<p>While executing on_stop() any exception will be logged and reraised, then the component
will remain in a <code>STOPPING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-23">WARNING<a href="#warning-23" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="stop_clientsself--void">stop_clients(self) → void<a href="#stop_clientsself--void" class="hash-link" aria-label="Direct link to stop_clients(self) → void" title="Direct link to stop_clients(self) → void">​</a></h4>
<p>Stop the registered clients.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribed_barsself--list-1">subscribed_bars(self) → list<a href="#subscribed_barsself--list-1" class="hash-link" aria-label="Direct link to subscribed_bars(self) → list" title="Direct link to subscribed_bars(self) → list">​</a></h4>
<p>Return the bar types subscribed to.</p>
<ul>
<li><strong>Return type:</strong>
list[<a href="../model/data/index.htm#nautilus_trader.model.data.BarType">BarType</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribed_custom_dataself--list-2">subscribed_custom_data(self) → list<a href="#subscribed_custom_dataself--list-2" class="hash-link" aria-label="Direct link to subscribed_custom_data(self) → list" title="Direct link to subscribed_custom_data(self) → list">​</a></h4>
<p>Return the custom data types subscribed to.</p>
<ul>
<li><strong>Return type:</strong>
list[<a href="../model/data/index.htm#nautilus_trader.model.data.DataType">DataType</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribed_index_pricesself--list-1">subscribed_index_prices(self) → list<a href="#subscribed_index_pricesself--list-1" class="hash-link" aria-label="Direct link to subscribed_index_prices(self) → list" title="Direct link to subscribed_index_prices(self) → list">​</a></h4>
<p>Return the index price update instruments subscribed to.</p>
<ul>
<li><strong>Return type:</strong>
list[<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId">InstrumentId</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribed_instrument_closeself--list-1">subscribed_instrument_close(self) → list<a href="#subscribed_instrument_closeself--list-1" class="hash-link" aria-label="Direct link to subscribed_instrument_close(self) → list" title="Direct link to subscribed_instrument_close(self) → list">​</a></h4>
<p>Return the close price instruments subscribed to.</p>
<ul>
<li><strong>Return type:</strong>
list[<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId">InstrumentId</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribed_instrument_statusself--list-1">subscribed_instrument_status(self) → list<a href="#subscribed_instrument_statusself--list-1" class="hash-link" aria-label="Direct link to subscribed_instrument_status(self) → list" title="Direct link to subscribed_instrument_status(self) → list">​</a></h4>
<p>Return the status update instruments subscribed to.</p>
<ul>
<li><strong>Return type:</strong>
list[<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId">InstrumentId</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribed_instrumentsself--list-1">subscribed_instruments(self) → list<a href="#subscribed_instrumentsself--list-1" class="hash-link" aria-label="Direct link to subscribed_instruments(self) → list" title="Direct link to subscribed_instruments(self) → list">​</a></h4>
<p>Return the instruments subscribed to.</p>
<ul>
<li><strong>Return type:</strong>
list[<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId">InstrumentId</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribed_mark_pricesself--list-1">subscribed_mark_prices(self) → list<a href="#subscribed_mark_pricesself--list-1" class="hash-link" aria-label="Direct link to subscribed_mark_prices(self) → list" title="Direct link to subscribed_mark_prices(self) → list">​</a></h4>
<p>Return the mark price update instruments subscribed to.</p>
<ul>
<li><strong>Return type:</strong>
list[<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId">InstrumentId</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribed_order_book_deltasself--list-1">subscribed_order_book_deltas(self) → list<a href="#subscribed_order_book_deltasself--list-1" class="hash-link" aria-label="Direct link to subscribed_order_book_deltas(self) → list" title="Direct link to subscribed_order_book_deltas(self) → list">​</a></h4>
<p>Return the order book delta instruments subscribed to.</p>
<ul>
<li><strong>Return type:</strong>
list[<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId">InstrumentId</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribed_order_book_snapshotsself--list-1">subscribed_order_book_snapshots(self) → list<a href="#subscribed_order_book_snapshotsself--list-1" class="hash-link" aria-label="Direct link to subscribed_order_book_snapshots(self) → list" title="Direct link to subscribed_order_book_snapshots(self) → list">​</a></h4>
<p>Return the order book snapshot instruments subscribed to.</p>
<ul>
<li><strong>Return type:</strong>
list[<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId">InstrumentId</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribed_quote_ticksself--list-1">subscribed_quote_ticks(self) → list<a href="#subscribed_quote_ticksself--list-1" class="hash-link" aria-label="Direct link to subscribed_quote_ticks(self) → list" title="Direct link to subscribed_quote_ticks(self) → list">​</a></h4>
<p>Return the quote tick instruments subscribed to.</p>
<ul>
<li><strong>Return type:</strong>
list[<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId">InstrumentId</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribed_synthetic_quotesself--list">subscribed_synthetic_quotes(self) → list<a href="#subscribed_synthetic_quotesself--list" class="hash-link" aria-label="Direct link to subscribed_synthetic_quotes(self) → list" title="Direct link to subscribed_synthetic_quotes(self) → list">​</a></h4>
<p>Return the synthetic instrument quotes subscribed to.</p>
<ul>
<li><strong>Return type:</strong>
list[<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId">InstrumentId</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribed_synthetic_tradesself--list">subscribed_synthetic_trades(self) → list<a href="#subscribed_synthetic_tradesself--list" class="hash-link" aria-label="Direct link to subscribed_synthetic_trades(self) → list" title="Direct link to subscribed_synthetic_trades(self) → list">​</a></h4>
<p>Return the synthetic instrument trades subscribed to.</p>
<ul>
<li><strong>Return type:</strong>
list[<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId">InstrumentId</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="subscribed_trade_ticksself--list-1">subscribed_trade_ticks(self) → list<a href="#subscribed_trade_ticksself--list-1" class="hash-link" aria-label="Direct link to subscribed_trade_ticks(self) → list" title="Direct link to subscribed_trade_ticks(self) → list">​</a></h4>
<p>Return the trade tick instruments subscribed to.</p>
<ul>
<li><strong>Return type:</strong>
list[<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId">InstrumentId</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="trader_id-2">trader_id<a href="#trader_id-2" class="hash-link" aria-label="Direct link to trader_id" title="Direct link to trader_id">​</a></h4>
<p>The trader ID associated with the component.</p>
<ul>
<li><strong>Returns:</strong>
TraderId</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="type-2">type<a href="#type-2" class="hash-link" aria-label="Direct link to type" title="Direct link to type">​</a></h4>
<p>The components type.</p>
<ul>
<li><strong>Returns:</strong>
type</li>
</ul>
<p><a id="module-nautilus_trader.live.execution_client"></a></p>
<p>The LiveExecutionClient class is responsible for interfacing with a particular API
which may be presented directly by a venue, or through a broker intermediary.</p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="class-liveexecutionclient"><em>class</em> LiveExecutionClient<a href="#class-liveexecutionclient" class="hash-link" aria-label="Direct link to class-liveexecutionclient" title="Direct link to class-liveexecutionclient">​</a></h3>
<p>Bases: <a href="../execution/index.htm#nautilus_trader.execution.client.ExecutionClient"><code>ExecutionClient</code></a></p>
<p>The base class for all live execution clients.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>loop</strong> (<em>asyncio.AbstractEventLoop</em>) – The event loop for the client.</li>
<li><strong>client_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId"><em>ClientId</em></a>) – The client ID.</li>
<li><strong>venue</strong> (Venue or <code>None</code>) – The client venue. If multi-venue then can be <code>None</code>.</li>
<li><strong>instrument_provider</strong> (<a href="../common/index.htm#nautilus_trader.common.providers.InstrumentProvider"><em>InstrumentProvider</em></a>) – The instrument provider for the client.</li>
<li><strong>account_type</strong> (<em>AccountType</em>) – The account type for the client.</li>
<li><strong>base_currency</strong> (<a href="../model/index.htm#nautilus_trader.model.Currency"><em>Currency</em></a> <em>,</em> <em>optional</em>) – The account base currency for the client. Use <code>None</code> for multi-currency accounts.</li>
<li><strong>msgbus</strong> (<a href="../common/index.htm#nautilus_trader.common.component.MessageBus"><em>MessageBus</em></a>) – The message bus for the client.</li>
<li><strong>cache</strong> (<a href="../cache/index.htm#nautilus_trader.cache.Cache"><em>Cache</em></a>) – The cache for the client.</li>
<li><strong>clock</strong> (<a href="../common/index.htm#nautilus_trader.common.component.LiveClock"><em>LiveClock</em></a>) – The clock for the client.</li>
<li><strong>config</strong> (<a href="../config/index.htm#nautilus_trader.common.config.NautilusConfig"><em>NautilusConfig</em></a> <em>,</em> <em>optional</em>) – The configuration for the instance.</li>
</ul>
</li>
<li><strong>Raises:</strong>
<strong>ValueError</strong> – If oms_type is <code>UNSPECIFIED</code> (must be specified).</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-24">WARNING<a href="#warning-24" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>This class should not be used directly, but through a concrete subclass.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="async-run_after_delaydelay-float-coro-coroutine--none-2"><em>async</em> run_after_delay(delay: float, coro: Coroutine) → None<a href="#async-run_after_delaydelay-float-coro-coroutine--none-2" class="hash-link" aria-label="Direct link to async-run_after_delaydelay-float-coro-coroutine--none-2" title="Direct link to async-run_after_delaydelay-float-coro-coroutine--none-2">​</a></h4>
<p>Run the given coroutine after a delay.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>delay</strong> (<em>float</em>) – The delay (seconds) before running the coroutine.</li>
<li><strong>coro</strong> (<em>Coroutine</em>) – The coroutine to run after the initial delay.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="create_taskcoro-collectionsabccoroutine-log_msg-str--none--none-actions-collectionsabccallable--none--none-success_msg-str--none--none-success_color-nautilus_tradercorerustcommonlogcolor--logcolornormal-0--task-1">create_task(coro: ~collections.abc.Coroutine, log_msg: str | None = None, actions: ~collections.abc.Callable | None = None, success_msg: str | None = None, success_color: ~nautilus_trader.core.rust.common.LogColor = &lt;LogColor.NORMAL: 0&gt;) → Task<a href="#create_taskcoro-collectionsabccoroutine-log_msg-str--none--none-actions-collectionsabccallable--none--none-success_msg-str--none--none-success_color-nautilus_tradercorerustcommonlogcolor--logcolornormal-0--task-1" class="hash-link" aria-label="Direct link to create_task(coro: ~collections.abc.Coroutine, log_msg: str | None = None, actions: ~collections.abc.Callable | None = None, success_msg: str | None = None, success_color: ~nautilus_trader.core.rust.common.LogColor = &lt;LogColor.NORMAL: 0&gt;) → Task" title="Direct link to create_task(coro: ~collections.abc.Coroutine, log_msg: str | None = None, actions: ~collections.abc.Callable | None = None, success_msg: str | None = None, success_color: ~nautilus_trader.core.rust.common.LogColor = &lt;LogColor.NORMAL: 0&gt;) → Task">​</a></h4>
<p>Run the given coroutine with error handling and optional callback actions when
done.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>coro</strong> (<em>Coroutine</em>) – The coroutine to run.</li>
<li><strong>log_msg</strong> (<em>str</em> <em>,</em> <em>optional</em>) – The log message for the task.</li>
<li><strong>actions</strong> (<em>Callable</em> <em>,</em> <em>optional</em>) – The actions callback to run when the coroutine is done.</li>
<li><strong>success_msg</strong> (<em>str</em> <em>,</em> <em>optional</em>) – The log message to write on actions success.</li>
<li><strong>success_color</strong> (str, default <code>NORMAL</code>) – The log message color for actions success.</li>
</ul>
</li>
<li><strong>Return type:</strong>
asyncio.Task</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="connect--none-3">connect() → None<a href="#connect--none-3" class="hash-link" aria-label="Direct link to connect() → None" title="Direct link to connect() → None">​</a></h4>
<p>Connect the client.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="disconnect--none-3">disconnect() → None<a href="#disconnect--none-3" class="hash-link" aria-label="Direct link to disconnect() → None" title="Direct link to disconnect() → None">​</a></h4>
<p>Disconnect the client.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="submit_orderself-submitorder-command--void">submit_order(self, SubmitOrder command) → void<a href="#submit_orderself-submitorder-command--void" class="hash-link" aria-label="Direct link to submit_order(self, SubmitOrder command) → void" title="Direct link to submit_order(self, SubmitOrder command) → void">​</a></h4>
<p>Submit the order contained in the given command for execution.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>command</strong> (<a href="../execution/index.htm#nautilus_trader.execution.messages.SubmitOrder"><em>SubmitOrder</em></a>) – The command to execute.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="submit_order_listself-submitorderlist-command--void">submit_order_list(self, SubmitOrderList command) → void<a href="#submit_order_listself-submitorderlist-command--void" class="hash-link" aria-label="Direct link to submit_order_list(self, SubmitOrderList command) → void" title="Direct link to submit_order_list(self, SubmitOrderList command) → void">​</a></h4>
<p>Submit the order list contained in the given command for execution.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>command</strong> (<a href="../execution/index.htm#nautilus_trader.execution.messages.SubmitOrderList"><em>SubmitOrderList</em></a>) – The command to execute.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="modify_orderself-modifyorder-command--void">modify_order(self, ModifyOrder command) → void<a href="#modify_orderself-modifyorder-command--void" class="hash-link" aria-label="Direct link to modify_order(self, ModifyOrder command) → void" title="Direct link to modify_order(self, ModifyOrder command) → void">​</a></h4>
<p>Modify the order with parameters contained in the command.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>command</strong> (<a href="../execution/index.htm#nautilus_trader.execution.messages.ModifyOrder"><em>ModifyOrder</em></a>) – The command to execute.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="cancel_orderself-cancelorder-command--void">cancel_order(self, CancelOrder command) → void<a href="#cancel_orderself-cancelorder-command--void" class="hash-link" aria-label="Direct link to cancel_order(self, CancelOrder command) → void" title="Direct link to cancel_order(self, CancelOrder command) → void">​</a></h4>
<p>Cancel the order with the client order ID contained in the given command.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>command</strong> (<a href="../execution/index.htm#nautilus_trader.execution.messages.CancelOrder"><em>CancelOrder</em></a>) – The command to execute.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="cancel_all_ordersself-cancelallorders-command--void">cancel_all_orders(self, CancelAllOrders command) → void<a href="#cancel_all_ordersself-cancelallorders-command--void" class="hash-link" aria-label="Direct link to cancel_all_orders(self, CancelAllOrders command) → void" title="Direct link to cancel_all_orders(self, CancelAllOrders command) → void">​</a></h4>
<p>Cancel all orders for the instrument ID contained in the given command.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>command</strong> (<a href="../execution/index.htm#nautilus_trader.execution.messages.CancelAllOrders"><em>CancelAllOrders</em></a>) – The command to execute.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="batch_cancel_ordersself-batchcancelorders-command--void">batch_cancel_orders(self, BatchCancelOrders command) → void<a href="#batch_cancel_ordersself-batchcancelorders-command--void" class="hash-link" aria-label="Direct link to batch_cancel_orders(self, BatchCancelOrders command) → void" title="Direct link to batch_cancel_orders(self, BatchCancelOrders command) → void">​</a></h4>
<p>Batch cancel orders for the instrument ID contained in the given command.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>command</strong> (<a href="../execution/index.htm#nautilus_trader.execution.messages.BatchCancelOrders"><em>BatchCancelOrders</em></a>) – The command to execute.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="query_orderself-queryorder-command--void">query_order(self, QueryOrder command) → void<a href="#query_orderself-queryorder-command--void" class="hash-link" aria-label="Direct link to query_order(self, QueryOrder command) → void" title="Direct link to query_order(self, QueryOrder command) → void">​</a></h4>
<p>Initiate a reconciliation for the queried order which will generate an
OrderStatusReport.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>command</strong> (<a href="../execution/index.htm#nautilus_trader.execution.messages.QueryOrder"><em>QueryOrder</em></a>) – The command to execute.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="async-generate_order_status_reportcommand-generateorderstatusreport--orderstatusreport--none"><em>async</em> generate_order_status_report(command: <a href="../execution/index.htm#nautilus_trader.execution.messages.GenerateOrderStatusReport">GenerateOrderStatusReport</a>) → <a href="../execution/index.htm#nautilus_trader.execution.reports.OrderStatusReport">OrderStatusReport</a> | None<a href="#async-generate_order_status_reportcommand-generateorderstatusreport--orderstatusreport--none" class="hash-link" aria-label="Direct link to async-generate_order_status_reportcommand-generateorderstatusreport--orderstatusreport--none" title="Direct link to async-generate_order_status_reportcommand-generateorderstatusreport--orderstatusreport--none">​</a></h4>
<p>Generate an OrderStatusReport for the given order identifier parameter(s).</p>
<p>If the order is not found, or an error occurs, then logs and returns <code>None</code>.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>command</strong> (<a href="../execution/index.htm#nautilus_trader.execution.messages.GenerateOrderStatusReport"><em>GenerateOrderStatusReport</em></a>) – The command to generate the report.</li>
<li><strong>Return type:</strong>
OrderStatusReport or <code>None</code></li>
<li><strong>Raises:</strong>
<strong>ValueError</strong> – If both the client_order_id and venue_order_id are <code>None</code>.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="async-generate_order_status_reportscommand-generateorderstatusreports--listorderstatusreport"><em>async</em> generate_order_status_reports(command: <a href="../execution/index.htm#nautilus_trader.execution.messages.GenerateOrderStatusReports">GenerateOrderStatusReports</a>) → list[<a href="../execution/index.htm#nautilus_trader.execution.reports.OrderStatusReport">OrderStatusReport</a>]<a href="#async-generate_order_status_reportscommand-generateorderstatusreports--listorderstatusreport" class="hash-link" aria-label="Direct link to async-generate_order_status_reportscommand-generateorderstatusreports--listorderstatusreport" title="Direct link to async-generate_order_status_reportscommand-generateorderstatusreports--listorderstatusreport">​</a></h4>
<p>Generate a list of</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">`</span><br></span></code></pre></div></div>
<p>OrderStatusReport`s with optional query filters.</p>
<p>The returned list may be empty if no orders match the given parameters.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>command</strong> (<a href="../execution/index.htm#nautilus_trader.execution.messages.GenerateOrderStatusReports"><em>GenerateOrderStatusReports</em></a>) – The command for generating the reports.</li>
<li><strong>Return type:</strong>
list[<a href="../execution/index.htm#nautilus_trader.execution.reports.OrderStatusReport">OrderStatusReport</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="async-generate_fill_reportscommand-generatefillreports--listfillreport"><em>async</em> generate_fill_reports(command: <a href="../execution/index.htm#nautilus_trader.execution.messages.GenerateFillReports">GenerateFillReports</a>) → list[<a href="../execution/index.htm#nautilus_trader.execution.reports.FillReport">FillReport</a>]<a href="#async-generate_fill_reportscommand-generatefillreports--listfillreport" class="hash-link" aria-label="Direct link to async-generate_fill_reportscommand-generatefillreports--listfillreport" title="Direct link to async-generate_fill_reportscommand-generatefillreports--listfillreport">​</a></h4>
<p>Generate a list of</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">`</span><br></span></code></pre></div></div>
<p>FillReport`s with optional query filters.</p>
<p>The returned list may be empty if no trades match the given parameters.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>command</strong> (<a href="../execution/index.htm#nautilus_trader.execution.messages.GenerateFillReports"><em>GenerateFillReports</em></a>) – The command for generating the reports.</li>
<li><strong>Return type:</strong>
list[<a href="../execution/index.htm#nautilus_trader.execution.reports.FillReport">FillReport</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="async-generate_position_status_reportscommand-generatepositionstatusreports--listpositionstatusreport"><em>async</em> generate_position_status_reports(command: <a href="../execution/index.htm#nautilus_trader.execution.messages.GeneratePositionStatusReports">GeneratePositionStatusReports</a>) → list[<a href="../execution/index.htm#nautilus_trader.execution.reports.PositionStatusReport">PositionStatusReport</a>]<a href="#async-generate_position_status_reportscommand-generatepositionstatusreports--listpositionstatusreport" class="hash-link" aria-label="Direct link to async-generate_position_status_reportscommand-generatepositionstatusreports--listpositionstatusreport" title="Direct link to async-generate_position_status_reportscommand-generatepositionstatusreports--listpositionstatusreport">​</a></h4>
<p>Generate a list of</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">`</span><br></span></code></pre></div></div>
<p>PositionStatusReport`s with optional query filters.</p>
<p>The returned list may be empty if no positions match the given parameters.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>command</strong> (<a href="../execution/index.htm#nautilus_trader.execution.messages.GeneratePositionStatusReports"><em>GeneratePositionStatusReports</em></a>) – The command for generating the position status reports.</li>
<li><strong>Return type:</strong>
list[<a href="../execution/index.htm#nautilus_trader.execution.reports.PositionStatusReport">PositionStatusReport</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="async-generate_mass_statuslookback_mins-int--none--none--executionmassstatus--none"><em>async</em> generate_mass_status(lookback_mins: int | None = None) → <a href="../execution/index.htm#nautilus_trader.execution.reports.ExecutionMassStatus">ExecutionMassStatus</a> | None<a href="#async-generate_mass_statuslookback_mins-int--none--none--executionmassstatus--none" class="hash-link" aria-label="Direct link to async-generate_mass_statuslookback_mins-int--none--none--executionmassstatus--none" title="Direct link to async-generate_mass_statuslookback_mins-int--none--none--executionmassstatus--none">​</a></h4>
<p>Generate an ExecutionMassStatus report.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>lookback_mins</strong> (<em>int</em> <em>,</em> <em>optional</em>) – The maximum lookback for querying closed orders, trades and positions.</li>
<li><strong>Return type:</strong>
ExecutionMassStatus or <code>None</code></li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="account_id">account_id<a href="#account_id" class="hash-link" aria-label="Direct link to account_id" title="Direct link to account_id">​</a></h4>
<p>The clients account ID.</p>
<ul>
<li><strong>Returns:</strong>
AccountId or <code>None</code></li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="account_type">account_type<a href="#account_type" class="hash-link" aria-label="Direct link to account_type" title="Direct link to account_type">​</a></h4>
<p>The clients account type.</p>
<ul>
<li><strong>Returns:</strong>
AccountType</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="base_currency">base_currency<a href="#base_currency" class="hash-link" aria-label="Direct link to base_currency" title="Direct link to base_currency">​</a></h4>
<p>The clients account base currency (None for multi-currency accounts).</p>
<ul>
<li><strong>Returns:</strong>
Currency or <code>None</code></li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="degradeself--void-3">degrade(self) → void<a href="#degradeself--void-3" class="hash-link" aria-label="Direct link to degrade(self) → void" title="Direct link to degrade(self) → void">​</a></h4>
<p>Degrade the component.</p>
<p>While executing on_degrade() any exception will be logged and reraised, then the component
will remain in a <code>DEGRADING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-25">WARNING<a href="#warning-25" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="disposeself--void-3">dispose(self) → void<a href="#disposeself--void-3" class="hash-link" aria-label="Direct link to dispose(self) → void" title="Direct link to dispose(self) → void">​</a></h4>
<p>Dispose of the component.</p>
<p>While executing on_dispose() any exception will be logged and reraised, then the component
will remain in a <code>DISPOSING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-26">WARNING<a href="#warning-26" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="faultself--void-3">fault(self) → void<a href="#faultself--void-3" class="hash-link" aria-label="Direct link to fault(self) → void" title="Direct link to fault(self) → void">​</a></h4>
<p>Fault the component.</p>
<p>Calling this method multiple times has the same effect as calling it once (it is idempotent).
Once called, it cannot be reversed, and no other methods should be called on this instance.</p>
<p>While executing on_fault() any exception will be logged and reraised, then the component
will remain in a <code>FAULTING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-27">WARNING<a href="#warning-27" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="classmethod-fully_qualified_namecls--str-3"><em>classmethod</em> fully_qualified_name(cls) → str<a href="#classmethod-fully_qualified_namecls--str-3" class="hash-link" aria-label="Direct link to classmethod-fully_qualified_namecls--str-3" title="Direct link to classmethod-fully_qualified_namecls--str-3">​</a></h4>
<p>Return the fully qualified name for the components class.</p>
<ul>
<li><strong>Return type:</strong>
str</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="generate_account_stateself-list-balances-list-margins-bool-reported-uint64_t-ts_event-dict-infonone--void">generate_account_state(self, list balances, list margins, bool reported, uint64_t ts_event, dict info=None) → void<a href="#generate_account_stateself-list-balances-list-margins-bool-reported-uint64_t-ts_event-dict-infonone--void" class="hash-link" aria-label="Direct link to generate_account_state(self, list balances, list margins, bool reported, uint64_t ts_event, dict info=None) → void" title="Direct link to generate_account_state(self, list balances, list margins, bool reported, uint64_t ts_event, dict info=None) → void">​</a></h4>
<p>Generate an AccountState event and publish on the message bus.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>balances</strong> (<em>list</em> <em>[</em><a href="../model/index.htm#nautilus_trader.model.AccountBalance"><em>AccountBalance</em></a> <em>]</em>) – The account balances.</li>
<li><strong>margins</strong> (<em>list</em> <em>[</em><a href="../model/index.htm#nautilus_trader.model.MarginBalance"><em>MarginBalance</em></a> <em>]</em>) – The margin balances.</li>
<li><strong>reported</strong> (<em>bool</em>) – If the balances are reported directly from the exchange.</li>
<li><strong>ts_event</strong> (<em>uint64_t</em>) – UNIX timestamp (nanoseconds) when the account state event occurred.</li>
<li><strong>info</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>object</em> <em>]</em>) – The additional implementation specific account information.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="generate_order_acceptedself-strategyid-strategy_id-instrumentid-instrument_id-clientorderid-client_order_id-venueorderid-venue_order_id-uint64_t-ts_event--void">generate_order_accepted(self, StrategyId strategy_id, InstrumentId instrument_id, ClientOrderId client_order_id, VenueOrderId venue_order_id, uint64_t ts_event) → void<a href="#generate_order_acceptedself-strategyid-strategy_id-instrumentid-instrument_id-clientorderid-client_order_id-venueorderid-venue_order_id-uint64_t-ts_event--void" class="hash-link" aria-label="Direct link to generate_order_accepted(self, StrategyId strategy_id, InstrumentId instrument_id, ClientOrderId client_order_id, VenueOrderId venue_order_id, uint64_t ts_event) → void" title="Direct link to generate_order_accepted(self, StrategyId strategy_id, InstrumentId instrument_id, ClientOrderId client_order_id, VenueOrderId venue_order_id, uint64_t ts_event) → void">​</a></h4>
<p>Generate an OrderAccepted event and send it to the ExecutionEngine.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>strategy_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.StrategyId"><em>StrategyId</em></a>) – The strategy ID associated with the event.</li>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument ID.</li>
<li><strong>client_order_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientOrderId"><em>ClientOrderId</em></a>) – The client order ID.</li>
<li><strong>venue_order_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.VenueOrderId"><em>VenueOrderId</em></a>) – The venue order ID (assigned by the venue).</li>
<li><strong>ts_event</strong> (<em>uint64_t</em>) – UNIX timestamp (nanoseconds) when the order accepted event occurred.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="generate_order_cancel_rejectedself-strategyid-strategy_id-instrumentid-instrument_id-clientorderid-client_order_id-venueorderid-venue_order_id-str-reason-uint64_t-ts_event--void">generate_order_cancel_rejected(self, StrategyId strategy_id, InstrumentId instrument_id, ClientOrderId client_order_id, VenueOrderId venue_order_id, str reason, uint64_t ts_event) → void<a href="#generate_order_cancel_rejectedself-strategyid-strategy_id-instrumentid-instrument_id-clientorderid-client_order_id-venueorderid-venue_order_id-str-reason-uint64_t-ts_event--void" class="hash-link" aria-label="Direct link to generate_order_cancel_rejected(self, StrategyId strategy_id, InstrumentId instrument_id, ClientOrderId client_order_id, VenueOrderId venue_order_id, str reason, uint64_t ts_event) → void" title="Direct link to generate_order_cancel_rejected(self, StrategyId strategy_id, InstrumentId instrument_id, ClientOrderId client_order_id, VenueOrderId venue_order_id, str reason, uint64_t ts_event) → void">​</a></h4>
<p>Generate an OrderCancelRejected event and send it to the ExecutionEngine.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>strategy_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.StrategyId"><em>StrategyId</em></a>) – The strategy ID associated with the event.</li>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument ID.</li>
<li><strong>client_order_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientOrderId"><em>ClientOrderId</em></a>) – The client order ID.</li>
<li><strong>venue_order_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.VenueOrderId"><em>VenueOrderId</em></a>) – The venue order ID (assigned by the venue).</li>
<li><strong>reason</strong> (<em>str</em>) – The order cancel rejected reason.</li>
<li><strong>ts_event</strong> (<em>uint64_t</em>) – UNIX timestamp (nanoseconds) when the order cancel rejected event occurred.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="generate_order_canceledself-strategyid-strategy_id-instrumentid-instrument_id-clientorderid-client_order_id-venueorderid-venue_order_id-uint64_t-ts_event--void">generate_order_canceled(self, StrategyId strategy_id, InstrumentId instrument_id, ClientOrderId client_order_id, VenueOrderId venue_order_id, uint64_t ts_event) → void<a href="#generate_order_canceledself-strategyid-strategy_id-instrumentid-instrument_id-clientorderid-client_order_id-venueorderid-venue_order_id-uint64_t-ts_event--void" class="hash-link" aria-label="Direct link to generate_order_canceled(self, StrategyId strategy_id, InstrumentId instrument_id, ClientOrderId client_order_id, VenueOrderId venue_order_id, uint64_t ts_event) → void" title="Direct link to generate_order_canceled(self, StrategyId strategy_id, InstrumentId instrument_id, ClientOrderId client_order_id, VenueOrderId venue_order_id, uint64_t ts_event) → void">​</a></h4>
<p>Generate an OrderCanceled event and send it to the ExecutionEngine.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>strategy_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.StrategyId"><em>StrategyId</em></a>) – The strategy ID associated with the event.</li>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument ID.</li>
<li><strong>client_order_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientOrderId"><em>ClientOrderId</em></a>) – The client order ID.</li>
<li><strong>venue_order_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.VenueOrderId"><em>VenueOrderId</em></a>) – The venue order ID (assigned by the venue).</li>
<li><strong>ts_event</strong> (<em>uint64_t</em>) – UNIX timestamp (nanoseconds) when order canceled event occurred.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="generate_order_expiredself-strategyid-strategy_id-instrumentid-instrument_id-clientorderid-client_order_id-venueorderid-venue_order_id-uint64_t-ts_event--void">generate_order_expired(self, StrategyId strategy_id, InstrumentId instrument_id, ClientOrderId client_order_id, VenueOrderId venue_order_id, uint64_t ts_event) → void<a href="#generate_order_expiredself-strategyid-strategy_id-instrumentid-instrument_id-clientorderid-client_order_id-venueorderid-venue_order_id-uint64_t-ts_event--void" class="hash-link" aria-label="Direct link to generate_order_expired(self, StrategyId strategy_id, InstrumentId instrument_id, ClientOrderId client_order_id, VenueOrderId venue_order_id, uint64_t ts_event) → void" title="Direct link to generate_order_expired(self, StrategyId strategy_id, InstrumentId instrument_id, ClientOrderId client_order_id, VenueOrderId venue_order_id, uint64_t ts_event) → void">​</a></h4>
<p>Generate an OrderExpired event and send it to the ExecutionEngine.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>strategy_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.StrategyId"><em>StrategyId</em></a>) – The strategy ID associated with the event.</li>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument ID.</li>
<li><strong>client_order_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientOrderId"><em>ClientOrderId</em></a>) – The client order ID.</li>
<li><strong>venue_order_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.VenueOrderId"><em>VenueOrderId</em></a>) – The venue order ID (assigned by the venue).</li>
<li><strong>ts_event</strong> (<em>uint64_t</em>) – UNIX timestamp (nanoseconds) when the order expired event occurred.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="generate_order_filledself-strategyid-strategy_id-instrumentid-instrument_id-clientorderid-client_order_id-venueorderid-venue_order_id-positionid-venue_position_id-positionid--none-tradeid-trade_id-orderside-order_side-ordertype-order_type-quantity-last_qty-price-last_px-currency-quote_currency-money-commission-liquidityside-liquidity_side-uint64_t-ts_event-dict-infonone--void">generate_order_filled(self, StrategyId strategy_id, InstrumentId instrument_id, ClientOrderId client_order_id, VenueOrderId venue_order_id, PositionId venue_position_id: PositionId | None, TradeId trade_id, OrderSide order_side, OrderType order_type, Quantity last_qty, Price last_px, Currency quote_currency, Money commission, LiquiditySide liquidity_side, uint64_t ts_event, dict info=None) → void<a href="#generate_order_filledself-strategyid-strategy_id-instrumentid-instrument_id-clientorderid-client_order_id-venueorderid-venue_order_id-positionid-venue_position_id-positionid--none-tradeid-trade_id-orderside-order_side-ordertype-order_type-quantity-last_qty-price-last_px-currency-quote_currency-money-commission-liquidityside-liquidity_side-uint64_t-ts_event-dict-infonone--void" class="hash-link" aria-label="Direct link to generate_order_filled(self, StrategyId strategy_id, InstrumentId instrument_id, ClientOrderId client_order_id, VenueOrderId venue_order_id, PositionId venue_position_id: PositionId | None, TradeId trade_id, OrderSide order_side, OrderType order_type, Quantity last_qty, Price last_px, Currency quote_currency, Money commission, LiquiditySide liquidity_side, uint64_t ts_event, dict info=None) → void" title="Direct link to generate_order_filled(self, StrategyId strategy_id, InstrumentId instrument_id, ClientOrderId client_order_id, VenueOrderId venue_order_id, PositionId venue_position_id: PositionId | None, TradeId trade_id, OrderSide order_side, OrderType order_type, Quantity last_qty, Price last_px, Currency quote_currency, Money commission, LiquiditySide liquidity_side, uint64_t ts_event, dict info=None) → void">​</a></h4>
<p>Generate an OrderFilled event and send it to the ExecutionEngine.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>strategy_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.StrategyId"><em>StrategyId</em></a>) – The strategy ID associated with the event.</li>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument ID.</li>
<li><strong>client_order_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientOrderId"><em>ClientOrderId</em></a>) – The client order ID.</li>
<li><strong>venue_order_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.VenueOrderId"><em>VenueOrderId</em></a>) – The venue order ID (assigned by the venue).</li>
<li><strong>trade_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.TradeId"><em>TradeId</em></a>) – The trade ID.</li>
<li><strong>venue_position_id</strong> (PositionId or <code>None</code>) – The venue position ID associated with the order. If the trading
venue has assigned a position ID / ticket then pass that here,
otherwise pass <code>None</code> and the execution engine OMS will handle
position ID resolution.</li>
<li><strong>order_side</strong> (OrderSide {<code>BUY</code>, <code>SELL</code>}) – The execution order side.</li>
<li><strong>order_type</strong> (<em>OrderType</em>) – The execution order type.</li>
<li><strong>last_qty</strong> (<a href="../model/index.htm#nautilus_trader.model.Quantity"><em>Quantity</em></a>) – The fill quantity for this execution.</li>
<li><strong>last_px</strong> (<a href="../model/index.htm#nautilus_trader.model.Price"><em>Price</em></a>) – The fill price for this execution (not average price).</li>
<li><strong>quote_currency</strong> (<a href="../model/index.htm#nautilus_trader.model.Currency"><em>Currency</em></a>) – The currency of the price.</li>
<li><strong>commission</strong> (<a href="../model/index.htm#nautilus_trader.model.Money"><em>Money</em></a>) – The fill commission.</li>
<li><strong>liquidity_side</strong> (LiquiditySide {<code>NO_LIQUIDITY_SIDE</code>, <code>MAKER</code>, <code>TAKER</code>}) – The execution liquidity side.</li>
<li><strong>ts_event</strong> (<em>uint64_t</em>) – UNIX timestamp (nanoseconds) when the order filled event occurred.</li>
<li><strong>info</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <em>object</em> <em>]</em> <em>,</em> <em>optional</em>) – The additional fill information.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="generate_order_modify_rejectedself-strategyid-strategy_id-instrumentid-instrument_id-clientorderid-client_order_id-venueorderid-venue_order_id-str-reason-uint64_t-ts_event--void">generate_order_modify_rejected(self, StrategyId strategy_id, InstrumentId instrument_id, ClientOrderId client_order_id, VenueOrderId venue_order_id, str reason, uint64_t ts_event) → void<a href="#generate_order_modify_rejectedself-strategyid-strategy_id-instrumentid-instrument_id-clientorderid-client_order_id-venueorderid-venue_order_id-str-reason-uint64_t-ts_event--void" class="hash-link" aria-label="Direct link to generate_order_modify_rejected(self, StrategyId strategy_id, InstrumentId instrument_id, ClientOrderId client_order_id, VenueOrderId venue_order_id, str reason, uint64_t ts_event) → void" title="Direct link to generate_order_modify_rejected(self, StrategyId strategy_id, InstrumentId instrument_id, ClientOrderId client_order_id, VenueOrderId venue_order_id, str reason, uint64_t ts_event) → void">​</a></h4>
<p>Generate an OrderModifyRejected event and send it to the ExecutionEngine.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>strategy_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.StrategyId"><em>StrategyId</em></a>) – The strategy ID associated with the event.</li>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument ID.</li>
<li><strong>client_order_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientOrderId"><em>ClientOrderId</em></a>) – The client order ID.</li>
<li><strong>venue_order_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.VenueOrderId"><em>VenueOrderId</em></a>) – The venue order ID (assigned by the venue).</li>
<li><strong>reason</strong> (<em>str</em>) – The order update rejected reason.</li>
<li><strong>ts_event</strong> (<em>uint64_t</em>) – UNIX timestamp (nanoseconds) when the order update rejection event occurred.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="generate_order_rejectedself-strategyid-strategy_id-instrumentid-instrument_id-clientorderid-client_order_id-str-reason-uint64_t-ts_event--void">generate_order_rejected(self, StrategyId strategy_id, InstrumentId instrument_id, ClientOrderId client_order_id, str reason, uint64_t ts_event) → void<a href="#generate_order_rejectedself-strategyid-strategy_id-instrumentid-instrument_id-clientorderid-client_order_id-str-reason-uint64_t-ts_event--void" class="hash-link" aria-label="Direct link to generate_order_rejected(self, StrategyId strategy_id, InstrumentId instrument_id, ClientOrderId client_order_id, str reason, uint64_t ts_event) → void" title="Direct link to generate_order_rejected(self, StrategyId strategy_id, InstrumentId instrument_id, ClientOrderId client_order_id, str reason, uint64_t ts_event) → void">​</a></h4>
<p>Generate an OrderRejected event and send it to the ExecutionEngine.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>strategy_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.StrategyId"><em>StrategyId</em></a>) – The strategy ID associated with the event.</li>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument ID.</li>
<li><strong>client_order_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientOrderId"><em>ClientOrderId</em></a>) – The client order ID.</li>
<li><strong>reason</strong> (<em>datetime</em>) – The order rejected reason.</li>
<li><strong>ts_event</strong> (<em>uint64_t</em>) – UNIX timestamp (nanoseconds) when the order rejected event occurred.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="generate_order_submittedself-strategyid-strategy_id-instrumentid-instrument_id-clientorderid-client_order_id-uint64_t-ts_event--void">generate_order_submitted(self, StrategyId strategy_id, InstrumentId instrument_id, ClientOrderId client_order_id, uint64_t ts_event) → void<a href="#generate_order_submittedself-strategyid-strategy_id-instrumentid-instrument_id-clientorderid-client_order_id-uint64_t-ts_event--void" class="hash-link" aria-label="Direct link to generate_order_submitted(self, StrategyId strategy_id, InstrumentId instrument_id, ClientOrderId client_order_id, uint64_t ts_event) → void" title="Direct link to generate_order_submitted(self, StrategyId strategy_id, InstrumentId instrument_id, ClientOrderId client_order_id, uint64_t ts_event) → void">​</a></h4>
<p>Generate an OrderSubmitted event and send it to the ExecutionEngine.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>strategy_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.StrategyId"><em>StrategyId</em></a>) – The strategy ID associated with the event.</li>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument ID.</li>
<li><strong>client_order_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientOrderId"><em>ClientOrderId</em></a>) – The client order ID.</li>
<li><strong>ts_event</strong> (<em>uint64_t</em>) – UNIX timestamp (nanoseconds) when the order submitted event occurred.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="generate_order_triggeredself-strategyid-strategy_id-instrumentid-instrument_id-clientorderid-client_order_id-venueorderid-venue_order_id-uint64_t-ts_event--void">generate_order_triggered(self, StrategyId strategy_id, InstrumentId instrument_id, ClientOrderId client_order_id, VenueOrderId venue_order_id, uint64_t ts_event) → void<a href="#generate_order_triggeredself-strategyid-strategy_id-instrumentid-instrument_id-clientorderid-client_order_id-venueorderid-venue_order_id-uint64_t-ts_event--void" class="hash-link" aria-label="Direct link to generate_order_triggered(self, StrategyId strategy_id, InstrumentId instrument_id, ClientOrderId client_order_id, VenueOrderId venue_order_id, uint64_t ts_event) → void" title="Direct link to generate_order_triggered(self, StrategyId strategy_id, InstrumentId instrument_id, ClientOrderId client_order_id, VenueOrderId venue_order_id, uint64_t ts_event) → void">​</a></h4>
<p>Generate an OrderTriggered event and send it to the ExecutionEngine.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>strategy_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.StrategyId"><em>StrategyId</em></a>) – The strategy ID associated with the event.</li>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument ID.</li>
<li><strong>client_order_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientOrderId"><em>ClientOrderId</em></a>) – The client order ID.</li>
<li><strong>venue_order_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.VenueOrderId"><em>VenueOrderId</em></a>) – The venue order ID (assigned by the venue).</li>
<li><strong>ts_event</strong> (<em>uint64_t</em>) – UNIX timestamp (nanoseconds) when the order triggered event occurred.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="generate_order_updatedself-strategyid-strategy_id-instrumentid-instrument_id-clientorderid-client_order_id-venueorderid-venue_order_id-quantity-quantity-price-price-price-trigger_price-uint64_t-ts_event-bool-venue_order_id_modifiedfalse--void">generate_order_updated(self, StrategyId strategy_id, InstrumentId instrument_id, ClientOrderId client_order_id, VenueOrderId venue_order_id, Quantity quantity, Price price, Price trigger_price, uint64_t ts_event, bool venue_order_id_modified=False) → void<a href="#generate_order_updatedself-strategyid-strategy_id-instrumentid-instrument_id-clientorderid-client_order_id-venueorderid-venue_order_id-quantity-quantity-price-price-price-trigger_price-uint64_t-ts_event-bool-venue_order_id_modifiedfalse--void" class="hash-link" aria-label="Direct link to generate_order_updated(self, StrategyId strategy_id, InstrumentId instrument_id, ClientOrderId client_order_id, VenueOrderId venue_order_id, Quantity quantity, Price price, Price trigger_price, uint64_t ts_event, bool venue_order_id_modified=False) → void" title="Direct link to generate_order_updated(self, StrategyId strategy_id, InstrumentId instrument_id, ClientOrderId client_order_id, VenueOrderId venue_order_id, Quantity quantity, Price price, Price trigger_price, uint64_t ts_event, bool venue_order_id_modified=False) → void">​</a></h4>
<p>Generate an OrderUpdated event and send it to the ExecutionEngine.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>strategy_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.StrategyId"><em>StrategyId</em></a>) – The strategy ID associated with the event.</li>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument ID.</li>
<li><strong>client_order_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientOrderId"><em>ClientOrderId</em></a>) – The client order ID.</li>
<li><strong>venue_order_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.VenueOrderId"><em>VenueOrderId</em></a>) – The venue order ID (assigned by the venue).</li>
<li><strong>quantity</strong> (<a href="../model/index.htm#nautilus_trader.model.Quantity"><em>Quantity</em></a>) – The orders current quantity.</li>
<li><strong>price</strong> (<a href="../model/index.htm#nautilus_trader.model.Price"><em>Price</em></a>) – The orders current price.</li>
<li><strong>trigger_price</strong> (Price or <code>None</code>) – The orders current trigger price.</li>
<li><strong>ts_event</strong> (<em>uint64_t</em>) – UNIX timestamp (nanoseconds) when the order update event occurred.</li>
<li><strong>venue_order_id_modified</strong> (<em>bool</em>) – If the ID was modified for this event.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="get_accountself--account">get_account(self) → Account<a href="#get_accountself--account" class="hash-link" aria-label="Direct link to get_account(self) → Account" title="Direct link to get_account(self) → Account">​</a></h4>
<p>Return the account for the client (if registered).</p>
<ul>
<li><strong>Return type:</strong>
Account or <code>None</code></li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="id-3">id<a href="#id-3" class="hash-link" aria-label="Direct link to id" title="Direct link to id">​</a></h4>
<p>The components ID.</p>
<ul>
<li><strong>Returns:</strong>
ComponentId</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_connected-2">is_connected<a href="#is_connected-2" class="hash-link" aria-label="Direct link to is_connected" title="Direct link to is_connected">​</a></h4>
<p>If the client is connected.</p>
<ul>
<li><strong>Returns:</strong>
bool</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_degraded-3">is_degraded<a href="#is_degraded-3" class="hash-link" aria-label="Direct link to is_degraded" title="Direct link to is_degraded">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>DEGRADED</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_degraded</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_disposed-3">is_disposed<a href="#is_disposed-3" class="hash-link" aria-label="Direct link to is_disposed" title="Direct link to is_disposed">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>DISPOSED</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_disposed</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_faulted-3">is_faulted<a href="#is_faulted-3" class="hash-link" aria-label="Direct link to is_faulted" title="Direct link to is_faulted">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>FAULTED</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_faulted</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_initialized-3">is_initialized<a href="#is_initialized-3" class="hash-link" aria-label="Direct link to is_initialized" title="Direct link to is_initialized">​</a></h4>
<p>bool</p>
<p>Return whether the component has been initialized (component.state &gt;= <code>INITIALIZED</code>).</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_initialized</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_running-3">is_running<a href="#is_running-3" class="hash-link" aria-label="Direct link to is_running" title="Direct link to is_running">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>RUNNING</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_running</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_stopped-3">is_stopped<a href="#is_stopped-3" class="hash-link" aria-label="Direct link to is_stopped" title="Direct link to is_stopped">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>STOPPED</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_stopped</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="oms_type">oms_type<a href="#oms_type" class="hash-link" aria-label="Direct link to oms_type" title="Direct link to oms_type">​</a></h4>
<p>The venues order management system type.</p>
<ul>
<li><strong>Returns:</strong>
OmsType</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="resetself--void-3">reset(self) → void<a href="#resetself--void-3" class="hash-link" aria-label="Direct link to reset(self) → void" title="Direct link to reset(self) → void">​</a></h4>
<p>Reset the component.</p>
<p>All stateful fields are reset to their initial value.</p>
<p>While executing on_reset() any exception will be logged and reraised, then the component
will remain in a <code>RESETTING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-28">WARNING<a href="#warning-28" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="resumeself--void-3">resume(self) → void<a href="#resumeself--void-3" class="hash-link" aria-label="Direct link to resume(self) → void" title="Direct link to resume(self) → void">​</a></h4>
<p>Resume the component.</p>
<p>While executing on_resume() any exception will be logged and reraised, then the component
will remain in a <code>RESUMING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-29">WARNING<a href="#warning-29" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="shutdown_systemself-str-reasonnone--void-3">shutdown_system(self, str reason=None) → void<a href="#shutdown_systemself-str-reasonnone--void-3" class="hash-link" aria-label="Direct link to shutdown_system(self, str reason=None) → void" title="Direct link to shutdown_system(self, str reason=None) → void">​</a></h4>
<p>Initiate a system-wide shutdown by generating and publishing a ShutdownSystem command.</p>
<p>The command is handled by the system’s NautilusKernel, which will invoke either stop (synchronously)
or stop_async (asynchronously) depending on the execution context and the presence of an active event loop.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>reason</strong> (<em>str</em> <em>,</em> <em>optional</em>) – The reason for issuing the shutdown command.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="startself--void-3">start(self) → void<a href="#startself--void-3" class="hash-link" aria-label="Direct link to start(self) → void" title="Direct link to start(self) → void">​</a></h4>
<p>Start the component.</p>
<p>While executing on_start() any exception will be logged and reraised, then the component
will remain in a <code>STARTING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-30">WARNING<a href="#warning-30" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="state-3">state<a href="#state-3" class="hash-link" aria-label="Direct link to state" title="Direct link to state">​</a></h4>
<p>ComponentState</p>
<p>Return the components current state.</p>
<ul>
<li><strong>Return type:</strong>
ComponentState</li>
<li><strong>Type:</strong>
Component.state</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="stopself--void-3">stop(self) → void<a href="#stopself--void-3" class="hash-link" aria-label="Direct link to stop(self) → void" title="Direct link to stop(self) → void">​</a></h4>
<p>Stop the component.</p>
<p>While executing on_stop() any exception will be logged and reraised, then the component
will remain in a <code>STOPPING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-31">WARNING<a href="#warning-31" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="trader_id-3">trader_id<a href="#trader_id-3" class="hash-link" aria-label="Direct link to trader_id" title="Direct link to trader_id">​</a></h4>
<p>The trader ID associated with the component.</p>
<ul>
<li><strong>Returns:</strong>
TraderId</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="type-3">type<a href="#type-3" class="hash-link" aria-label="Direct link to type" title="Direct link to type">​</a></h4>
<p>The components type.</p>
<ul>
<li><strong>Returns:</strong>
type</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="venue-2">venue<a href="#venue-2" class="hash-link" aria-label="Direct link to venue" title="Direct link to venue">​</a></h4>
<p>The clients venue ID (if not a routing client).</p>
<ul>
<li><strong>Returns:</strong>
Venue or <code>None</code></li>
</ul>
<p><a id="module-nautilus_trader.live.execution_engine"></a></p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="class-liveexecutionengine"><em>class</em> LiveExecutionEngine<a href="#class-liveexecutionengine" class="hash-link" aria-label="Direct link to class-liveexecutionengine" title="Direct link to class-liveexecutionengine">​</a></h3>
<p>Bases: <a href="../execution/index.htm#nautilus_trader.execution.engine.ExecutionEngine"><code>ExecutionEngine</code></a></p>
<p>Provides a high-performance asynchronous live execution engine.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>loop</strong> (<em>asyncio.AbstractEventLoop</em>) – The event loop for the engine.</li>
<li><strong>msgbus</strong> (<a href="../common/index.htm#nautilus_trader.common.component.MessageBus"><em>MessageBus</em></a>) – The message bus for the engine.</li>
<li><strong>cache</strong> (<a href="../cache/index.htm#nautilus_trader.cache.Cache"><em>Cache</em></a>) – The cache for the engine.</li>
<li><strong>clock</strong> (<a href="../common/index.htm#nautilus_trader.common.component.LiveClock"><em>LiveClock</em></a>) – The clock for the engine.</li>
<li><strong>config</strong> (<a href="../config/index.htm#nautilus_trader.live.config.LiveExecEngineConfig"><em>LiveExecEngineConfig</em></a> <em>,</em> <em>optional</em>) – The configuration for the instance.</li>
</ul>
</li>
<li><strong>Raises:</strong>
<strong>TypeError</strong> – If config is not of type LiveExecEngineConfig.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="property-reconciliation--bool"><em>property</em> reconciliation <em>: bool</em><a href="#property-reconciliation--bool" class="hash-link" aria-label="Direct link to property-reconciliation--bool" title="Direct link to property-reconciliation--bool">​</a></h4>
<p>Return whether the reconciliation process will be run on start.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="connect--none-4">connect() → None<a href="#connect--none-4" class="hash-link" aria-label="Direct link to connect() → None" title="Direct link to connect() → None">​</a></h4>
<p>Connect the engine by calling connect on all registered clients.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="disconnect--none-4">disconnect() → None<a href="#disconnect--none-4" class="hash-link" aria-label="Direct link to disconnect() → None" title="Direct link to disconnect() → None">​</a></h4>
<p>Disconnect the engine by calling disconnect on all registered clients.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="get_cmd_queue_task--task--none-1">get_cmd_queue_task() → Task | None<a href="#get_cmd_queue_task--task--none-1" class="hash-link" aria-label="Direct link to get_cmd_queue_task() → Task | None" title="Direct link to get_cmd_queue_task() → Task | None">​</a></h4>
<p>Return the internal command queue task for the engine.</p>
<ul>
<li><strong>Return type:</strong>
asyncio.Task or <code>None</code></li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="get_evt_queue_task--task--none">get_evt_queue_task() → Task | None<a href="#get_evt_queue_task--task--none" class="hash-link" aria-label="Direct link to get_evt_queue_task() → Task | None" title="Direct link to get_evt_queue_task() → Task | None">​</a></h4>
<p>Return the internal event queue task for the engine.</p>
<ul>
<li><strong>Return type:</strong>
asyncio.Task or <code>None</code></li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="get_inflight_check_task--task--none">get_inflight_check_task() → Task | None<a href="#get_inflight_check_task--task--none" class="hash-link" aria-label="Direct link to get_inflight_check_task() → Task | None" title="Direct link to get_inflight_check_task() → Task | None">​</a></h4>
<p>Return the internal in-flight check task for the engine.</p>
<ul>
<li><strong>Return type:</strong>
asyncio.Task or <code>None</code></li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="get_own_books_audit_task--task--none">get_own_books_audit_task() → Task | None<a href="#get_own_books_audit_task--task--none" class="hash-link" aria-label="Direct link to get_own_books_audit_task() → Task | None" title="Direct link to get_own_books_audit_task() → Task | None">​</a></h4>
<p>Return the own books audit task for the engine.</p>
<ul>
<li><strong>Return type:</strong>
asyncio.Task or <code>None</code></li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="get_open_check_task--task--none">get_open_check_task() → Task | None<a href="#get_open_check_task--task--none" class="hash-link" aria-label="Direct link to get_open_check_task() → Task | None" title="Direct link to get_open_check_task() → Task | None">​</a></h4>
<p>Return the open check task for the engine.</p>
<ul>
<li><strong>Return type:</strong>
asyncio.Task or <code>None</code></li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="cmd_qsize--int-1">cmd_qsize() → int<a href="#cmd_qsize--int-1" class="hash-link" aria-label="Direct link to cmd_qsize() → int" title="Direct link to cmd_qsize() → int">​</a></h4>
<p>Return the number of Command messages buffered on the internal queue.</p>
<ul>
<li><strong>Return type:</strong>
int</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="evt_qsize--int">evt_qsize() → int<a href="#evt_qsize--int" class="hash-link" aria-label="Direct link to evt_qsize() → int" title="Direct link to evt_qsize() → int">​</a></h4>
<p>Return the number of Event messages buffered on the internal queue.</p>
<ul>
<li><strong>Return type:</strong>
int</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="kill--none-1">kill() → None<a href="#kill--none-1" class="hash-link" aria-label="Direct link to kill() → None" title="Direct link to kill() → None">​</a></h4>
<p>Kill the engine by abruptly canceling the queue task and calling stop.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="executecommand-tradingcommand--none">execute(command: <a href="../execution/index.htm#nautilus_trader.execution.messages.TradingCommand">TradingCommand</a>) → None<a href="#executecommand-tradingcommand--none" class="hash-link" aria-label="Direct link to executecommand-tradingcommand--none" title="Direct link to executecommand-tradingcommand--none">​</a></h4>
<p>Execute the given command.</p>
<p>If the internal queue is already full then will log a warning and block
until queue size reduces.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>command</strong> (<a href="../execution/index.htm#nautilus_trader.execution.messages.TradingCommand"><em>TradingCommand</em></a>) – The command to execute.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="processevent-orderevent--none">process(event: <a href="../model/events/index.htm#nautilus_trader.model.events.order.OrderEvent">OrderEvent</a>) → None<a href="#processevent-orderevent--none" class="hash-link" aria-label="Direct link to processevent-orderevent--none" title="Direct link to processevent-orderevent--none">​</a></h4>
<p>Process the given event message.</p>
<p>If the internal queue is at or near capacity, it logs a warning (throttled)
and schedules an asynchronous put() operation. This ensures all messages are
eventually enqueued and processed without blocking the caller when the queue is full.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>event</strong> (<a href="../model/events/index.htm#nautilus_trader.model.events.OrderEvent"><em>OrderEvent</em></a>) – The event to process.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="async-reconcile_statetimeout_secs-float--100--bool"><em>async</em> reconcile_state(timeout_secs: float = 10.0) → bool<a href="#async-reconcile_statetimeout_secs-float--100--bool" class="hash-link" aria-label="Direct link to async-reconcile_statetimeout_secs-float--100--bool" title="Direct link to async-reconcile_statetimeout_secs-float--100--bool">​</a></h4>
<p>Reconcile the internal execution state with all execution clients (external
state).</p>
<ul>
<li><strong>Parameters:</strong>
<strong>timeout_secs</strong> (<em>double</em> <em>,</em> <em>default 10.0</em>) – The timeout (seconds) for reconciliation to complete.</li>
<li><strong>Returns:</strong>
True if states reconcile within timeout, else False.</li>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Raises:</strong>
<strong>ValueError</strong> – If timeout_secs is not positive (&gt; 0).</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="reconcile_reportreport-executionreport--bool">reconcile_report(report: <a href="../execution/index.htm#nautilus_trader.execution.reports.ExecutionReport">ExecutionReport</a>) → bool<a href="#reconcile_reportreport-executionreport--bool" class="hash-link" aria-label="Direct link to reconcile_reportreport-executionreport--bool" title="Direct link to reconcile_reportreport-executionreport--bool">​</a></h4>
<p>Reconcile the given execution report.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>report</strong> (<a href="../execution/index.htm#nautilus_trader.execution.reports.ExecutionReport"><em>ExecutionReport</em></a>) – The execution report to check.</li>
<li><strong>Returns:</strong>
True if reconciliation successful, else False.</li>
<li><strong>Return type:</strong>
bool</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="reconcile_mass_statusreport-executionmassstatus--none">reconcile_mass_status(report: <a href="../execution/index.htm#nautilus_trader.execution.reports.ExecutionMassStatus">ExecutionMassStatus</a>) → None<a href="#reconcile_mass_statusreport-executionmassstatus--none" class="hash-link" aria-label="Direct link to reconcile_mass_statusreport-executionmassstatus--none" title="Direct link to reconcile_mass_statusreport-executionmassstatus--none">​</a></h4>
<p>Reconcile the given execution mass status report.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>report</strong> (<a href="../execution/index.htm#nautilus_trader.execution.reports.ExecutionMassStatus"><em>ExecutionMassStatus</em></a>) – The execution mass status report to reconcile.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="check_connectedself--bool-1">check_connected(self) → bool<a href="#check_connectedself--bool-1" class="hash-link" aria-label="Direct link to check_connected(self) → bool" title="Direct link to check_connected(self) → bool">​</a></h4>
<p>Check all of the engines clients are connected.</p>
<ul>
<li><strong>Returns:</strong>
True if all clients connected, else False.</li>
<li><strong>Return type:</strong>
bool</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="check_disconnectedself--bool-1">check_disconnected(self) → bool<a href="#check_disconnectedself--bool-1" class="hash-link" aria-label="Direct link to check_disconnected(self) → bool" title="Direct link to check_disconnected(self) → bool">​</a></h4>
<p>Check all of the engines clients are disconnected.</p>
<ul>
<li><strong>Returns:</strong>
True if all clients disconnected, else False.</li>
<li><strong>Return type:</strong>
bool</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="check_integrityself--bool">check_integrity(self) → bool<a href="#check_integrityself--bool" class="hash-link" aria-label="Direct link to check_integrity(self) → bool" title="Direct link to check_integrity(self) → bool">​</a></h4>
<p>Check integrity of data within the cache and clients.</p>
<ul>
<li><strong>Returns:</strong>
True if checks pass, else False.</li>
<li><strong>Return type:</strong>
bool</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="check_residualsself--bool">check_residuals(self) → bool<a href="#check_residualsself--bool" class="hash-link" aria-label="Direct link to check_residuals(self) → bool" title="Direct link to check_residuals(self) → bool">​</a></h4>
<p>Check for any residual open state and log warnings if found.</p>
<p>‘Open state’ is considered to be open orders and open positions.</p>
<ul>
<li><strong>Returns:</strong>
True if residuals exist, else False.</li>
<li><strong>Return type:</strong>
bool</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="command_count-1">command_count<a href="#command_count-1" class="hash-link" aria-label="Direct link to command_count" title="Direct link to command_count">​</a></h4>
<p>The total count of commands received by the engine.</p>
<ul>
<li><strong>Returns:</strong>
int</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="debug-1">debug<a href="#debug-1" class="hash-link" aria-label="Direct link to debug" title="Direct link to debug">​</a></h4>
<p>If debug mode is active (will provide extra debug logging).</p>
<ul>
<li><strong>Returns:</strong>
bool</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="default_client-1">default_client<a href="#default_client-1" class="hash-link" aria-label="Direct link to default_client" title="Direct link to default_client">​</a></h4>
<p>ClientId | None</p>
<p>Return the default execution client registered with the engine.</p>
<ul>
<li><strong>Return type:</strong>
ClientId or <code>None</code></li>
<li><strong>Type:</strong>
ExecutionEngine.default_client</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="degradeself--void-4">degrade(self) → void<a href="#degradeself--void-4" class="hash-link" aria-label="Direct link to degrade(self) → void" title="Direct link to degrade(self) → void">​</a></h4>
<p>Degrade the component.</p>
<p>While executing on_degrade() any exception will be logged and reraised, then the component
will remain in a <code>DEGRADING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-32">WARNING<a href="#warning-32" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="deregister_clientself-executionclient-client--void">deregister_client(self, ExecutionClient client) → void<a href="#deregister_clientself-executionclient-client--void" class="hash-link" aria-label="Direct link to deregister_client(self, ExecutionClient client) → void" title="Direct link to deregister_client(self, ExecutionClient client) → void">​</a></h4>
<p>Deregister the given execution client from the execution engine.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>client</strong> (<a href="../execution/index.htm#nautilus_trader.execution.client.ExecutionClient"><em>ExecutionClient</em></a>) – The execution client to deregister.</li>
<li><strong>Raises:</strong>
<strong>ValueError</strong> – If client is not registered with the execution engine.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="disposeself--void-4">dispose(self) → void<a href="#disposeself--void-4" class="hash-link" aria-label="Direct link to dispose(self) → void" title="Direct link to dispose(self) → void">​</a></h4>
<p>Dispose of the component.</p>
<p>While executing on_dispose() any exception will be logged and reraised, then the component
will remain in a <code>DISPOSING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-33">WARNING<a href="#warning-33" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="event_count">event_count<a href="#event_count" class="hash-link" aria-label="Direct link to event_count" title="Direct link to event_count">​</a></h4>
<p>The total count of events received by the engine.</p>
<ul>
<li><strong>Returns:</strong>
int</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="faultself--void-4">fault(self) → void<a href="#faultself--void-4" class="hash-link" aria-label="Direct link to fault(self) → void" title="Direct link to fault(self) → void">​</a></h4>
<p>Fault the component.</p>
<p>Calling this method multiple times has the same effect as calling it once (it is idempotent).
Once called, it cannot be reversed, and no other methods should be called on this instance.</p>
<p>While executing on_fault() any exception will be logged and reraised, then the component
will remain in a <code>FAULTING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-34">WARNING<a href="#warning-34" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="flush_dbself--void">flush_db(self) → void<a href="#flush_dbself--void" class="hash-link" aria-label="Direct link to flush_db(self) → void" title="Direct link to flush_db(self) → void">​</a></h4>
<p>Flush the execution database which permanently removes all persisted data.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-35">WARNING<a href="#warning-35" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Permanent data loss.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="classmethod-fully_qualified_namecls--str-4"><em>classmethod</em> fully_qualified_name(cls) → str<a href="#classmethod-fully_qualified_namecls--str-4" class="hash-link" aria-label="Direct link to classmethod-fully_qualified_namecls--str-4" title="Direct link to classmethod-fully_qualified_namecls--str-4">​</a></h4>
<p>Return the fully qualified name for the components class.</p>
<ul>
<li><strong>Return type:</strong>
str</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="get_clients_for_ordersself-list-orders--set">get_clients_for_orders(self, list orders) → set<a href="#get_clients_for_ordersself-list-orders--set" class="hash-link" aria-label="Direct link to get_clients_for_orders(self, list orders) → set" title="Direct link to get_clients_for_orders(self, list orders) → set">​</a></h4>
<p>Get all execution clients corresponding to the given orders.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>orders</strong> (<em>list</em> <em>[</em><a href="../model/orders/index.htm#nautilus_trader.model.orders.Order"><em>Order</em></a> <em>]</em>) – The orders to locate associated execution clients for.</li>
<li><strong>Return type:</strong>
set[<a href="../execution/index.htm#nautilus_trader.execution.client.ExecutionClient">ExecutionClient</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="get_external_order_claimself-instrumentid-instrument_id--strategyid">get_external_order_claim(self, InstrumentId instrument_id) → <a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.StrategyId">StrategyId</a><a href="#get_external_order_claimself-instrumentid-instrument_id--strategyid" class="hash-link" aria-label="Direct link to get_external_order_claimself-instrumentid-instrument_id--strategyid" title="Direct link to get_external_order_claimself-instrumentid-instrument_id--strategyid">​</a></h4>
<p>Get any external order claim for the given instrument ID.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument ID for the claim.</li>
<li><strong>Return type:</strong>
StrategyId or <code>None</code></li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="get_external_order_claims_instrumentsself--set">get_external_order_claims_instruments(self) → set<a href="#get_external_order_claims_instrumentsself--set" class="hash-link" aria-label="Direct link to get_external_order_claims_instruments(self) → set" title="Direct link to get_external_order_claims_instruments(self) → set">​</a></h4>
<p>Get all instrument IDs registered for external order claims.</p>
<ul>
<li><strong>Return type:</strong>
set[<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId">InstrumentId</a>]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="id-4">id<a href="#id-4" class="hash-link" aria-label="Direct link to id" title="Direct link to id">​</a></h4>
<p>The components ID.</p>
<ul>
<li><strong>Returns:</strong>
ComponentId</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_degraded-4">is_degraded<a href="#is_degraded-4" class="hash-link" aria-label="Direct link to is_degraded" title="Direct link to is_degraded">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>DEGRADED</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_degraded</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_disposed-4">is_disposed<a href="#is_disposed-4" class="hash-link" aria-label="Direct link to is_disposed" title="Direct link to is_disposed">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>DISPOSED</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_disposed</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_faulted-4">is_faulted<a href="#is_faulted-4" class="hash-link" aria-label="Direct link to is_faulted" title="Direct link to is_faulted">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>FAULTED</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_faulted</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_initialized-4">is_initialized<a href="#is_initialized-4" class="hash-link" aria-label="Direct link to is_initialized" title="Direct link to is_initialized">​</a></h4>
<p>bool</p>
<p>Return whether the component has been initialized (component.state &gt;= <code>INITIALIZED</code>).</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_initialized</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_running-4">is_running<a href="#is_running-4" class="hash-link" aria-label="Direct link to is_running" title="Direct link to is_running">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>RUNNING</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_running</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_stopped-4">is_stopped<a href="#is_stopped-4" class="hash-link" aria-label="Direct link to is_stopped" title="Direct link to is_stopped">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>STOPPED</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_stopped</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="load_cacheself--void">load_cache(self) → void<a href="#load_cacheself--void" class="hash-link" aria-label="Direct link to load_cache(self) → void" title="Direct link to load_cache(self) → void">​</a></h4>
<p>Load the cache up from the execution database.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="manage_own_order_books">manage_own_order_books<a href="#manage_own_order_books" class="hash-link" aria-label="Direct link to manage_own_order_books" title="Direct link to manage_own_order_books">​</a></h4>
<p>If the execution engine should maintain own order books based on commands and events.</p>
<ul>
<li><strong>Returns:</strong>
bool</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="position_id_countself-strategyid-strategy_id--int">position_id_count(self, StrategyId strategy_id) → int<a href="#position_id_countself-strategyid-strategy_id--int" class="hash-link" aria-label="Direct link to position_id_count(self, StrategyId strategy_id) → int" title="Direct link to position_id_count(self, StrategyId strategy_id) → int">​</a></h4>
<p>The position ID count for the given strategy ID.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>strategy_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.StrategyId"><em>StrategyId</em></a>) – The strategy ID for the position count.</li>
<li><strong>Return type:</strong>
int</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="register_clientself-executionclient-client--void">register_client(self, ExecutionClient client) → void<a href="#register_clientself-executionclient-client--void" class="hash-link" aria-label="Direct link to register_client(self, ExecutionClient client) → void" title="Direct link to register_client(self, ExecutionClient client) → void">​</a></h4>
<p>Register the given execution client with the execution engine.</p>
<p>If the client.venue is <code>None</code> and a default routing client has not
been previously registered then will be registered as such.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>client</strong> (<a href="../execution/index.htm#nautilus_trader.execution.client.ExecutionClient"><em>ExecutionClient</em></a>) – The execution client to register.</li>
<li><strong>Raises:</strong>
<strong>ValueError</strong> – If client is already registered with the execution engine.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="register_default_clientself-executionclient-client--void">register_default_client(self, ExecutionClient client) → void<a href="#register_default_clientself-executionclient-client--void" class="hash-link" aria-label="Direct link to register_default_client(self, ExecutionClient client) → void" title="Direct link to register_default_client(self, ExecutionClient client) → void">​</a></h4>
<p>Register the given client as the default routing client (when a specific
venue routing cannot be found).</p>
<p>Any existing default routing client will be overwritten.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>client</strong> (<a href="../execution/index.htm#nautilus_trader.execution.client.ExecutionClient"><em>ExecutionClient</em></a>) – The client to register.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="register_external_order_claimsself-strategy-strategy--void">register_external_order_claims(self, Strategy strategy) → void<a href="#register_external_order_claimsself-strategy-strategy--void" class="hash-link" aria-label="Direct link to register_external_order_claims(self, Strategy strategy) → void" title="Direct link to register_external_order_claims(self, Strategy strategy) → void">​</a></h4>
<p>Register the given strategies external order claim instrument IDs (if any)</p>
<ul>
<li><strong>Parameters:</strong>
<strong>strategy</strong> (<a href="../trading/index.htm#nautilus_trader.trading.Strategy"><em>Strategy</em></a>) – The strategy for the registration.</li>
<li><strong>Raises:</strong>
<a href="../config/index.htm#nautilus_trader.common.config.InvalidConfiguration"><strong>InvalidConfiguration</strong></a> – If a strategy is already registered to claim external orders for an instrument ID.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="register_oms_typeself-strategy-strategy--void">register_oms_type(self, Strategy strategy) → void<a href="#register_oms_typeself-strategy-strategy--void" class="hash-link" aria-label="Direct link to register_oms_type(self, Strategy strategy) → void" title="Direct link to register_oms_type(self, Strategy strategy) → void">​</a></h4>
<p>Register the given trading strategies OMS (Order Management System) type.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>strategy</strong> (<a href="../trading/index.htm#nautilus_trader.trading.Strategy"><em>Strategy</em></a>) – The strategy for the registration.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="register_venue_routingself-executionclient-client-venue-venue--void">register_venue_routing(self, ExecutionClient client, Venue venue) → void<a href="#register_venue_routingself-executionclient-client-venue-venue--void" class="hash-link" aria-label="Direct link to register_venue_routing(self, ExecutionClient client, Venue venue) → void" title="Direct link to register_venue_routing(self, ExecutionClient client, Venue venue) → void">​</a></h4>
<p>Register the given client to route orders to the given venue.</p>
<p>Any existing client in the routing map for the given venue will be
overwritten.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>venue</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.Venue"><em>Venue</em></a>) – The venue to route orders to.</li>
<li><strong>client</strong> (<a href="../execution/index.htm#nautilus_trader.execution.client.ExecutionClient"><em>ExecutionClient</em></a>) – The client for the venue routing.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="registered_clients-1">registered_clients<a href="#registered_clients-1" class="hash-link" aria-label="Direct link to registered_clients" title="Direct link to registered_clients">​</a></h4>
<p>list[ClientId]</p>
<p>Return the execution clients registered with the engine.</p>
<ul>
<li><strong>Return type:</strong>
list[<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.ClientId">ClientId</a>]</li>
<li><strong>Type:</strong>
ExecutionEngine.registered_clients</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="report_count">report_count<a href="#report_count" class="hash-link" aria-label="Direct link to report_count" title="Direct link to report_count">​</a></h4>
<p>‘int’</p>
<p>The total count of reports received by the engine.</p>
<ul>
<li><strong>Returns:</strong>
int</li>
<li><strong>Type:</strong>
report_count</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="resetself--void-4">reset(self) → void<a href="#resetself--void-4" class="hash-link" aria-label="Direct link to reset(self) → void" title="Direct link to reset(self) → void">​</a></h4>
<p>Reset the component.</p>
<p>All stateful fields are reset to their initial value.</p>
<p>While executing on_reset() any exception will be logged and reraised, then the component
will remain in a <code>RESETTING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-36">WARNING<a href="#warning-36" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="resumeself--void-4">resume(self) → void<a href="#resumeself--void-4" class="hash-link" aria-label="Direct link to resume(self) → void" title="Direct link to resume(self) → void">​</a></h4>
<p>Resume the component.</p>
<p>While executing on_resume() any exception will be logged and reraised, then the component
will remain in a <code>RESUMING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-37">WARNING<a href="#warning-37" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="set_manage_own_order_booksself-bool-value--void">set_manage_own_order_books(self, bool value) → void<a href="#set_manage_own_order_booksself-bool-value--void" class="hash-link" aria-label="Direct link to set_manage_own_order_books(self, bool value) → void" title="Direct link to set_manage_own_order_books(self, bool value) → void">​</a></h4>
<p>Set the manage_own_order_books setting with the given value.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>value</strong> (<em>bool</em>) – The value to set.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="shutdown_systemself-str-reasonnone--void-4">shutdown_system(self, str reason=None) → void<a href="#shutdown_systemself-str-reasonnone--void-4" class="hash-link" aria-label="Direct link to shutdown_system(self, str reason=None) → void" title="Direct link to shutdown_system(self, str reason=None) → void">​</a></h4>
<p>Initiate a system-wide shutdown by generating and publishing a ShutdownSystem command.</p>
<p>The command is handled by the system’s NautilusKernel, which will invoke either stop (synchronously)
or stop_async (asynchronously) depending on the execution context and the presence of an active event loop.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>reason</strong> (<em>str</em> <em>,</em> <em>optional</em>) – The reason for issuing the shutdown command.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="snapshot_orders">snapshot_orders<a href="#snapshot_orders" class="hash-link" aria-label="Direct link to snapshot_orders" title="Direct link to snapshot_orders">​</a></h4>
<p>If order state snapshots should be persisted.</p>
<ul>
<li><strong>Returns:</strong>
bool</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="snapshot_positions">snapshot_positions<a href="#snapshot_positions" class="hash-link" aria-label="Direct link to snapshot_positions" title="Direct link to snapshot_positions">​</a></h4>
<p>If position state snapshots should be persisted.</p>
<ul>
<li><strong>Returns:</strong>
bool</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="snapshot_positions_interval_secs">snapshot_positions_interval_secs<a href="#snapshot_positions_interval_secs" class="hash-link" aria-label="Direct link to snapshot_positions_interval_secs" title="Direct link to snapshot_positions_interval_secs">​</a></h4>
<p>The interval (seconds) at which additional position state snapshots are persisted.</p>
<ul>
<li><strong>Returns:</strong>
double</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="snapshot_positions_timer_name">snapshot_positions_timer_name<a href="#snapshot_positions_timer_name" class="hash-link" aria-label="Direct link to snapshot_positions_timer_name" title="Direct link to snapshot_positions_timer_name">​</a></h4>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="startself--void-4">start(self) → void<a href="#startself--void-4" class="hash-link" aria-label="Direct link to start(self) → void" title="Direct link to start(self) → void">​</a></h4>
<p>Start the component.</p>
<p>While executing on_start() any exception will be logged and reraised, then the component
will remain in a <code>STARTING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-38">WARNING<a href="#warning-38" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="state-4">state<a href="#state-4" class="hash-link" aria-label="Direct link to state" title="Direct link to state">​</a></h4>
<p>ComponentState</p>
<p>Return the components current state.</p>
<ul>
<li><strong>Return type:</strong>
ComponentState</li>
<li><strong>Type:</strong>
Component.state</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="stopself--void-4">stop(self) → void<a href="#stopself--void-4" class="hash-link" aria-label="Direct link to stop(self) → void" title="Direct link to stop(self) → void">​</a></h4>
<p>Stop the component.</p>
<p>While executing on_stop() any exception will be logged and reraised, then the component
will remain in a <code>STOPPING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-39">WARNING<a href="#warning-39" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="stop_clientsself--void-1">stop_clients(self) → void<a href="#stop_clientsself--void-1" class="hash-link" aria-label="Direct link to stop_clients(self) → void" title="Direct link to stop_clients(self) → void">​</a></h4>
<p>Stop the registered clients.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="trader_id-4">trader_id<a href="#trader_id-4" class="hash-link" aria-label="Direct link to trader_id" title="Direct link to trader_id">​</a></h4>
<p>The trader ID associated with the component.</p>
<ul>
<li><strong>Returns:</strong>
TraderId</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="type-4">type<a href="#type-4" class="hash-link" aria-label="Direct link to type" title="Direct link to type">​</a></h4>
<p>The components type.</p>
<ul>
<li><strong>Returns:</strong>
type</li>
</ul>
<p><a id="module-nautilus_trader.live.risk_engine"></a></p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="class-liveriskengine"><em>class</em> LiveRiskEngine<a href="#class-liveriskengine" class="hash-link" aria-label="Direct link to class-liveriskengine" title="Direct link to class-liveriskengine">​</a></h3>
<p>Bases: <a href="../risk/index.htm#nautilus_trader.risk.engine.RiskEngine"><code>RiskEngine</code></a></p>
<p>Provides a high-performance asynchronous live risk engine.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>loop</strong> (<em>asyncio.AbstractEventLoop</em>) – The event loop for the engine.</li>
<li><strong>portfolio</strong> (<a href="../portfolio/index.htm#nautilus_trader.portfolio.PortfolioFacade"><em>PortfolioFacade</em></a>) – The portfolio for the engine.</li>
<li><strong>msgbus</strong> (<a href="../common/index.htm#nautilus_trader.common.component.MessageBus"><em>MessageBus</em></a>) – The message bus for the engine.</li>
<li><strong>cache</strong> (<a href="../cache/index.htm#nautilus_trader.cache.base.CacheFacade"><em>CacheFacade</em></a>) – The read-only cache for the engine.</li>
<li><strong>clock</strong> (<a href="../common/index.htm#nautilus_trader.common.component.LiveClock"><em>LiveClock</em></a>) – The clock for the engine.</li>
<li><strong>config</strong> (<a href="../config/index.htm#nautilus_trader.live.config.LiveRiskEngineConfig"><em>LiveRiskEngineConfig</em></a>) – The configuration for the instance.</li>
</ul>
</li>
<li><strong>Raises:</strong>
<strong>TypeError</strong> – If config is not of type LiveRiskEngineConfig.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="get_cmd_queue_task--task--none-2">get_cmd_queue_task() → Task | None<a href="#get_cmd_queue_task--task--none-2" class="hash-link" aria-label="Direct link to get_cmd_queue_task() → Task | None" title="Direct link to get_cmd_queue_task() → Task | None">​</a></h4>
<p>Return the internal command queue task for the engine.</p>
<ul>
<li><strong>Return type:</strong>
asyncio.Task or <code>None</code></li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="get_evt_queue_task--task--none-1">get_evt_queue_task() → Task | None<a href="#get_evt_queue_task--task--none-1" class="hash-link" aria-label="Direct link to get_evt_queue_task() → Task | None" title="Direct link to get_evt_queue_task() → Task | None">​</a></h4>
<p>Return the internal event queue task for the engine.</p>
<ul>
<li><strong>Return type:</strong>
asyncio.Task or <code>None</code></li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="cmd_qsize--int-2">cmd_qsize() → int<a href="#cmd_qsize--int-2" class="hash-link" aria-label="Direct link to cmd_qsize() → int" title="Direct link to cmd_qsize() → int">​</a></h4>
<p>Return the number of Command messages buffered on the internal queue.</p>
<ul>
<li><strong>Return type:</strong>
int</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="evt_qsize--int-1">evt_qsize() → int<a href="#evt_qsize--int-1" class="hash-link" aria-label="Direct link to evt_qsize() → int" title="Direct link to evt_qsize() → int">​</a></h4>
<p>Return the number of Event messages buffered on the internal queue.</p>
<ul>
<li><strong>Return type:</strong>
int</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="kill--none-2">kill() → None<a href="#kill--none-2" class="hash-link" aria-label="Direct link to kill() → None" title="Direct link to kill() → None">​</a></h4>
<p>Kill the engine by abruptly canceling the queue task and calling stop.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="executecommand-command--none">execute(command: <a href="../core/index.htm#nautilus_trader.core.message.Command">Command</a>) → None<a href="#executecommand-command--none" class="hash-link" aria-label="Direct link to executecommand-command--none" title="Direct link to executecommand-command--none">​</a></h4>
<p>Execute the given command.</p>
<p>If the internal queue is at or near capacity, it logs a warning (throttled)
and schedules an asynchronous put() operation. This ensures all messages are
eventually enqueued and processed without blocking the caller when the queue is full.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>command</strong> (<a href="../core/index.htm#nautilus_trader.core.Command"><em>Command</em></a>) – The command to execute.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-40">WARNING<a href="#warning-40" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>This method is not thread-safe and should only be called from the same thread the event
loop is running on. Calling it from a different thread may lead to unexpected behavior.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="processevent-event--none">process(event: <a href="../core/index.htm#nautilus_trader.core.message.Event">Event</a>) → None<a href="#processevent-event--none" class="hash-link" aria-label="Direct link to processevent-event--none" title="Direct link to processevent-event--none">​</a></h4>
<p>Process the given event.</p>
<p>If the internal queue is at or near capacity, it logs a warning (throttled)
and schedules an asynchronous put() operation. This ensures all messages are
eventually enqueued and processed without blocking the caller when the queue is full.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>event</strong> (<a href="../core/index.htm#nautilus_trader.core.Event"><em>Event</em></a>) – The event to process.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="command_count-2">command_count<a href="#command_count-2" class="hash-link" aria-label="Direct link to command_count" title="Direct link to command_count">​</a></h4>
<p>The total count of commands received by the engine.</p>
<ul>
<li><strong>Returns:</strong>
int</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="debug-2">debug<a href="#debug-2" class="hash-link" aria-label="Direct link to debug" title="Direct link to debug">​</a></h4>
<p>If debug mode is active (will provide extra debug logging).</p>
<ul>
<li><strong>Returns:</strong>
bool</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="degradeself--void-5">degrade(self) → void<a href="#degradeself--void-5" class="hash-link" aria-label="Direct link to degrade(self) → void" title="Direct link to degrade(self) → void">​</a></h4>
<p>Degrade the component.</p>
<p>While executing on_degrade() any exception will be logged and reraised, then the component
will remain in a <code>DEGRADING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-41">WARNING<a href="#warning-41" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="disposeself--void-5">dispose(self) → void<a href="#disposeself--void-5" class="hash-link" aria-label="Direct link to dispose(self) → void" title="Direct link to dispose(self) → void">​</a></h4>
<p>Dispose of the component.</p>
<p>While executing on_dispose() any exception will be logged and reraised, then the component
will remain in a <code>DISPOSING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-42">WARNING<a href="#warning-42" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="event_count-1">event_count<a href="#event_count-1" class="hash-link" aria-label="Direct link to event_count" title="Direct link to event_count">​</a></h4>
<p>The total count of events received by the engine.</p>
<ul>
<li><strong>Returns:</strong>
int</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="faultself--void-5">fault(self) → void<a href="#faultself--void-5" class="hash-link" aria-label="Direct link to fault(self) → void" title="Direct link to fault(self) → void">​</a></h4>
<p>Fault the component.</p>
<p>Calling this method multiple times has the same effect as calling it once (it is idempotent).
Once called, it cannot be reversed, and no other methods should be called on this instance.</p>
<p>While executing on_fault() any exception will be logged and reraised, then the component
will remain in a <code>FAULTING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-43">WARNING<a href="#warning-43" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="classmethod-fully_qualified_namecls--str-5"><em>classmethod</em> fully_qualified_name(cls) → str<a href="#classmethod-fully_qualified_namecls--str-5" class="hash-link" aria-label="Direct link to classmethod-fully_qualified_namecls--str-5" title="Direct link to classmethod-fully_qualified_namecls--str-5">​</a></h4>
<p>Return the fully qualified name for the components class.</p>
<ul>
<li><strong>Return type:</strong>
str</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="id-5">id<a href="#id-5" class="hash-link" aria-label="Direct link to id" title="Direct link to id">​</a></h4>
<p>The components ID.</p>
<ul>
<li><strong>Returns:</strong>
ComponentId</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_bypassed">is_bypassed<a href="#is_bypassed" class="hash-link" aria-label="Direct link to is_bypassed" title="Direct link to is_bypassed">​</a></h4>
<p>If the risk engine is completely bypassed.</p>
<ul>
<li><strong>Returns:</strong>
bool</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_degraded-5">is_degraded<a href="#is_degraded-5" class="hash-link" aria-label="Direct link to is_degraded" title="Direct link to is_degraded">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>DEGRADED</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_degraded</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_disposed-5">is_disposed<a href="#is_disposed-5" class="hash-link" aria-label="Direct link to is_disposed" title="Direct link to is_disposed">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>DISPOSED</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_disposed</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_faulted-5">is_faulted<a href="#is_faulted-5" class="hash-link" aria-label="Direct link to is_faulted" title="Direct link to is_faulted">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>FAULTED</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_faulted</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_initialized-5">is_initialized<a href="#is_initialized-5" class="hash-link" aria-label="Direct link to is_initialized" title="Direct link to is_initialized">​</a></h4>
<p>bool</p>
<p>Return whether the component has been initialized (component.state &gt;= <code>INITIALIZED</code>).</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_initialized</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_running-5">is_running<a href="#is_running-5" class="hash-link" aria-label="Direct link to is_running" title="Direct link to is_running">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>RUNNING</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_running</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_stopped-5">is_stopped<a href="#is_stopped-5" class="hash-link" aria-label="Direct link to is_stopped" title="Direct link to is_stopped">​</a></h4>
<p>bool</p>
<p>Return whether the current component state is <code>STOPPED</code>.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
<li><strong>Type:</strong>
Component.is_stopped</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="max_notional_per_orderself-instrumentid-instrument_id">max_notional_per_order(self, InstrumentId instrument_id)<a href="#max_notional_per_orderself-instrumentid-instrument_id" class="hash-link" aria-label="Direct link to max_notional_per_order(self, InstrumentId instrument_id)" title="Direct link to max_notional_per_order(self, InstrumentId instrument_id)">​</a></h4>
<p>Return the current maximum notional per order for the given instrument ID.</p>
<ul>
<li><strong>Return type:</strong>
Decimal or <code>None</code></li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="max_notionals_per_orderself--dict">max_notionals_per_order(self) → dict<a href="#max_notionals_per_orderself--dict" class="hash-link" aria-label="Direct link to max_notionals_per_order(self) → dict" title="Direct link to max_notionals_per_order(self) → dict">​</a></h4>
<p>Return the current maximum notionals per order settings.</p>
<ul>
<li><strong>Return type:</strong>
dict[<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId">InstrumentId</a>, Decimal]</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="max_order_modify_rateself--tuple">max_order_modify_rate(self) → tuple<a href="#max_order_modify_rateself--tuple" class="hash-link" aria-label="Direct link to max_order_modify_rate(self) → tuple" title="Direct link to max_order_modify_rate(self) → tuple">​</a></h4>
<p>Return the current maximum order modify rate limit setting.</p>
<ul>
<li><strong>Returns:</strong>
The limit per timedelta interval.</li>
<li><strong>Return type:</strong>
(int, timedelta)</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="max_order_submit_rateself--tuple">max_order_submit_rate(self) → tuple<a href="#max_order_submit_rateself--tuple" class="hash-link" aria-label="Direct link to max_order_submit_rate(self) → tuple" title="Direct link to max_order_submit_rate(self) → tuple">​</a></h4>
<p>Return the current maximum order submit rate limit setting.</p>
<ul>
<li><strong>Returns:</strong>
The limit per timedelta interval.</li>
<li><strong>Return type:</strong>
(int, timedelta)</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="resetself--void-5">reset(self) → void<a href="#resetself--void-5" class="hash-link" aria-label="Direct link to reset(self) → void" title="Direct link to reset(self) → void">​</a></h4>
<p>Reset the component.</p>
<p>All stateful fields are reset to their initial value.</p>
<p>While executing on_reset() any exception will be logged and reraised, then the component
will remain in a <code>RESETTING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-44">WARNING<a href="#warning-44" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="resumeself--void-5">resume(self) → void<a href="#resumeself--void-5" class="hash-link" aria-label="Direct link to resume(self) → void" title="Direct link to resume(self) → void">​</a></h4>
<p>Resume the component.</p>
<p>While executing on_resume() any exception will be logged and reraised, then the component
will remain in a <code>RESUMING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-45">WARNING<a href="#warning-45" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="set_max_notional_per_orderself-instrumentid-instrument_id-new_value--void">set_max_notional_per_order(self, InstrumentId instrument_id, new_value) → void<a href="#set_max_notional_per_orderself-instrumentid-instrument_id-new_value--void" class="hash-link" aria-label="Direct link to set_max_notional_per_order(self, InstrumentId instrument_id, new_value) → void" title="Direct link to set_max_notional_per_order(self, InstrumentId instrument_id, new_value) → void">​</a></h4>
<p>Set the maximum notional value per order for the given instrument ID.</p>
<p>Passing a new_value of <code>None</code> will disable the pre-trade risk max
notional check.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>instrument_id</strong> (<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.InstrumentId"><em>InstrumentId</em></a>) – The instrument ID for the max notional.</li>
<li><strong>new_value</strong> (<em>integer</em> <em>,</em> <em>float</em> <em>,</em> <em>string</em> <em>or</em> <em>Decimal</em>) – The max notional value to set.</li>
</ul>
</li>
<li><strong>Raises:</strong>
<ul>
<li><strong>decimal.InvalidOperation</strong> – If new_value not a valid input for decimal.Decimal.</li>
<li><strong>ValueError</strong> – If new_value is not <code>None</code> and not positive.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="set_trading_stateself-tradingstate-state--void">set_trading_state(self, TradingState state) → void<a href="#set_trading_stateself-tradingstate-state--void" class="hash-link" aria-label="Direct link to set_trading_state(self, TradingState state) → void" title="Direct link to set_trading_state(self, TradingState state) → void">​</a></h4>
<p>Set the trading state for the engine.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>state</strong> (<em>TradingState</em>) – The state to set.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="shutdown_systemself-str-reasonnone--void-5">shutdown_system(self, str reason=None) → void<a href="#shutdown_systemself-str-reasonnone--void-5" class="hash-link" aria-label="Direct link to shutdown_system(self, str reason=None) → void" title="Direct link to shutdown_system(self, str reason=None) → void">​</a></h4>
<p>Initiate a system-wide shutdown by generating and publishing a ShutdownSystem command.</p>
<p>The command is handled by the system’s NautilusKernel, which will invoke either stop (synchronously)
or stop_async (asynchronously) depending on the execution context and the presence of an active event loop.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>reason</strong> (<em>str</em> <em>,</em> <em>optional</em>) – The reason for issuing the shutdown command.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="startself--void-5">start(self) → void<a href="#startself--void-5" class="hash-link" aria-label="Direct link to start(self) → void" title="Direct link to start(self) → void">​</a></h4>
<p>Start the component.</p>
<p>While executing on_start() any exception will be logged and reraised, then the component
will remain in a <code>STARTING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-46">WARNING<a href="#warning-46" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="state-5">state<a href="#state-5" class="hash-link" aria-label="Direct link to state" title="Direct link to state">​</a></h4>
<p>ComponentState</p>
<p>Return the components current state.</p>
<ul>
<li><strong>Return type:</strong>
ComponentState</li>
<li><strong>Type:</strong>
Component.state</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="stopself--void-5">stop(self) → void<a href="#stopself--void-5" class="hash-link" aria-label="Direct link to stop(self) → void" title="Direct link to stop(self) → void">​</a></h4>
<p>Stop the component.</p>
<p>While executing on_stop() any exception will be logged and reraised, then the component
will remain in a <code>STOPPING</code> state.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="warning-47">WARNING<a href="#warning-47" class="hash-link" aria-label="Direct link to WARNING" title="Direct link to WARNING">​</a></h4>
<p>Do not override.</p>
<p>If the component is not in a valid state from which to execute this method,
then the component state will not change, and an error will be logged.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="trader_id-5">trader_id<a href="#trader_id-5" class="hash-link" aria-label="Direct link to trader_id" title="Direct link to trader_id">​</a></h4>
<p>The trader ID associated with the component.</p>
<ul>
<li><strong>Returns:</strong>
TraderId</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="trading_state">trading_state<a href="#trading_state" class="hash-link" aria-label="Direct link to trading_state" title="Direct link to trading_state">​</a></h4>
<p>The current trading state for the engine.</p>
<ul>
<li><strong>Returns:</strong>
TradingState</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="type-5">type<a href="#type-5" class="hash-link" aria-label="Direct link to type" title="Direct link to type">​</a></h4>
<p>The components type.</p>
<ul>
<li><strong>Returns:</strong>
type</li>
</ul>
<p><a id="module-nautilus_trader.live.node"></a></p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="class-tradingnode"><em>class</em> TradingNode<a href="#class-tradingnode" class="hash-link" aria-label="Direct link to class-tradingnode" title="Direct link to class-tradingnode">​</a></h3>
<p>Bases: <code>object</code></p>
<p>Provides an asynchronous network node for live trading.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>config</strong> (<a href="../config/index.htm#nautilus_trader.live.config.TradingNodeConfig"><em>TradingNodeConfig</em></a> <em>,</em> <em>optional</em>) – The configuration for the instance.</li>
<li><strong>loop</strong> (<em>asyncio.AbstractEventLoop</em> <em>,</em> <em>optional</em>) – The event loop for the node.
If <code>None</code> then will get the running event loop internally.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="property-trader_id--traderid"><em>property</em> trader_id <em>: <a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.TraderId">TraderId</a></em><a href="#property-trader_id--traderid" class="hash-link" aria-label="Direct link to property-trader_id--traderid" title="Direct link to property-trader_id--traderid">​</a></h4>
<p>Return the nodes trader ID.</p>
<ul>
<li><strong>Return type:</strong>
<a href="../model/identifiers/index.htm#nautilus_trader.model.identifiers.TraderId">TraderId</a></li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="property-machine_id--str"><em>property</em> machine_id <em>: str</em><a href="#property-machine_id--str" class="hash-link" aria-label="Direct link to property-machine_id--str" title="Direct link to property-machine_id--str">​</a></h4>
<p>Return the nodes machine ID.</p>
<ul>
<li><strong>Return type:</strong>
str</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="property-instance_id--uuid4"><em>property</em> instance_id <em>: <a href="../core/index.htm#nautilus_trader.core.uuid.UUID4">UUID4</a></em><a href="#property-instance_id--uuid4" class="hash-link" aria-label="Direct link to property-instance_id--uuid4" title="Direct link to property-instance_id--uuid4">​</a></h4>
<p>Return the nodes instance ID.</p>
<ul>
<li><strong>Return type:</strong>
<a href="../core/index.htm#nautilus_trader.core.UUID4">UUID4</a></li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="property-trader--trader"><em>property</em> trader <em>: <a href="../trading/index.htm#nautilus_trader.trading.trader.Trader">Trader</a></em><a href="#property-trader--trader" class="hash-link" aria-label="Direct link to property-trader--trader" title="Direct link to property-trader--trader">​</a></h4>
<p>Return the nodes internal trader.</p>
<ul>
<li><strong>Return type:</strong>
<a href="../trading/index.htm#nautilus_trader.trading.Trader">Trader</a></li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="property-cache--cachefacade"><em>property</em> cache <em>: <a href="../cache/index.htm#nautilus_trader.cache.base.CacheFacade">CacheFacade</a></em><a href="#property-cache--cachefacade" class="hash-link" aria-label="Direct link to property-cache--cachefacade" title="Direct link to property-cache--cachefacade">​</a></h4>
<p>Return the nodes internal read-only cache.</p>
<ul>
<li><strong>Return type:</strong>
<a href="../cache/index.htm#nautilus_trader.cache.base.CacheFacade">CacheFacade</a></li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="property-portfolio--portfoliofacade"><em>property</em> portfolio <em>: <a href="../portfolio/index.htm#nautilus_trader.portfolio.base.PortfolioFacade">PortfolioFacade</a></em><a href="#property-portfolio--portfoliofacade" class="hash-link" aria-label="Direct link to property-portfolio--portfoliofacade" title="Direct link to property-portfolio--portfoliofacade">​</a></h4>
<p>Return the nodes internal read-only portfolio.</p>
<ul>
<li><strong>Return type:</strong>
<a href="../portfolio/index.htm#nautilus_trader.portfolio.PortfolioFacade">PortfolioFacade</a></li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_running--bool">is_running() → bool<a href="#is_running--bool" class="hash-link" aria-label="Direct link to is_running() → bool" title="Direct link to is_running() → bool">​</a></h4>
<p>Return whether the trading node is running.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="is_built--bool">is_built() → bool<a href="#is_built--bool" class="hash-link" aria-label="Direct link to is_built() → bool" title="Direct link to is_built() → bool">​</a></h4>
<p>Return whether the trading node clients are built.</p>
<ul>
<li><strong>Return type:</strong>
bool</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="get_event_loop--abstracteventloop--none">get_event_loop() → AbstractEventLoop | None<a href="#get_event_loop--abstracteventloop--none" class="hash-link" aria-label="Direct link to get_event_loop() → AbstractEventLoop | None" title="Direct link to get_event_loop() → AbstractEventLoop | None">​</a></h4>
<p>Return the event loop of the trading node.</p>
<ul>
<li><strong>Return type:</strong>
asyncio.AbstractEventLoop or <code>None</code></li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="get_logger--logger">get_logger() → <a href="../common/index.htm#nautilus_trader.common.component.Logger">Logger</a><a href="#get_logger--logger" class="hash-link" aria-label="Direct link to get_logger--logger" title="Direct link to get_logger--logger">​</a></h4>
<p>Return the logger for the trading node.</p>
<ul>
<li><strong>Return type:</strong>
<a href="../common/index.htm#nautilus_trader.common.component.Logger">Logger</a></li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="add_data_client_factoryname-str-factory-typelivedataclientfactory--none">add_data_client_factory(name: str, factory: type[LiveDataClientFactory]) → None<a href="#add_data_client_factoryname-str-factory-typelivedataclientfactory--none" class="hash-link" aria-label="Direct link to add_data_client_factory(name: str, factory: type[LiveDataClientFactory]) → None" title="Direct link to add_data_client_factory(name: str, factory: type[LiveDataClientFactory]) → None">​</a></h4>
<p>Add the given data client factory to the node.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>name</strong> (<em>str</em>) – The name of the client factory.</li>
<li><strong>factory</strong> (<em>type</em> *[*<em>LiveDataClientFactory</em> <em>]</em>) – The factory class to add.</li>
</ul>
</li>
<li><strong>Raises:</strong>
<ul>
<li><strong>ValueError</strong> – If name is not a valid string.</li>
<li><strong>KeyError</strong> – If name has already been added.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="add_exec_client_factoryname-str-factory-typeliveexecclientfactory--none">add_exec_client_factory(name: str, factory: type[LiveExecClientFactory]) → None<a href="#add_exec_client_factoryname-str-factory-typeliveexecclientfactory--none" class="hash-link" aria-label="Direct link to add_exec_client_factory(name: str, factory: type[LiveExecClientFactory]) → None" title="Direct link to add_exec_client_factory(name: str, factory: type[LiveExecClientFactory]) → None">​</a></h4>
<p>Add the given execution client factory to the node.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>name</strong> (<em>str</em>) – The name of the client factory.</li>
<li><strong>factory</strong> (<em>type</em> *[*<em>LiveExecutionClientFactory</em> <em>]</em>) – The factory class to add.</li>
</ul>
</li>
<li><strong>Raises:</strong>
<ul>
<li><strong>ValueError</strong> – If name is not a valid string.</li>
<li><strong>KeyError</strong> – If name has already been added.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="build--none">build() → None<a href="#build--none" class="hash-link" aria-label="Direct link to build() → None" title="Direct link to build() → None">​</a></h4>
<p>Build the nodes clients.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="runraise_exception-bool--false--none">run(raise_exception: bool = False) → None<a href="#runraise_exception-bool--false--none" class="hash-link" aria-label="Direct link to run(raise_exception: bool = False) → None" title="Direct link to run(raise_exception: bool = False) → None">​</a></h4>
<p>Start and run the trading node.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>raise_exception</strong> (<em>bool</em> <em>,</em> <em>default False</em>) – If runtime exceptions should be re-raised as well as being logged.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="publish_bus_messagebus_msg-busmessage--none">publish_bus_message(bus_msg: BusMessage) → None<a href="#publish_bus_messagebus_msg-busmessage--none" class="hash-link" aria-label="Direct link to publish_bus_message(bus_msg: BusMessage) → None" title="Direct link to publish_bus_message(bus_msg: BusMessage) → None">​</a></h4>
<p>Publish bus message on the internal message bus.</p>
<p>Note the message will not be published externally.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>bus_msg</strong> (<em>nautilus_pyo3.BusMessage</em>) – The bus message to publish.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="async-run_async--none"><em>async</em> run_async() → None<a href="#async-run_async--none" class="hash-link" aria-label="Direct link to async-run_async--none" title="Direct link to async-run_async--none">​</a></h4>
<p>Start and run the trading node asynchronously.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="stop--none">stop() → None<a href="#stop--none" class="hash-link" aria-label="Direct link to stop() → None" title="Direct link to stop() → None">​</a></h4>
<p>Stop the trading node gracefully.</p>
<p>After a specified delay the internal Trader residual state will be checked.</p>
<p>If save strategy is configured, then strategy states will be saved.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="async-stop_async--none"><em>async</em> stop_async() → None<a href="#async-stop_async--none" class="hash-link" aria-label="Direct link to async-stop_async--none" title="Direct link to async-stop_async--none">​</a></h4>
<p>Stop the trading node gracefully, asynchronously.</p>
<p>After a specified delay the internal Trader residual state will be checked.</p>
<p>If save strategy is configured, then strategy states will be saved.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="dispose--none">dispose() → None<a href="#dispose--none" class="hash-link" aria-label="Direct link to dispose() → None" title="Direct link to dispose() → None">​</a></h4>
<p>Dispose of the trading node.</p>
<p>Gracefully shuts down the executor and event loop.</p>
<p><a id="module-nautilus_trader.live.node_builder"></a></p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="class-tradingnodebuilder"><em>class</em> TradingNodeBuilder<a href="#class-tradingnodebuilder" class="hash-link" aria-label="Direct link to class-tradingnodebuilder" title="Direct link to class-tradingnodebuilder">​</a></h3>
<p>Bases: <code>object</code></p>
<p>Provides building services for a trading node.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>loop</strong> (<em>asyncio.AbstractEventLoop</em>) – The event loop for the clients.</li>
<li><strong>data_engine</strong> (<a href="#nautilus_trader.live.data_engine.LiveDataEngine"><em>LiveDataEngine</em></a>) – The data engine for the trading node.</li>
<li><strong>exec_engine</strong> (<a href="#nautilus_trader.live.execution_engine.LiveExecutionEngine"><em>LiveExecutionEngine</em></a>) – The execution engine for the trading node.</li>
<li><strong>portfolio</strong> (<a href="../portfolio/index.htm#nautilus_trader.portfolio.Portfolio"><em>Portfolio</em></a>) – The portfolio for the trading node.</li>
<li><strong>msgbus</strong> (<a href="../common/index.htm#nautilus_trader.common.component.MessageBus"><em>MessageBus</em></a>) – The message bus for the trading node.</li>
<li><strong>cache</strong> (<a href="../cache/index.htm#nautilus_trader.cache.Cache"><em>Cache</em></a>) – The cache for building clients.</li>
<li><strong>clock</strong> (<a href="../common/index.htm#nautilus_trader.common.component.LiveClock"><em>LiveClock</em></a>) – The clock for building clients.</li>
<li><strong>logger</strong> (<a href="../common/index.htm#nautilus_trader.common.component.Logger"><em>Logger</em></a>) – The logger for building clients.</li>
<li><strong>log</strong> (<a href="../common/index.htm#nautilus_trader.common.component.Logger"><em>Logger</em></a>) – The trading nodes logger.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="add_data_client_factoryname-str-factory-typelivedataclientfactory--none-1">add_data_client_factory(name: str, factory: type[LiveDataClientFactory]) → None<a href="#add_data_client_factoryname-str-factory-typelivedataclientfactory--none-1" class="hash-link" aria-label="Direct link to add_data_client_factory(name: str, factory: type[LiveDataClientFactory]) → None" title="Direct link to add_data_client_factory(name: str, factory: type[LiveDataClientFactory]) → None">​</a></h4>
<p>Add the given data client factory to the builder.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>name</strong> (<em>str</em>) – The name of the client.</li>
<li><strong>factory</strong> (<em>type</em> *[*<em>LiveDataClientFactory</em> <em>]</em>) – The factory to add.</li>
</ul>
</li>
<li><strong>Raises:</strong>
<ul>
<li><strong>ValueError</strong> – If name is not a valid string.</li>
<li><strong>KeyError</strong> – If name has already been added.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="add_exec_client_factoryname-str-factory-typeliveexecclientfactory--none-1">add_exec_client_factory(name: str, factory: type[LiveExecClientFactory]) → None<a href="#add_exec_client_factoryname-str-factory-typeliveexecclientfactory--none-1" class="hash-link" aria-label="Direct link to add_exec_client_factory(name: str, factory: type[LiveExecClientFactory]) → None" title="Direct link to add_exec_client_factory(name: str, factory: type[LiveExecClientFactory]) → None">​</a></h4>
<p>Add the given client factory to the builder.</p>
<ul>
<li><strong>Parameters:</strong>
<ul>
<li><strong>name</strong> (<em>str</em>) – The name of the client.</li>
<li><strong>factory</strong> (<em>type</em> *[*<em>LiveExecClientFactory</em> <em>]</em>) – The factory to add.</li>
</ul>
</li>
<li><strong>Raises:</strong>
<ul>
<li><strong>ValueError</strong> – If name is not a valid string.</li>
<li><strong>KeyError</strong> – If name has already been added.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="build_data_clientsconfig-dictstr-livedataclientconfig--none">build_data_clients(config: dict[str, <a href="../config/index.htm#nautilus_trader.live.config.LiveDataClientConfig">LiveDataClientConfig</a>]) → None<a href="#build_data_clientsconfig-dictstr-livedataclientconfig--none" class="hash-link" aria-label="Direct link to build_data_clientsconfig-dictstr-livedataclientconfig--none" title="Direct link to build_data_clientsconfig-dictstr-livedataclientconfig--none">​</a></h4>
<p>Build the data clients with the given configuration.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>config</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <a href="../config/index.htm#nautilus_trader.common.config.ImportableConfig"><em>ImportableConfig</em></a> <em>|</em> <a href="../config/index.htm#nautilus_trader.live.config.LiveDataClientConfig"><em>LiveDataClientConfig</em></a> <em>]</em>) – The data clients configuration.</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="build_exec_clientsconfig-dictstr-liveexecclientconfig--none">build_exec_clients(config: dict[str, <a href="../config/index.htm#nautilus_trader.live.config.LiveExecClientConfig">LiveExecClientConfig</a>]) → None<a href="#build_exec_clientsconfig-dictstr-liveexecclientconfig--none" class="hash-link" aria-label="Direct link to build_exec_clientsconfig-dictstr-liveexecclientconfig--none" title="Direct link to build_exec_clientsconfig-dictstr-liveexecclientconfig--none">​</a></h4>
<p>Build the execution clients with the given configuration.</p>
<ul>
<li><strong>Parameters:</strong>
<strong>config</strong> (<em>dict</em> *[*<em>str</em> <em>,</em> <a href="../config/index.htm#nautilus_trader.common.config.ImportableConfig"><em>ImportableConfig</em></a> <em>|</em> <a href="../config/index.htm#nautilus_trader.live.config.LiveExecClientConfig"><em>LiveExecClientConfig</em></a> <em>]</em>) – The execution clients configuration.</li>
</ul></div></article><nav class="docusaurus-mt-lg pagination-nav" aria-label="Docs pages"><a class="pagination-nav__link pagination-nav__link--prev" href="../indicators/index.htm"><div class="pagination-nav__sublabel">Previous</div><div class="pagination-nav__label">Indicators</div></a><a class="pagination-nav__link pagination-nav__link--next" href="../model/index.htm"><div class="pagination-nav__sublabel">Next</div><div class="pagination-nav__label">Model</div></a></nav></div></div><div class="col col--3"><div class="tableOfContents_bqdL thin-scrollbar theme-doc-toc-desktop"><ul class="table-of-contents table-of-contents__left-border"><li><a href="#class-livedataclient" class="table-of-contents__link toc-highlight"><em>class</em> LiveDataClient</a></li><li><a href="#class-livemarketdataclient" class="table-of-contents__link toc-highlight"><em>class</em> LiveMarketDataClient</a></li><li><a href="#class-livedataengine" class="table-of-contents__link toc-highlight"><em>class</em> LiveDataEngine</a></li><li><a href="#class-liveexecutionclient" class="table-of-contents__link toc-highlight"><em>class</em> LiveExecutionClient</a></li><li><a href="#class-liveexecutionengine" class="table-of-contents__link toc-highlight"><em>class</em> LiveExecutionEngine</a></li><li><a href="#class-liveriskengine" class="table-of-contents__link toc-highlight"><em>class</em> LiveRiskEngine</a></li><li><a href="#class-tradingnode" class="table-of-contents__link toc-highlight"><em>class</em> TradingNode</a></li><li><a href="#class-tradingnodebuilder" class="table-of-contents__link toc-highlight"><em>class</em> TradingNodeBuilder</a></li></ul></div></div></div><div class="footer-wrapper MuiBox-root css-0"><div class="social-footer-box MuiBox-root css-0"><style data-emotion="css 17rjyz3">.css-17rjyz3{-webkit-text-decoration:underline;text-decoration:underline;text-decoration-color:rgba(25, 118, 210, 0.4);padding:12px;margin-right:10px;}.css-17rjyz3:hover{text-decoration-color:inherit;}</style><style data-emotion="css jl1bw5">.css-jl1bw5{margin:0;font:inherit;color:#1976d2;-webkit-text-decoration:underline;text-decoration:underline;text-decoration-color:rgba(25, 118, 210, 0.4);padding:12px;margin-right:10px;}.css-jl1bw5:hover{text-decoration-color:inherit;}</style><a class="MuiTypography-root MuiTypography-inherit MuiLink-root MuiLink-underlineAlways github-footer css-jl1bw5" href="https://github.com/nautechsystems/nautilus_trader" target="_blank"></a><a class="MuiTypography-root MuiTypography-inherit MuiLink-root MuiLink-underlineAlways discord-footer css-jl1bw5" href="https://discord.gg/NautilusTrader" target="_blank"></a><a class="MuiTypography-root MuiTypography-inherit MuiLink-root MuiLink-underlineAlways linkedin-footer css-jl1bw5" href="https://www.linkedin.com/company/nautechsystems/" target="_blank"></a><a class="MuiTypography-root MuiTypography-inherit MuiLink-root MuiLink-underlineAlways x-footer css-jl1bw5" href="https://twitter.com/NautilusTrader" target="_blank"></a></div><div class="footer-copyright">© 2025 Nautech Systems Pty Ltd. All rights reserved.</div></div></div></div></main></div></div></div></div>
</body>
</html>